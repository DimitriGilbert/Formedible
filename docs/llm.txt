################################################################################
#
# Library: Formedible
# Purpose: A comprehensive, self-contained knowledge base for an LLM to 
#          understand and generate code for the Formedible React hook.
# Version: 1.0.0 (Comprehensive Auto-Documentation)
# Date: 2025-08-12
#
################################################################################

### META
---
- **Library Name**: Formedible
- **Description**: A powerful, declarative React hook that wraps TanStack Form and integrates with Zod for validation and shadcn/ui for components. It is designed to simplify the creation of complex, type-safe, and beautiful forms with minimal boilerplate. It enables developers to define entire form structures—including fields, validation, multi-page/tab layouts, conditional logic, and advanced behaviors—through a single, declarative configuration object.
- **Core Technologies**: React, TypeScript, TanStack Form, Zod, shadcn/ui.
- **Primary Goal**: To enable an AI or developer to generate complete, production-ready forms from a high-level description, by providing a single, comprehensive configuration object.

### CORE CONCEPTS
---
1.  **Declarative-First**: You define *what* the form should be, not *how* to build it. The hook takes a configuration object and returns a fully functional form component.
2.  **Schema-Driven**: Form validation and type safety are derived directly from a Zod schema (`schema` option) or on a per-field basis (`validation` option).
3.  **Component-Based**: Leverages shadcn/ui components but allows for complete customization by either overriding default components (`defaultComponents`) or passing a custom component to a specific field (`component` property).
4.  **Layout System**: Provides a flexible layout system through the `layout` option (grid, flex, tabs, accordion, stepper) and field grouping via `section` and `group` properties.
5.  **Escape Hatches**: Provides direct access to the underlying TanStack Form instance (`form`) for maximum flexibility.
6.  **Feature Rich**: Includes built-in support for multi-page forms, conditional logic, cross-field validation, async validation, form analytics, and state persistence.

### INSTALLATION
---
Formedible is added to a project using the `shadcn/ui` CLI, which vendors the files directly into your source code.

- **Command**:
  ```bash
  npx shadcn@latest add formedible.dev/r/use-formedible.json
  ```
- **Vendored Files**: This command adds the following to your project:
  - `hooks/use-formedible.tsx`: The main hook.
  - `components/formedible/**/*.tsx`: All standard field and layout components.
  - `lib/formedible/types.ts`: All TypeScript definitions.
  - It also installs necessary dependencies like `@tanstack/react-form`.

### PRIMARY API: `useFormedible<TFormValues>(options)`
---
This is the single most important hook in the library.

- **Generic Parameter**: `<TFormValues>`: The TypeScript type for the form's values, usually inferred from a Zod schema via `z.infer<typeof mySchema>`.

- **Returns**: An object with the following properties:
  - `form`: The raw TanStack Form instance. Use this for manual rendering or to access the full TanStack Form API (`form.getFieldState`, `form.setFieldValue`, etc.).
  - `Form`: A React component that renders the entire form automatically based on your configuration. Simply render `<Form />`.
  - **Multi-Page API**:
    - `currentPage`: `number`. The current page number (1-based).
    - `totalPages`: `number`. The total number of pages.
    - `goToNextPage()`: `() => void`. Navigates to the next page, running validation on the current page's fields.
    - `goToPreviousPage()`: `() => void`. Navigates to the previous page.
    - `setCurrentPage(page: number)`: `(page: number) => void`. Jumps to a specific page.
    - `isFirstPage`: `boolean`.
    - `isLastPage`: `boolean`.
    - `progressValue`: `number`. The completion percentage (0-100).

### CONFIGURATION: `UseFormedibleOptions<TFormValues>`
---
This is the heart of the library. You pass this object to `useFormedible`.

**Core Options:**
- `fields: FieldConfig[]`: **(Required)** An array of objects, where each object defines a field in the form.
- `schema?: z.ZodSchema<TFormValues>`: A Zod schema for the entire form.
- `formOptions: { ... }`: **(Required)** Options passed directly to TanStack Form. You **must** provide `defaultValues` and `onSubmit`.
  - `defaultValues: TFormValues`: The initial values for the form.
  - `onSubmit: (props: { value: TFormValues; formApi: any }) => void | Promise<void>`: Function to handle form submission.
  - `onSubmitInvalid?: (props: { ... }) => void`: Callback for when submission fails validation.
  - `onChange?: (props: { ... }) => void`: Callback for any form value change.

**UI & Layout:**
- `submitLabel?: string`: Text for the submit button (default: "Submit").
- `nextLabel?: string`: Text for the "Next" button in multi-page forms.
- `previousLabel?: string`: Text for the "Previous" button.
- `collapseLabel? / expandLabel?`: Text for collapsible section toggles.
- `formClassName?: string`: CSS class for the `<form>` element.
- `fieldClassName?: string`: Default CSS class for the wrapper of each field.
- `labelClassName? / buttonClassName? / submitButtonClassName?`: More granular CSS class controls.
- `layout?: { type: 'grid' | 'flex' | 'tabs' | 'accordion' | 'stepper'; ... }`: Define a layout for the entire form.
- `submitButton?: React.ComponentType`: A custom component to use for the submit button.

**Multi-Page, Tabs, & Progress:**
- `pages?: PageConfig[]`: An array to configure titles and descriptions for each page.
- `tabs?: { id: string; label: string; description?: string; }[]`: An array to configure a tab-based layout.
- `progress?: ProgressConfig`: Configuration for the progress bar in multi-page forms.

**State & Behavior:**
- `autoScroll?: boolean`: If `true`, scrolls to the top of the form on page change (default: `false`).
- `autoSubmitOnChange?: boolean`: If `true`, submits the form automatically when a value changes.
- `autoSubmitDebounceMs?: number`: Debounce time for auto-submission.
- `disabled?: boolean`: Disables the entire form.
- `loading?: boolean`: Puts the form in a loading state.
- `resetOnSubmitSuccess?: boolean`: If `true`, resets the form to default values after a successful submission.
- `showSubmitButton?: boolean`: Set to `false` to hide the default submit button (default: `true`).

**Advanced Features:**
- `crossFieldValidation?: CrossFieldValidationConfig[]`: Array to define validation rules between multiple fields.
- `asyncValidation?: { [fieldName: string]: AsyncValidationConfig }`: Object to define asynchronous validation for specific fields.
- `analytics?: AnalyticsConfig`: Object to configure analytics and tracking callbacks.
- `persistence?: PersistenceConfig`: Object to configure automatic form state persistence (e.g., to `localStorage`).
- `conditionalSections?: ConditionalSection[]`: Define sections of fields that appear/disappear based on a condition.

**Extensibility:**
- `defaultComponents?: { [fieldType: string]: React.ComponentType<any> }`: Override the default component for a given field `type`.
- `globalWrapper?: React.ComponentType<{ children: React.ReactNode; field: FieldConfig }>`: A component to wrap around every single field.

### FIELD CONFIGURATION: `FieldConfig`
---
Each object in the `fields` array defines one form field.

**Core Properties:**
- `name: string`: The key in the form values object. Must match a key in the Zod schema if one is provided.
- `type: string`: The type of field to render (e.g., `'text'`, `'select'`, `'array'`). See detailed list below.

**Common Properties:**
- `label?: string`: The field's label.
- `placeholder?: string`: The field's placeholder text.
- `description?: string`: Help text displayed below the field.
- `conditional?: (values: TFormValues) => boolean`: A function that receives the current form values and returns `true` if the field should be shown.
- `validation?: z.ZodSchema`: A Zod schema for validating just this field.
- `component?: React.ComponentType<FieldComponentProps>`: A custom React component to render this specific field.
- `wrapper?: React.ComponentType<{...}>`: A custom component to wrap this specific field.

**Layout & Grouping:**
- `page?: number`: The page number this field appears on in a multi-page form (1-based).
- `tab?: string`: The ID of the tab this field appears on in a tab-based form.
- `section?: { title?: string; description?: string; collapsible?: boolean; defaultExpanded?: boolean; }`: Groups the field into a distinct visual section, which can be collapsible.
- `group?: string`: Sub-groups fields within a `section`.

**Help & Inline Validation:**
- `help?: { text?: string; tooltip?: string; link?: { url: string; text: string }; }`: Provides additional help text, a tooltip, or an external link for the field.
- `inlineValidation?: { enabled?: boolean; debounceMs?: number; showSuccess?: boolean; asyncValidator?: (value: any) => Promise<string | null>; }`: Configures real-time validation feedback as the user types.

### DETAILED FIELD TYPES & CONFIGURATIONS
---
This is the dictionary of all available field `type`s and their specific configuration objects.

- **`array`**: For creating dynamic lists of fields.
  - **`arrayConfig: { ... }`**
    - `itemType: string`: The `type` of each item in the array (e.g., `'text'`, `'object'`).
    - `itemLabel?: string`: A label for each item (e.g., "Team Member").
    - `sortable?: boolean`: Allows drag-and-drop reordering.
    - `minItems? / maxItems?`: `number`.
    - `addButtonLabel? / removeButtonLabel?`: `string`.
    - `objectConfig?: ObjectFieldConfig`: If `itemType` is `'object'`, you must provide this configuration for the nested fields.

- **`autocomplete`**: A text input with async/sync search suggestions.
  - **`autocompleteConfig: { ... }`**
    - `options?: string[] | { value: string; label: string }[]`: Static list of options.
    - `asyncOptions?: (query: string) => Promise<...>`: Function to fetch options dynamically.
    - `debounceMs?: number`: Debounce for `asyncOptions`.
    - `minChars?: number`: Min characters to trigger search.
    - `allowCustom?: boolean`: Allow values not in the list.

- **`checkbox`**: A standard checkbox. No specific config object.

- **`colorPicker`**: A color picker with presets and a custom input.
  - **`colorConfig: { ... }`**
    - `format?: 'hex' | 'rgb' | 'hsl'`.
    - `presetColors?: string[]`: An array of hex color strings.
    - `allowCustom?: boolean`.

- **`date`**: A date picker.
  - **`dateConfig: { ... }`**
    - `format?: string`: Date format (uses `date-fns` tokens).
    - `minDate? / maxDate?`: `Date`.
    - `disabledDates?: Date[]`.
    - `showTime?: boolean`: To include time selection.

- **`duration`**: A set of inputs to specify a duration.
  - **`durationConfig: { ... }`**
    - `format?: 'hms' | 'hm' | 'ms' | 'hours' | 'minutes' | 'seconds'`.
    - `showLabels?: boolean`.

- **`file`**: A file upload input.
  - **`fileConfig: { ... }`**
    - `accept?: string`: MIME types (e.g., 'image/png, image/jpeg').
    - `multiple?: boolean`.
    - `maxSize?: number`: Max file size in bytes.
    - `maxFiles?: number`.

- **`location`**: A powerful location picker with map and search.
  - **`locationConfig: { ... }`**
    - `mapProvider?: 'openstreetmap' | 'google' | 'bing' | ...`: The map provider.
    - `enableSearch?: boolean`: Enables a search bar.
    - `enableGeolocation?: boolean`: Allows user to jump to their location.
    - `searchCallback?: (query) => Promise<LocationSearchResult[]>`: Provide a custom search function.
    - `reverseGeocodeCallback?: (lat, lng) => Promise<LocationValue>`: Custom reverse geocode function.
    - `googleMaps?: { apiKey: string; ... }`: Required if using Google Maps.
    - `ui?: { mapHeight?: number; ... }`: UI customization.

- **`maskedInput`**: A text input that enforces a specific format.
  - **`maskedInputConfig: { ... }`**
    - `mask: string | (value: string) => string`: The mask pattern (e.g., `'(000) 000-0000'`).
    - `guide?: boolean`: Show mask characters (e.g., `_`) as a guide.

- **`multiSelect`**: A dropdown for selecting multiple options.
  - **`multiSelectConfig: { ... }`**
    - `maxSelections?: number`.
    - `searchable?: boolean`.
    - `creatable?: boolean`: Allow adding new options on the fly.
- **`combobox`**: A searchable dropdown with command palette-style interface.
  - **`comboboxConfig: { ... }`**
    - `searchable?: boolean`: Enable/disable search functionality (default: true).
    - `placeholder?: string`: Placeholder text for the trigger button.
    - `searchPlaceholder?: string`: Placeholder text for the search input.
    - `noOptionsText?: string`: Text to show when no options are found.
    - `allowClear?: boolean`: Allow clearing the selection.
- **`multicombobox`**: A multi-select combobox with command palette-style interface.
  - **`multiComboboxConfig: { ... }`**
    - `maxSelections?: number`: Maximum number of selections allowed.
    - `searchable?: boolean`: Enable/disable search functionality (default: true).
    - `creatable?: boolean`: Allow creating new options (default: false).
    - `placeholder?: string`: Placeholder text for the trigger button.
    - `searchPlaceholder?: string`: Placeholder text for the search input.
    - `noOptionsText?: string`: Text to show when no options are found.

- **`number`**: A number input.
  - **`numberConfig: { ... }`**
    - `min? / max? / step?`: `number`.
    - `precision?: number`: Number of decimal places.
    - `allowNegative?: boolean`.

- **`object`**: Groups related fields into a nested object.
  - **`objectConfig: { ... }`**
    - `fields: FieldConfig[]`: An array of `FieldConfig` objects for the fields inside the object.
    - `title?: string`: A title for the object group.
    - `collapsible?: boolean`.
    - `layout?: 'vertical' | 'horizontal' | 'grid'`.

- **`password`**: A password input field.
  - **`passwordConfig: { ... }`**
    - `showToggle?: boolean`: Show a button to toggle password visibility.
    - `strengthMeter?: boolean`: Display a password strength indicator.

- **`phone`**: A phone number input with country code selection.
  - **`phoneConfig: { ... }`**
    - `defaultCountry?: string`: Default country code (e.g., 'US').
    - `format?: 'national' | 'international'`.
    - `allowedCountries?: string[]`.

- **`radio`**: A radio button group.
  - **`options`**: (Required) `string[]` or `{ value: string; label: string }[]`.

- **`rating`**: A star/icon rating component.
  - **`ratingConfig: { ... }`**
    - `max?: number`: Max rating (default 5).
    - `allowHalf?: boolean`.
    - `icon?: 'star' | 'heart' | 'thumbs'`.
    - `size?: 'sm' | 'md' | 'lg'`.

- **`select`**: A standard dropdown select.
  - **`options`**: (Required) `string[]` or `{ value: string; label: string }[]`.

- **`slider`**: A slider input.
  - **`sliderConfig: { ... }`**
    - `min? / max? / step?`: `number`.
    - `valueMapping?: { sliderValue: number; displayValue: string | number; label?: string }[]`: Map slider steps to custom values/labels.
    - `gradientColors?: { start: string; end: string }`: Apply a gradient to the slider track.

- **`switch`**: A toggle switch. No specific config object.

- **`text` / `email` / `url`**: A standard text input.
  - **`datalist?: { options?: string[]; asyncOptions?: (query) => Promise<string[]>; ... }`**: Provide autocomplete suggestions.

- **`textarea`**: A multi-line text input.
  - **`textareaConfig: { ... }`**
    - `rows?: number`.
    - `maxLength?: number`.
    - `showWordCount?: boolean`.

### ADVANCED USAGE & BEST PRACTICES
---
1.  **Infer Your Types**: Always infer your form's type from your Zod schema (`z.infer<typeof mySchema>`) to ensure end-to-end type safety.
2.  **Keep Schemas and Fields in Sync**: The `name` property of each field must correspond to a key in your Zod schema.
3.  **Use `conditional` for Dynamic Fields**: The `conditional` function is the most efficient way to show or hide individual fields. For groups of fields, use `conditionalSections`.
4.  **Structure with `object`, `section`, and `group`**: For complex forms, use `object` to nest data structures. Use `section` and `group` to visually organize the UI without affecting the data shape.
5.  **Customize with Components**: When you need to change the look or behavior of a field, prefer passing a custom React component to the `component` property of a `FieldConfig` over trying to override styles with CSS. This is a more robust and maintainable approach.
6.  **Leverage the Layout System**: Use the top-level `layout` option for form-wide structure (like tabs or a stepper). Use `section` and `group` properties on fields for finer-grained control within a page or tab.

This comprehensive guide should provide all the necessary information for an LLM to effectively work with the Formedible library.
