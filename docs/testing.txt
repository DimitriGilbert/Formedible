1:"$Sreact.fragment"
2:I[8024,["824","static/chunks/824-e50451cfed2adb11.js","261","static/chunks/261-50dd4dfeb4e4d897.js","701","static/chunks/701-941e272ad91e7758.js","443","static/chunks/443-3debf71ab2bd9ff1.js","129","static/chunks/129-73aeafeace875159.js","177","static/chunks/app/layout-667f78e42325bd4e.js"],"default"]
3:I[3073,["824","static/chunks/824-e50451cfed2adb11.js","261","static/chunks/261-50dd4dfeb4e4d897.js","701","static/chunks/701-941e272ad91e7758.js","443","static/chunks/443-3debf71ab2bd9ff1.js","129","static/chunks/129-73aeafeace875159.js","177","static/chunks/app/layout-667f78e42325bd4e.js"],"default"]
4:I[7132,[],""]
5:I[5082,[],""]
8:I[700,[],"MetadataBoundary"]
a:I[700,[],"OutletBoundary"]
d:I[7748,[],"AsyncMetadataOutlet"]
f:I[700,[],"ViewportBoundary"]
11:I[9699,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/926099a98b56dac3.css","style"]
6:T46b,test('multi-page form navigation', async () => {
  const tester = createFormTester({
    fields: [
      { name: 'firstName', type: 'text', label: 'First Name', page: 1 },
      { name: 'lastName', type: 'text', label: 'Last Name', page: 1 },
      { name: 'email', type: 'email', label: 'Email', page: 2 },
      { name: 'phone', type: 'tel', label: 'Phone', page: 2 },
    ],
  });

  const actions = await tester.render();

  // Start on page 1
  actions.expectCurrentPage(1);
  
  // Fill page 1 fields
  await actions.fillField('firstName', 'John');
  await actions.fillField('lastName', 'Doe');
  
  // Navigate to page 2
  await actions.nextPage();
  actions.expectCurrentPage(2);
  
  // Fill page 2 fields
  await actions.fillField('email', 'john@example.com');
  await actions.fillField('phone', '555-1234');
  
  // Go back to page 1
  await actions.previousPage();
  actions.expectCurrentPage(1);
  
  // Verify data is preserved
  actions.expectFieldValue('firstName', 'John');
  actions.expectFieldValue('lastName', 'Doe');
  
  // Go to page 2 and submit
  await actions.nextPage();
  await actions.submitForm();
});7:T78e,describe('Registration Form', () => {
  const formConfig = {
    fields: [
      { name: 'username', type: 'text', label: 'Username' },
      { name: 'email', type: 'email', label: 'Email' },
      { name: 'password', type: 'password', label: 'Password' },
      { name: 'confirmPassword', type: 'password', label: 'Confirm Password' },
    ],
    crossFieldValidation: [{
      fields: ['password', 'confirmPassword'],
      validator: (values) => 
        values.password !== values.confirmPassword ? 'Passwords must match' : null,
      message: 'Passwords must match'
    }],
    asyncValidation: {
      username: {
        validator: async (value) => {
          const taken = ['admin', 'user', 'test'];
          return taken.includes(value) ? 'Username is taken' : null;
        }
      }
    }
  };

  test('successful registration', async () => {
    const tester = createFormTester(formConfig);
    const actions = await tester.render();

    await actions.fillFields({
      username: 'newuser',
      email: 'newuser@example.com',
      password: 'password123',
      confirmPassword: 'password123'
    });

    await actions.waitForAsyncValidation('username');
    
    actions.expectValid();
    await actions.submitForm();
  });

  test('validation errors', async () => {
    const tester = createFormTester(formConfig);
    const actions = await tester.render();

    // Test taken username
    await actions.fillField('username', 'admin');
    await actions.waitForAsyncValidation('username');
    actions.expectError('username', 'Username is taken');

    // Test password mismatch
    await actions.fillField('password', 'password123');
    await actions.fillField('confirmPassword', 'different');
    actions.expectError('password', 'Passwords must match');

    // Test invalid email
    await actions.fillField('email', 'invalid-email');
    actions.expectError('email');

    actions.expectInvalid();
  });
});0:{"P":null,"b":"8is_eHYTZ9ILdVvdfPewv","p":"","c":["","docs","testing"],"i":false,"f":[[["",{"children":["docs",{"children":["testing",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/926099a98b56dac3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"async":true,"src":"https://cdn.counter.dev/script.js","data-id":"154c6878-7558-4eff-90f9-bd4904015df1","data-utcoffset":"1"}]}],["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"children":[["$","$L3",null,{}],["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["testing",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","div",null,{"className":"container mx-auto py-8 px-4 max-w-4xl","children":["$","div",null,{"className":"space-y-8","children":[["$","div",null,{"children":[["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"Testing Forms"}],["$","p",null,{"className":"text-lg text-muted-foreground","children":"Formedible provides comprehensive testing utilities to help you write reliable tests for your forms, including support for validation, async operations, and multi-page forms."}]]}],["$","div",null,{"className":"space-y-6","children":[["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Getting Started"}],["$","p",null,{"className":"mb-4","children":"Import the testing utilities from Formedible and create a form tester for your form configuration:"}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":[["$","h3",null,{"className":"font-semibold mb-2","children":"Basic Setup"}],["$","pre",null,{"className":"text-sm overflow-x-auto","children":"import { createFormTester } from 'formedible';\n\nconst formConfig = {\n  fields: [\n    { name: 'email', type: 'email', label: 'Email' },\n    { name: 'password', type: 'password', label: 'Password' },\n  ],\n};\n\ntest('form validation', async () => {\n  const tester = createFormTester(formConfig);\n  const actions = await tester.render();\n\n  // Fill invalid email\n  await actions.fillField('email', 'invalid-email');\n  actions.expectError('email');\n\n  // Fill valid email\n  await actions.fillField('email', 'test@example.com');\n  actions.expectNoError('email');\n\n  // Submit form\n  await actions.submitForm();\n});"}]]}]]}],["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Available Actions"}],["$","p",null,{"className":"mb-4","children":"The form tester provides a comprehensive set of actions for interacting with your forms:"}],["$","div",null,{"className":"space-y-4","children":[["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":[["$","h3",null,{"className":"font-semibold mb-2","children":"Field Interactions"}],["$","pre",null,{"className":"text-sm overflow-x-auto","children":"// Fill individual fields\nawait actions.fillField('email', 'user@example.com');\nawait actions.fillField('age', 25);\n\n// Fill multiple fields at once\nawait actions.fillFields({\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john@example.com'\n});\n\n// Trigger focus and blur events\nawait actions.triggerFieldFocus('email');\nawait actions.triggerFieldBlur('email');"}]]}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":[["$","h3",null,{"className":"font-semibold mb-2","children":"Form Actions"}],["$","pre",null,{"className":"text-sm overflow-x-auto","children":"// Submit the form\nawait actions.submitForm();\n\n// Reset the form\nawait actions.resetForm();\n\n// Get current form data\nconst formData = actions.getFormData();\nconsole.log(formData); // { email: 'user@example.com', age: 25 }"}]]}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":[["$","h3",null,{"className":"font-semibold mb-2","children":"Multi-Page Navigation"}],["$","pre",null,{"className":"text-sm overflow-x-auto","children":"// Navigate to specific page\nawait actions.goToPage(2);\n\n// Navigate using buttons\nawait actions.nextPage();\nawait actions.previousPage();\n\n// Check current page\nactions.expectCurrentPage(1);"}]]}]]}]]}],["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Validation Testing"}],["$","p",null,{"className":"mb-4","children":"Test form validation with built-in assertion methods:"}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":[["$","h3",null,{"className":"font-semibold mb-2","children":"Validation Assertions"}],["$","pre",null,{"className":"text-sm overflow-x-auto","children":"test('form validation', async () => {\n  const tester = createFormTester({\n    fields: [\n      { name: 'email', type: 'email', label: 'Email' },\n      { name: 'age', type: 'number', label: 'Age' },\n    ],\n  });\n  \n  const actions = await tester.render();\n\n  // Test field-level validation\n  await actions.fillField('email', 'invalid');\n  actions.expectError('email', 'Invalid email');\n  \n  await actions.fillField('email', 'valid@example.com');\n  actions.expectNoError('email');\n\n  // Test form-level validation\n  await actions.fillField('age', -5);\n  actions.expectInvalid();\n  \n  await actions.fillField('age', 25);\n  actions.expectValid();\n\n  // Test field values\n  actions.expectFieldValue('email', 'valid@example.com');\n  actions.expectFieldValue('age', '25');\n});"}]]}]]}],["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Cross-Field Validation Testing"}],["$","p",null,{"className":"mb-4","children":"Test cross-field validation scenarios like password confirmation:"}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":["$","pre",null,{"className":"text-sm overflow-x-auto","children":"test('password confirmation validation', async () => {\n  const tester = createFormTester({\n    fields: [\n      { name: 'password', type: 'password', label: 'Password' },\n      { name: 'confirmPassword', type: 'password', label: 'Confirm Password' },\n    ],\n    crossFieldValidation: [{\n      fields: ['password', 'confirmPassword'],\n      validator: (values) => \n        values.password !== values.confirmPassword ? 'Passwords must match' : null,\n      message: 'Passwords must match'\n    }]\n  });\n\n  const actions = await tester.render();\n\n  // Test mismatched passwords\n  await actions.fillField('password', 'password123');\n  await actions.fillField('confirmPassword', 'different');\n  \n  actions.expectError('password', 'Passwords must match');\n  actions.expectError('confirmPassword', 'Passwords must match');\n\n  // Test matching passwords\n  await actions.fillField('confirmPassword', 'password123');\n  \n  actions.expectNoError('password');\n  actions.expectNoError('confirmPassword');\n});"}]}]]}],["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Async Validation Testing"}],["$","p",null,{"className":"mb-4","children":"Test async validation with proper waiting for completion:"}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":["$","pre",null,{"className":"text-sm overflow-x-auto","children":"test('async username validation', async () => {\n  const tester = createFormTester({\n    fields: [\n      { name: 'username', type: 'text', label: 'Username' },\n    ],\n    asyncValidation: {\n      username: {\n        validator: async (value) => {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 100));\n          return value === 'taken' ? 'Username is taken' : null;\n        },\n        debounceMs: 300\n      }\n    }\n  });\n\n  const actions = await tester.render();\n\n  // Test taken username\n  await actions.fillField('username', 'taken');\n  await actions.waitForAsyncValidation('username');\n  \n  actions.expectError('username', 'Username is taken');\n\n  // Test available username\n  await actions.fillField('username', 'available');\n  await actions.waitForAsyncValidation('username');\n  \n  actions.expectNoError('username');\n});"}]}]]}],["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Multi-Page Form Testing"}],["$","p",null,{"className":"mb-4","children":"Test multi-page forms with navigation and page-specific validation:"}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":["$","pre",null,{"className":"text-sm overflow-x-auto","children":"$6"}]}]]}],["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Jest/Vitest Matchers"}],["$","p",null,{"className":"mb-4","children":"Use custom matchers for more readable test assertions:"}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":[["$","h3",null,{"className":"font-semibold mb-2","children":"Setup Matchers"}],["$","pre",null,{"className":"text-sm overflow-x-auto","children":"// In your test setup file\nimport { formMatchers } from 'formedible';\n\nexpect.extend(formMatchers);\n\n// Now you can use custom matchers\ntest('form validation with matchers', async () => {\n  const tester = createFormTester(config);\n  \n  await tester.fillField('email', 'invalid');\n  expect(tester).toHaveError('email');\n  \n  await tester.fillField('email', 'valid@example.com');\n  expect(tester).toHaveNoError('email');\n  \n  expect(tester).toBeValid();\n});"}]]}]]}],["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Testing with React Testing Library"}],["$","p",null,{"className":"mb-4","children":"Integrate Formedible testing utilities with React Testing Library:"}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":["$","pre",null,{"className":"text-sm overflow-x-auto","children":"import { render, screen } from '@testing-library/react';\nimport { createFormTester } from 'formedible';\nimport MyFormComponent from './MyFormComponent';\n\ntest('form component integration', async () => {\n  const { container } = render(<MyFormComponent />);\n  \n  const tester = createFormTester(formConfig, container);\n  const actions = await tester.render();\n  \n  // Set form instance from your component\n  const formInstance = getFormInstanceFromComponent(); // Your implementation\n  tester.setFormInstance(formInstance);\n  \n  // Now test as usual\n  await actions.fillField('email', 'test@example.com');\n  await actions.submitForm();\n  \n  // Use RTL assertions alongside Formedible\n  expect(screen.getByText('Form submitted successfully')).toBeInTheDocument();\n});"}]}]]}],["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Best Practices"}],["$","div",null,{"className":"space-y-4","children":[["$","div",null,{"className":"border-l-4 border-primary pl-4","children":[["$","h3",null,{"className":"font-semibold","children":"Test User Flows"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Test complete user journeys, not just individual field validation."}]]}],["$","div",null,{"className":"border-l-4 border-accent pl-4","children":[["$","h3",null,{"className":"font-semibold","children":"Async Operations"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Always wait for async validation to complete before making assertions."}]]}],["$","div",null,{"className":"border-l-4 border-secondary pl-4","children":[["$","h3",null,{"className":"font-semibold","children":"Error Scenarios"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Test both success and error scenarios to ensure robust error handling."}]]}],["$","div",null,{"className":"border-l-4 border-muted pl-4","children":[["$","h3",null,{"className":"font-semibold","children":"Isolation"}],["$","p",null,{"className":"text-sm text-muted-foreground","children":"Keep tests isolated and independent to avoid test interference."}]]}]]}]]}],["$","section",null,{"children":[["$","h2",null,{"className":"text-2xl font-semibold mb-4","children":"Example Test Suite"}],["$","p",null,{"className":"mb-4","children":"Here's a complete example of testing a registration form:"}],["$","div",null,{"className":"bg-muted p-4 rounded-lg","children":["$","pre",null,{"className":"text-sm overflow-x-auto","children":"$7"}]}]]}]]}]]}]}],["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","TpH9xey_MWAobmuqvu5QE",{"children":[["$","$Lf",null,{"children":"$L10"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[7748,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
c:null
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"Testing Forms - Formedible"}],["$","meta","1",{"name":"description","content":"Learn how to test Formedible forms with the built-in testing utilities and best practices."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
