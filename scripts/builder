#!/bin/bash

# Formedible Build & Release Script
# Usage: scripts/builder [--release <name>] [--no-publish]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BUILD_DIR="build"
RELEASE_DIR="release"
PKG_DIST_DIR="packages/formedible/dist"
WEB_DIST_DIR="apps/web/out"
WEB_COMPONENTS_DIR="apps/web/src/components"
WEB_HOOKS_DIR="apps/web/src/hooks"
WEB_LIB_DIR="apps/web/src/lib"

# Parse command line arguments
RELEASE_NAME=""
NO_PUBLISH=false
SKIP_BUILD=false
SKIP_GITHUB=false
SKIP_WEB_DEPLOY=false
VERSION_BUMP_LEVEL=""

while [[ $# -gt 0 ]]; do
  case $1 in
    --release)
      RELEASE_NAME="$2"
      shift 2
      ;;
    --no-publish)
      NO_PUBLISH=true
      shift
      ;;
    --skip-build)
      SKIP_BUILD=true
      shift
      ;;
    --skip-github)
      SKIP_GITHUB=true
      shift
      ;;
    --skip-web-deploy)
      SKIP_WEB_DEPLOY=true
      shift
      ;;
    --version-bump)
      VERSION_BUMP_LEVEL="$2"
      shift 2
      ;;
    -h|--help)
      echo "Usage: $0 [options]"
      echo ""
      echo "Options:"
      echo "  --release <name>     Create a release with the specified name"
      echo "  --no-publish         Create release files but don't publish to GitHub"
      echo "  --skip-build         Skip the application build step"
      echo "  --skip-github        Skip GitHub release creation"
      echo "  --skip-web-deploy    Skip web application deployment to gh-pages"
      echo "  --version-bump <level> Automatically bump version (patch, minor, major) and use it as release name"
      echo "  -h, --help           Show this help message"
      echo ""
      echo "Examples:"
      echo "  $0                                    # Build only"
      echo "  $0 --release v0.1.1                  # Build and create GitHub release"
      echo "  $0 --version-bump patch               # Bump patch version and build"
      echo "  $0 --skip-build --release v0.1.1     # Skip build, create release from existing build"
      echo "  $0 --skip-web-deploy                  # Build without deploying web app"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
done

# Functions
log_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

cleanup_dirs() {
  log_info "Cleaning up previous builds..."
  rm -rf "$BUILD_DIR"
  if [[ -n "$RELEASE_NAME" ]]; then
    rm -rf "$RELEASE_DIR"
  fi
}

create_directories() {
  log_info "Creating build directories..."
  mkdir -p "$BUILD_DIR"
  
  if [[ -n "$RELEASE_NAME" ]]; then
    mkdir -p "$RELEASE_DIR"
  fi
}

build_package() {
  if [[ "$SKIP_BUILD" == true ]]; then
    log_info "Skipping package build (--skip-build flag)"
    return
  fi
  
  log_info "Building formedible package..."
  npm run build:pkg
  
  if [[ ! -d "$PKG_DIST_DIR" ]]; then
    log_error "Package build failed - dist directory not found"
    exit 1
  fi
  
  log_success "Package build completed"
}

update_web_components() {
  log_info "Updating web app components from package..."
  
  # Remove existing formedible components from web app
  log_info "Removing existing formedible components..."
  rm -rf "$WEB_COMPONENTS_DIR/fields"
  rm -rf "$WEB_HOOKS_DIR/use-formedible.tsx"
  rm -rf "$WEB_LIB_DIR/formedible"
  
  # Copy new components from package
  log_info "Copying components from package..."
  mkdir -p "$WEB_COMPONENTS_DIR"
  mkdir -p "$WEB_HOOKS_DIR"
  mkdir -p "$WEB_LIB_DIR"
  
  cp -r "packages/formedible/src/components/fields" "$WEB_COMPONENTS_DIR/"
  cp "packages/formedible/src/hooks/use-formedible.tsx" "$WEB_HOOKS_DIR/"
  cp -r "packages/formedible/src/lib/formedible" "$WEB_LIB_DIR/"
  
  log_success "Web app components updated"
}

update_registry() {
  log_info "Updating registry in web app..."
  
  # Copy registry.json from package public directory to web app
  if [[ -f "packages/formedible/public/r/use-formedible.json" ]]; then
    mkdir -p "apps/web/r"
    cp "packages/formedible/public/r/use-formedible.json" "apps/web/r/use-formedible.json"
    log_success "Registry updated in web app"
  else
    log_warning "Registry file not found in packages/formedible/public/r/use-formedible.json"
  fi
}

build_web() {
  if [[ "$SKIP_BUILD" == true ]]; then
    log_info "Skipping web build (--skip-build flag)"
    return
  fi
  
  log_info "Building web application..."
  npm run build:web
  
  if [[ ! -d "$WEB_DIST_DIR" ]]; then
    log_error "Web build failed - out directory not found"
    exit 1
  fi
  
  log_success "Web build completed"
}

deploy_web() {
  if [[ "$SKIP_WEB_DEPLOY" == true ]]; then
    log_info "Skipping web deployment (--skip-web-deploy flag)"
    return
  fi
  
  if [[ "$NO_PUBLISH" == true ]]; then
    log_info "Skipping web deployment (--no-publish flag)"
    return
  fi
  
  if [[ ! -d "$WEB_DIST_DIR" ]]; then
    log_error "Web build output not found. Run build first."
    exit 1
  fi
  
  log_info "Preparing web deployment..."
  
  # Navigate to web app directory
  pushd apps/web > /dev/null
  
  # Run export script to prepare deployment files
  log_info "Running export preparation..."
  npm run export
  
  # Check if gh-pages is available
  if ! command -v npx &> /dev/null; then
    log_error "npx is not available. Please install Node.js with npm."
    exit 1
  fi
  
  # Deploy to gh-pages
  log_info "Deploying to gh-pages..."
  if npm run deploy; then
    log_success "Web application deployed to gh-pages successfully!"
    log_info "Your site should be available at: https://$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^/]*\)\/\([^.]*\).*/\1.github.io\/\2/')/"
  else
    log_error "Web deployment failed"
    popd > /dev/null
    exit 1
  fi
  
  popd > /dev/null
}

create_release_artifacts() {
  if [[ -z "$RELEASE_NAME" ]]; then
    return
  fi
  
  log_info "Creating release artifacts..."
  
  # Copy package dist to build directory
  mkdir -p "$BUILD_DIR/package"
  cp -r "$PKG_DIST_DIR"/* "$BUILD_DIR/package/"
  
  # Copy web dist to build directory
  mkdir -p "$BUILD_DIR/web"
  cp -r "$WEB_DIST_DIR"/* "$BUILD_DIR/web/"
  
  # Create release zips
  log_info "Creating release zip: $RELEASE_DIR/formedible-$RELEASE_NAME.zip"
  (cd "$BUILD_DIR/package" && zip -r "../../$RELEASE_DIR/formedible-$RELEASE_NAME.zip" .)
  
  log_info "Creating web release zip: $RELEASE_DIR/formedible-web-$RELEASE_NAME.zip"
  (cd "$BUILD_DIR/web" && zip -r "../../$RELEASE_DIR/formedible-web-$RELEASE_NAME.zip" .)
  
  log_success "Release artifacts created"
}

handle_version_bump() {
  if [[ -z "$VERSION_BUMP_LEVEL" ]]; then
    return
  fi

  log_info "Performing version bump: $VERSION_BUMP_LEVEL"

  # Check for a clean working directory
  if ! git diff-index --quiet HEAD --; then
    log_error "Git working directory is not clean. Please commit or stash changes before bumping the version."
    exit 1
  fi

  # Check if the bump level is valid
  if [[ ! "$VERSION_BUMP_LEVEL" =~ ^(patch|minor|major|prerelease)$ ]]; then
    log_error "Invalid version bump level: '$VERSION_BUMP_LEVEL'. Use 'patch', 'minor', 'major', or 'prerelease'."
    exit 1
  fi

  # Bump version in package
  pushd packages/formedible > /dev/null
  local new_version_tag
  if ! new_version_tag=$(npm version "$VERSION_BUMP_LEVEL"); then
    log_error "npm version bump failed."
    exit 1
  fi
  popd > /dev/null
  
  # Strip the leading 'v' to get the release name
  RELEASE_NAME=${new_version_tag#v}
  
  log_success "Version bumped to $RELEASE_NAME. Git commit and tag created."
  log_info "Pushing new commit and tag to origin..."

  if git push --follow-tags; then
    log_success "Successfully pushed commit and tags."
  else
    log_error "Failed to push commit and tags to origin."
    exit 1
  fi
}

commit_changes() {
  if [[ "$NO_PUBLISH" == true ]]; then
    log_warning "Skipping commit (--no-publish flag used)"
    return
  fi
  
  if [[ -z "$RELEASE_NAME" ]]; then
    log_info "No release name provided, skipping commit"
    return
  fi
  
  log_info "Committing changes..."
  
  # Check if there are changes to commit
  if git diff-index --quiet HEAD --; then
    log_info "No changes to commit"
    return
  fi
  
  # Add all changes
  git add .
  
  # Create commit message
  local commit_message="Release $RELEASE_NAME

🤖 Generated with [opencode](https://opencode.ai)

Co-Authored-By: opencode <noreply@opencode.ai>"
  
  # Commit changes
  git commit -m "$commit_message"
  
  # Push to origin
  if git push; then
    log_success "Changes committed and pushed"
  else
    log_error "Failed to push changes"
    exit 1
  fi
}

create_github_release() {
  if [[ "$SKIP_GITHUB" == true ]]; then
    log_info "Skipping GitHub release creation (--skip-github flag)"
    return
  fi
  
  if [[ -z "$RELEASE_NAME" ]]; then
    return
  fi
  
  if [[ "$NO_PUBLISH" == true ]]; then
    log_warning "Release files created but not published to GitHub (--no-publish flag used)"
    log_info "Release files available in: $RELEASE_DIR/"
    ls -la "$RELEASE_DIR/"
    return
  fi
  
  log_info "Creating GitHub release: $RELEASE_NAME"
  
  # Check if gh CLI is available
  if ! command -v gh &> /dev/null; then
    log_error "GitHub CLI (gh) is not installed. Please install it to create releases."
    log_info "Release files are available in: $RELEASE_DIR/"
    exit 1
  fi
  
  # Check if we're in a git repository
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    log_error "Not in a git repository"
    exit 1
  fi
  
  # Prepare release assets
  RELEASE_ASSETS=()
  for file in "$RELEASE_DIR"/*.zip; do
    if [[ -f "$file" ]]; then
      RELEASE_ASSETS+=("$file")
    fi
  done
  
  if [[ ${#RELEASE_ASSETS[@]} -eq 0 ]]; then
    log_error "No release assets found in $RELEASE_DIR/"
    exit 1
  fi
  
  # Create the release
  log_info "Creating release with assets: ${RELEASE_ASSETS[*]}"
  
  gh release create "$RELEASE_NAME" \
    "${RELEASE_ASSETS[@]}" \
    --title "Formedible $RELEASE_NAME" \
    --generate-notes
  
  log_success "GitHub release created successfully!"
  log_info "View the release at: $(gh browse --no-browser -p)/releases/tag/$RELEASE_NAME"
}

show_summary() {
  echo ""
  log_success "Build completed successfully!"
  echo ""
  echo "📁 Build Structure:"
  echo "├── $BUILD_DIR/"
  echo "│   ├── package/ (formedible library)"
  echo "│   └── web/ (web application)"
  
  if [[ -n "$RELEASE_NAME" ]]; then
    echo "│"
    echo "├── $RELEASE_DIR/"
    echo "│   ├── formedible-$RELEASE_NAME.zip"
    echo "│   └── formedible-web-$RELEASE_NAME.zip"
  fi
  echo ""
  
  # Show disk usage
  echo "💾 Build sizes:"
  if [[ -d "$BUILD_DIR" ]]; then
    du -sh "$BUILD_DIR"/* 2>/dev/null || true
  fi
  
  if [[ -n "$RELEASE_NAME" && -d "$RELEASE_DIR" ]]; then
    echo ""
    echo "📦 Release sizes:"
    du -sh "$RELEASE_DIR"/* 2>/dev/null || true
  fi
}

# Main execution
main() {
  echo "🚀 Formedible Build & Release Script"
  echo "===================================="
  
  # Argument validation
  if [[ -n "$RELEASE_NAME" && -n "$VERSION_BUMP_LEVEL" ]]; then
    log_error "Cannot use --release and --version-bump at the same time. Choose one."
    exit 1
  fi

  handle_version_bump
  
  if [[ -n "$RELEASE_NAME" ]]; then
    log_info "Building for release: $RELEASE_NAME"
    if [[ "$NO_PUBLISH" == true ]]; then
      log_info "Release will be created locally only (--no-publish)"
    fi
  else
    log_info "Building without release"
  fi
  
  # Show what will be skipped
  if [[ "$SKIP_BUILD" == true ]]; then
    log_info "Application build will be skipped"
  fi
  if [[ "$SKIP_GITHUB" == true ]]; then
    log_info "GitHub release creation will be skipped"
  fi
  if [[ "$SKIP_WEB_DEPLOY" == true ]]; then
    log_info "Web deployment will be skipped"
  fi
  
  echo ""
  
  # Ensure we're in the right directory
  if [[ ! -f "package.json" ]]; then
    log_error "package.json not found. Please run this script from the project root."
    exit 1
  fi
  
  # Ensure zip is available
  if ! command -v zip &> /dev/null; then
    log_error "zip command is not available. Please install zip."
    exit 1
  fi
  
  cleanup_dirs
  create_directories
  build_package
  update_web_components
  update_registry
  build_web
  deploy_web
  create_release_artifacts
  commit_changes
  create_github_release
  show_summary
  
  log_success "All done! 🎉"
}

# Run main function
main "$@"