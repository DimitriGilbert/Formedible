{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-builder",
  "type": "registry:component",
  "title": "Form Builder",
  "description": "A visual form builder component for creating forms with drag-and-drop interface",
  "dependencies": [
    "@tanstack/react-form",
    "@radix-ui/react-accordion",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-dialog",
    "@radix-ui/react-label",
    "@radix-ui/react-popover",
    "@radix-ui/react-progress",
    "@radix-ui/react-radio-group",
    "@radix-ui/react-select",
    "@radix-ui/react-slider",
    "@radix-ui/react-slot",
    "@radix-ui/react-switch",
    "@radix-ui/react-tabs",
    "lucide-react",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "textarea",
    "select",
    "checkbox",
    "switch",
    "label",
    "card",
    "tabs",
    "accordion",
    "dialog",
    "popover",
    "progress",
    "radio-group",
    "slider",
    "badge",
    "alert",
    "skeleton",
    "https://formedible.dev/r/use-formedible.json"
  ],
  "files": [
    {
      "path": "src/components/formedible/builder/form-builder.tsx",
      "content": "\"use client\";\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { cn } from \"@/lib/utils\";\nimport { z } from \"zod\";\nimport { Plus, Trash2, Copy, Edit, FileText, Eye, Code, Settings, Download, Upload } from \"lucide-react\";\nimport { FieldConfigurator } from \"./field-configurator\";\nimport { FormPreview } from \"./form-preview\";\nimport { CodeBlock } from \"@/components/ui/code-block\";\n\ninterface FormField {\n  id: string;\n  name: string;\n  type: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  required?: boolean;\n  page?: number;\n  group?: string;\n  section?: {\n    title: string;\n    description?: string;\n    collapsible?: boolean;\n    defaultExpanded?: boolean;\n  };\n  help?: {\n    text?: string;\n    tooltip?: string;\n    position?: \"top\" | \"bottom\" | \"left\" | \"right\";\n    link?: { url: string; text: string };\n  };\n  inlineValidation?: {\n    enabled?: boolean;\n    debounceMs?: number;\n    showSuccess?: boolean;\n  };\n  options?: Array<{ value: string; label: string }>;\n  arrayConfig?: any;\n  datalist?: any;\n  multiSelectConfig?: any;\n  colorConfig?: any;\n  ratingConfig?: any;\n  phoneConfig?: any;\n  validation?: {\n    min?: number;\n    max?: number;\n    minLength?: number;\n    maxLength?: number;\n    pattern?: string;\n    custom?: string;\n  };\n}\n\nconst FIELD_TYPES = [\n  { value: \"text\", label: \"Text Input\", icon: \"üìù\" },\n  { value: \"email\", label: \"Email\", icon: \"üìß\" },\n  { value: \"password\", label: \"Password\", icon: \"üîí\" },\n  { value: \"textarea\", label: \"Textarea\", icon: \"üìÑ\" },\n  { value: \"number\", label: \"Number\", icon: \"üî¢\" },\n  { value: \"select\", label: \"Select\", icon: \"üìã\" },\n  { value: \"radio\", label: \"Radio Group\", icon: \"‚ö™\" },\n  { value: \"multiSelect\", label: \"Multi-Select\", icon: \"‚òëÔ∏è\" },\n  { value: \"checkbox\", label: \"Checkbox\", icon: \"‚úÖ\" },\n  { value: \"switch\", label: \"Switch\", icon: \"üîò\" },\n  { value: \"date\", label: \"Date Picker\", icon: \"üìÖ\" },\n  { value: \"slider\", label: \"Slider\", icon: \"üéöÔ∏è\" },\n  { value: \"rating\", label: \"Rating\", icon: \"‚≠ê\" },\n  { value: \"colorPicker\", label: \"Color Picker\", icon: \"üé®\" },\n  { value: \"phone\", label: \"Phone Number\", icon: \"üìû\" },\n  { value: \"file\", label: \"File Upload\", icon: \"üìé\" },\n  { value: \"array\", label: \"Array Field\", icon: \"üìö\" },\n];\n\n// Isolated field store - NO PARENT RE-RENDERS\nconst useFieldStore = () => {\n  const [fields, setFields] = useState<Record<string, FormField>>({});\n  const [fieldOrder, setFieldOrder] = useState<string[]>([]);\n\n  const addField = useCallback((type: string, selectedPage?: number) => {\n    const id = `field_${Date.now()}`;\n    const newField: FormField = {\n      id,\n      name: `field_${Object.keys(fields).length + 1}`,\n      type,\n      label: `${FIELD_TYPES.find((t) => t.value === type)?.label || type} Field`,\n      required: false,\n      page: selectedPage || 1,\n    };\n    \n    setFields(prev => ({ ...prev, [id]: newField }));\n    setFieldOrder(prev => [...prev, id]);\n    return id;\n  }, [fields]);\n\n  const updateField = useCallback((fieldId: string, updatedField: FormField) => {\n    setFields(prev => ({ ...prev, [fieldId]: updatedField }));\n  }, []);\n\n  const deleteField = useCallback((fieldId: string) => {\n    setFields(prev => {\n      const newFields = { ...prev };\n      delete newFields[fieldId];\n      return newFields;\n    });\n    setFieldOrder(prev => prev.filter(id => id !== fieldId));\n  }, []);\n\n  const duplicateField = useCallback((fieldId: string) => {\n    const field = fields[fieldId];\n    if (field) {\n      const id = `field_${Date.now()}`;\n      const newField: FormField = {\n        ...field,\n        id,\n        name: `${field.name}_copy`,\n        label: `${field.label} (Copy)`,\n      };\n      setFields(prev => ({ ...prev, [id]: newField }));\n      setFieldOrder(prev => [...prev, id]);\n      return id;\n    }\n    return null;\n  }, [fields]);\n\n  const getField = useCallback((fieldId: string) => fields[fieldId], [fields]);\n  \n  const getAllFields = useCallback(() => fieldOrder.map(id => fields[id]).filter(Boolean), [fields, fieldOrder]);\n\n  const getFieldsByPage = useCallback((page: number) => \n    fieldOrder.map(id => fields[id]).filter(field => field && (field.page || 1) === page), \n    [fields, fieldOrder]\n  );\n\n  return {\n    addField,\n    updateField,\n    deleteField,\n    duplicateField,\n    getField,\n    getAllFields,\n    getFieldsByPage,\n    fieldOrder\n  };\n};\n\n// Stable field list component - NEVER RE-RENDERS PARENT\nconst FieldList: React.FC<{\n  fields: FormField[];\n  selectedFieldId: string | null;\n  onSelectField: (id: string | null) => void;\n  onDeleteField: (id: string) => void;\n  onDuplicateField: (id: string) => void;\n}> = React.memo(({ fields, selectedFieldId, onSelectField, onDeleteField, onDuplicateField }) => {\n  return (\n    <div className=\"space-y-4\">\n      {fields.map((field) => (\n        <div\n          key={field.id}\n          className={cn(\n            \"flex items-center justify-between p-6 border rounded-lg cursor-pointer transition-colors hover:shadow-md\",\n            selectedFieldId === field.id\n              ? \"border-primary bg-primary/5\"\n              : \"border-border hover:border-primary/50\"\n          )}\n          onClick={() => onSelectField(field.id)}\n        >\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-2xl\">\n              {FIELD_TYPES.find((t) => t.value === field.type)?.icon || \"üìù\"}\n            </span>\n            <div>\n              <div className=\"font-medium text-lg\">{field.label}</div>\n              <div className=\"text-muted-foreground\">\n                {field.type} ‚Ä¢ {field.name} ‚Ä¢ Page {field.page || 1}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onDuplicateField(field.id);\n              }}\n            >\n              <Copy className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onDeleteField(field.id);\n              }}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n});\n\nFieldList.displayName = \"FieldList\";\n\n// Stable sidebar component - NEVER RE-RENDERS PARENT\nconst FieldTypeSidebar: React.FC<{\n  onAddField: (type: string) => void;\n  selectedPage: number | null;\n}> = React.memo(({ onAddField, selectedPage }) => {\n  return (\n    <div className=\"w-72 border-r bg-card overflow-y-auto\">\n      <div className=\"p-6\">\n        <h3 className=\"font-semibold text-lg mb-6\">Field Types</h3>\n        {selectedPage && (\n          <div className=\"mb-4 p-3 bg-primary/10 rounded-lg\">\n            <p className=\"text-sm text-primary font-medium\">\n              Adding to Page {selectedPage}\n            </p>\n          </div>\n        )}\n        <div className=\"grid grid-cols-1 gap-3\">\n          {FIELD_TYPES.map((fieldType) => (\n            <Button\n              key={fieldType.value}\n              variant=\"outline\"\n              size=\"default\"\n              className=\"justify-start h-auto p-4\"\n              onClick={() => onAddField(fieldType.value)}\n            >\n              <span className=\"mr-3 text-lg\">{fieldType.icon}</span>\n              <span>{fieldType.label}</span>\n            </Button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nFieldTypeSidebar.displayName = \"FieldTypeSidebar\";\n\n// Stable configurator panel - ONLY RE-RENDERS WHEN FIELD ID CHANGES\nconst ConfiguratorPanel: React.FC<{\n  selectedFieldId: string | null;\n  getField: (id: string) => FormField | undefined;\n  onUpdateField: (fieldId: string, field: FormField) => void;\n  availablePages: number[];\n}> = React.memo(({ selectedFieldId, getField, onUpdateField, availablePages }) => {\n  if (!selectedFieldId) return null;\n\n  const field = getField(selectedFieldId);\n  if (!field) return null;\n\n  return (\n    <div className=\"w-96 border-l bg-card overflow-y-auto min-h-0\">\n      <FieldConfigurator\n        key={selectedFieldId} // Force new instance when field changes\n        fieldId={selectedFieldId}\n        initialField={field}\n        onFieldChange={onUpdateField}\n        availablePages={availablePages}\n      />\n    </div>\n  );\n});\n\nConfiguratorPanel.displayName = \"ConfiguratorPanel\";\n\nexport const FormBuilder: React.FC = () => {\n  // Form state\n  const [formTitle, setFormTitle] = useState<string>(\"My Form\");\n  const [formDescription, setFormDescription] = useState<string>(\"A form built with Formedible\");\n  const [pages, setPages] = useState<Array<{ page: number; title: string; description?: string }>>([\n    { page: 1, title: \"Page 1\", description: \"First page\" }\n  ]);\n  const [settings, setSettings] = useState({\n    submitLabel: \"Submit\",\n    nextLabel: \"Next\",\n    previousLabel: \"Previous\",\n    showProgress: true,\n  });\n\n  // UI state\n  const [selectedFieldId, setSelectedFieldId] = useState<string | null>(null);\n  const [selectedPageId, setSelectedPageId] = useState<number | null>(null);\n  const [editingPageId, setEditingPageId] = useState<number | null>(null);\n  const [activeTab, setActiveTab] = useState<string>(\"builder\");\n  const [previewMode, setPreviewMode] = useState<\"desktop\" | \"tablet\" | \"mobile\">(\"desktop\");\n\n  const fieldStore = useFieldStore();\n\n  const handleAddField = useCallback((type: string) => {\n    const newFieldId = fieldStore.addField(type, selectedPageId || 1);\n    setSelectedFieldId(newFieldId);\n  }, [fieldStore, selectedPageId]);\n\n  const handleSelectField = useCallback((fieldId: string | null) => {\n    setSelectedFieldId(fieldId);\n  }, []);\n\n  const handleDeleteField = useCallback((fieldId: string) => {\n    fieldStore.deleteField(fieldId);\n    if (selectedFieldId === fieldId) {\n      setSelectedFieldId(null);\n    }\n  }, [fieldStore, selectedFieldId]);\n\n  const handleDuplicateField = useCallback((fieldId: string) => {\n    const newFieldId = fieldStore.duplicateField(fieldId);\n    if (newFieldId) {\n      setSelectedFieldId(newFieldId);\n    }\n  }, [fieldStore]);\n\n  // Export configuration\n  const exportConfig = useCallback(() => {\n    const formConfig = {\n      title: formTitle,\n      description: formDescription,\n      fields: fieldStore.getAllFields().map((field) => ({\n        name: field.name,\n        type: field.type,\n        label: field.label,\n        placeholder: field.placeholder,\n        description: field.description,\n        required: field.required,\n        page: field.page || 1,\n        group: field.group,\n        section: field.section,\n        help: field.help,\n        inlineValidation: field.inlineValidation,\n        options: field.options,\n        arrayConfig: field.arrayConfig,\n        datalist: field.datalist,\n        multiSelectConfig: field.multiSelectConfig,\n        colorConfig: field.colorConfig,\n        ratingConfig: field.ratingConfig,\n        phoneConfig: field.phoneConfig,\n      })),\n      pages: pages,\n      settings: settings,\n    };\n\n    const blob = new Blob([JSON.stringify(formConfig, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${formTitle.toLowerCase().replace(/\\s+/g, \"-\")}-form.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  }, [formTitle, formDescription, fieldStore, pages, settings]);\n\n  // Import configuration\n  const importConfig = useCallback(() => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \".json\";\n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const config = JSON.parse(e.target?.result as string);\n          \n          // Clear existing fields\n          fieldStore.fieldOrder.forEach(id => fieldStore.deleteField(id));\n          \n          // Import fields\n          (config.fields || []).forEach((field: any, idx: number) => {\n            const id = `field_${Date.now()}_${idx}`;\n            const newField: FormField = {\n              id,\n              name: field.name,\n              type: field.type,\n              label: field.label,\n              placeholder: field.placeholder,\n              description: field.description,\n              required: field.required || false,\n              page: field.page || 1,\n              group: field.group,\n              section: field.section,\n              help: field.help,\n              inlineValidation: field.inlineValidation,\n              options: field.options,\n              arrayConfig: field.arrayConfig,\n              datalist: field.datalist,\n              multiSelectConfig: field.multiSelectConfig,\n              colorConfig: field.colorConfig,\n              ratingConfig: field.ratingConfig,\n              phoneConfig: field.phoneConfig,\n            };\n            fieldStore.updateField(id, newField);\n          });\n\n          // Update form config\n          setFormTitle(config.title || \"Imported Form\");\n          setFormDescription(config.description || \"Imported from JSON\");\n          setPages(config.pages || [{ page: 1, title: \"Page 1\", description: \"\" }]);\n          setSettings({\n            submitLabel: config.settings?.submitLabel || config.submitLabel || \"Submit\",\n            nextLabel: config.settings?.nextLabel || config.nextLabel || \"Next\",\n            previousLabel: config.settings?.previousLabel || config.previousLabel || \"Previous\",\n            showProgress: config.settings?.showProgress ?? (!!config.progress),\n          });\n          \n          setSelectedFieldId(null);\n        } catch (error) {\n          alert(\"Error importing configuration. Please check the file format.\");\n          console.error(\"Import error:\", error);\n        }\n      };\n      reader.readAsText(file);\n    };\n    input.click();\n  }, [fieldStore, setFormTitle, setFormDescription, setPages, setSettings]);\n\n  const allFields = fieldStore.getAllFields();\n  const fieldsToShow = selectedPageId \n    ? fieldStore.getFieldsByPage(selectedPageId)\n    : allFields;\n\n  // Generate form configuration - EXACTLY like original\n  const formConfig = useMemo(() => {\n    const schemaFields: Record<string, any> = {};\n\n    allFields.forEach((field) => {\n      let fieldSchema: any;\n\n      switch (field.type) {\n        case \"number\":\n        case \"slider\":\n        case \"rating\":\n          fieldSchema = z.number();\n          break;\n        case \"checkbox\":\n        case \"switch\":\n          fieldSchema = z.boolean();\n          break;\n        case \"date\":\n          fieldSchema = z.string();\n          break;\n        case \"multiSelect\":\n        case \"array\":\n          fieldSchema = z.array(z.string());\n          break;\n        default:\n          fieldSchema = z.string();\n      }\n\n      if (field.required) {\n        if (field.type === \"number\" || field.type === \"slider\" || field.type === \"rating\") {\n          // For numbers, required means not null/undefined\n        } else if (field.type === \"checkbox\" || field.type === \"switch\") {\n          fieldSchema = fieldSchema.refine((val: boolean) => val === true, {\n            message: `${field.label} is required`,\n          });\n        } else if (typeof fieldSchema.min === \"function\") {\n          fieldSchema = fieldSchema.min(1, `${field.label} is required`);\n        }\n      } else {\n        fieldSchema = fieldSchema.optional();\n      }\n\n      schemaFields[field.name] = fieldSchema;\n    });\n\n    return {\n      title: formTitle,\n      description: formDescription,\n      schema: z.object(schemaFields),\n      settings,\n      fields: allFields.map((field) => ({\n        name: field.name,\n        type: field.type,\n        label: field.label,\n        placeholder: field.placeholder,\n        description: field.description,\n        page: field.page || 1,\n        group: field.group,\n        section: field.section,\n        help: field.help,\n        inlineValidation: field.inlineValidation,\n        ...(field.options && { options: field.options }),\n        ...(field.arrayConfig && { arrayConfig: field.arrayConfig }),\n        ...(field.datalist && { datalist: field.datalist }),\n        ...(field.multiSelectConfig && { multiSelectConfig: field.multiSelectConfig }),\n        ...(field.colorConfig && { colorConfig: field.colorConfig }),\n        ...(field.ratingConfig && { ratingConfig: field.ratingConfig }),\n        ...(field.phoneConfig && { phoneConfig: field.phoneConfig }),\n      })),\n      pages: pages.length > 1 ? pages : [],\n      submitLabel: settings.submitLabel,\n      nextLabel: settings.nextLabel,\n      previousLabel: settings.previousLabel,\n      progress: settings.showProgress\n        ? { showSteps: true, showPercentage: true }\n        : undefined,\n      formOptions: {\n        onSubmit: async ({ value }: any) => {\n          console.log(\"Form submitted:\", value);\n          alert(\"Form submitted! Check console for values.\");\n        },\n      },\n    };\n  }, [formTitle, formDescription, allFields, pages, settings]);\n\n  // Generate code - EXACTLY like original\n  const generateCode = useMemo(() => {\n    return `import { useFormedible } from 'formedible';\nimport { z } from 'zod';\n\nconst formConfig = ${JSON.stringify(formConfig, null, 2)};\n\nexport const MyForm = () => {\n  const { Form } = useFormedible(formConfig);\n  \n  return <Form />;\n};`;\n  }, [formConfig]);\n\n  return (\n    <div className=\"w-full min-h-[800px] flex flex-col bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"flex h-16 items-center px-6\">\n          <div className=\"flex items-center space-x-4\">\n            <h1 className=\"text-2xl font-bold\">Form Builder 2.0</h1>\n          </div>\n          <div className=\"ml-auto flex items-center space-x-4\">\n            <Button variant=\"secondary\" onClick={exportConfig}>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n            <Button variant=\"secondary\" onClick={importConfig}>\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Import\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 flex min-h-0\">\n        {/* Sidebar - Field Types */}\n        <FieldTypeSidebar onAddField={handleAddField} selectedPage={selectedPageId} />\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1 flex flex-col\">\n            <TabsList className=\"w-full justify-start border-b rounded-none h-14 bg-card p-0\">\n              <TabsTrigger value=\"builder\" className=\"flex items-center gap-2 h-full px-6\">\n                <Settings className=\"h-4 w-4\" />\n                Builder\n              </TabsTrigger>\n              <TabsTrigger value=\"preview\" className=\"flex items-center gap-2 h-full px-6\">\n                <Eye className=\"h-4 w-4\" />\n                Preview\n              </TabsTrigger>\n              <TabsTrigger value=\"code\" className=\"flex items-center gap-2 h-full px-6\">\n                <Code className=\"h-4 w-4\" />\n                Code\n              </TabsTrigger>\n            </TabsList>\n\n            <div className=\"flex-1 min-h-0\">\n              <TabsContent value=\"builder\" className=\"h-full m-0\">\n                <div className=\"h-full flex min-h-0\">\n                  {/* Form Structure */}\n                  <div className=\"flex-1 p-4 overflow-y-auto min-h-0\">\n                    <div className=\"mx-auto space-y-4\">\n                      {/* Form Configuration */}\n                      <Card className=\"hover:shadow-lg transition-shadow py-3 gap-2\">\n                        <CardHeader>\n                          <CardTitle className=\"text-xl\">Form Configuration</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4 p-4\">\n                          <div>\n                            <Label htmlFor=\"form-title\">Form Title</Label>\n                            <Input\n                              id=\"form-title\"\n                              value={formTitle}\n                              onChange={(e) => setFormTitle(e.target.value)}\n                              placeholder=\"Enter form title\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"form-description\">Description</Label>\n                            <Textarea\n                              id=\"form-description\"\n                              value={formDescription}\n                              onChange={(e) => setFormDescription(e.target.value)}\n                              placeholder=\"Enter form description\"\n                            />\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      {/* Form Settings */}\n                      <Card className=\"hover:shadow-lg transition-shadow py-3 gap-2\">\n                        <CardHeader>\n                          <CardTitle className=\"text-xl\">Form Settings</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4 p-4\">\n                          <div>\n                            <Label htmlFor=\"submit-label\">Submit Button Label</Label>\n                            <Input\n                              id=\"submit-label\"\n                              value={settings.submitLabel}\n                              onChange={(e) => setSettings(prev => ({ ...prev, submitLabel: e.target.value }))}\n                              placeholder=\"Submit\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"next-label\">Next Button Label</Label>\n                            <Input\n                              id=\"next-label\"\n                              value={settings.nextLabel}\n                              onChange={(e) => setSettings(prev => ({ ...prev, nextLabel: e.target.value }))}\n                              placeholder=\"Next\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"previous-label\">Previous Button Label</Label>\n                            <Input\n                              id=\"previous-label\"\n                              value={settings.previousLabel}\n                              onChange={(e) => setSettings(prev => ({ ...prev, previousLabel: e.target.value }))}\n                              placeholder=\"Previous\"\n                            />\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id=\"show-progress\"\n                              checked={settings.showProgress}\n                              onCheckedChange={(checked) => setSettings(prev => ({ ...prev, showProgress: !!checked }))}\n                            />\n                            <Label htmlFor=\"show-progress\">Show progress indicator</Label>\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      {/* Page Management */}\n                      <Card className=\"hover:shadow-lg transition-shadow gap-2\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center justify-between text-xl\">\n                            Pages ({pages.length})\n                            {selectedPageId && (\n                              <span className=\"text-sm font-normal text-primary\">\n                                Page {selectedPageId} selected\n                              </span>\n                            )}\n                            <Button\n                              onClick={() => {\n                                const newPageNumber = Math.max(...pages.map((p) => p.page)) + 1;\n                                setPages(prev => [\n                                  ...prev,\n                                  {\n                                    page: newPageNumber,\n                                    title: `Page ${newPageNumber}`,\n                                    description: \"\",\n                                  },\n                                ]);\n                                setEditingPageId(newPageNumber);\n                              }}\n                            >\n                              <Plus className=\"h-4 w-4 mr-2\" />\n                              Add Page\n                            </Button>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2 p-4\">\n                          <div className=\"space-y-2\">\n                            {pages.map((page) => (\n                              <div\n                                key={page.page}\n                                className={cn(\n                                  \"border rounded-lg transition-all cursor-pointer\",\n                                  selectedPageId === page.page\n                                    ? \"border-primary bg-primary/5 shadow-sm\"\n                                    : \"border-border hover:border-primary/50\",\n                                  editingPageId === page.page && \"ring-2 ring-primary/20\"\n                                )}\n                                onClick={() => {\n                                  if (editingPageId === page.page) return;\n                                  setSelectedPageId(selectedPageId === page.page ? null : page.page);\n                                }}\n                              >\n                                {editingPageId === page.page ? (\n                                  <div className=\"p-8 space-y-6\">\n                                    <div>\n                                      <Label>Page Title</Label>\n                                      <Input\n                                        value={page.title}\n                                        onChange={(e) => {\n                                          setPages(prev => prev.map(p =>\n                                            p.page === page.page\n                                              ? { ...p, title: e.target.value }\n                                              : p\n                                          ));\n                                        }}\n                                      />\n                                    </div>\n                                    <div>\n                                      <Label>Description</Label>\n                                      <Textarea\n                                        value={page.description || \"\"}\n                                        onChange={(e) => {\n                                          setPages(prev => prev.map(p =>\n                                            p.page === page.page\n                                              ? { ...p, description: e.target.value }\n                                              : p\n                                          ));\n                                        }}\n                                      />\n                                    </div>\n                                    <div className=\"flex items-center gap-3\">\n                                      <Button onClick={() => setEditingPageId(null)}>Done</Button>\n                                      <Button variant=\"outline\" onClick={() => setEditingPageId(null)}>\n                                        Cancel\n                                      </Button>\n                                    </div>\n                                  </div>\n                                ) : (\n                                  <div className=\"flex items-center justify-between p-8\">\n                                    <div className=\"flex items-center space-x-4\">\n                                      <FileText\n                                        className={cn(\n                                          \"h-5 w-5\",\n                                          selectedPageId === page.page\n                                            ? \"text-primary\"\n                                            : \"text-muted-foreground\"\n                                        )}\n                                      />\n                                      <div>\n                                        <div\n                                          className={cn(\n                                            \"font-medium text-lg\",\n                                            selectedPageId === page.page && \"text-primary\"\n                                          )}\n                                        >\n                                          {page.title}\n                                        </div>\n                                        {page.description && (\n                                          <div className=\"text-muted-foreground\">{page.description}</div>\n                                        )}\n                                        <div className=\"text-sm text-muted-foreground\">\n                                          {fieldStore.getFieldsByPage(page.page).length} fields\n                                        </div>\n                                      </div>\n                                    </div>\n                                    <div className=\"flex items-center space-x-2\">\n                                      <Button\n                                        variant=\"ghost\"\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                          setEditingPageId(page.page);\n                                        }}\n                                      >\n                                        <Edit className=\"h-4 w-4\" />\n                                      </Button>\n                                      {pages.length > 1 && (\n                                        <Button\n                                          variant=\"ghost\"\n                                          onClick={(e) => {\n                                            e.stopPropagation();\n                                            if (\n                                              confirm(\n                                                `Delete ${page.title}? Fields on this page will be moved to Page 1.`\n                                              )\n                                            ) {\n                                              const filteredPages = pages.filter((p) => p.page !== page.page);\n                                              const renumberedPages = filteredPages.map((p, idx) => ({\n                                                ...p,\n                                                page: idx + 1,\n                                              }));\n                                              setPages(renumberedPages);\n                                              if (selectedPageId === page.page) {\n                                                setSelectedPageId(null);\n                                              }\n                                            }\n                                          }}\n                                        >\n                                          <Trash2 className=\"h-4 w-4\" />\n                                        </Button>\n                                      )}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      {/* Fields List */}\n                      <Card className=\"hover:shadow-lg transition-shadow gap-2\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center justify-between text-xl\">\n                            {selectedPageId ? (\n                              <>\n                                {pages.find((p) => p.page === selectedPageId)?.title} Fields\n                                <span className=\"text-sm font-normal text-muted-foreground\">\n                                  ({fieldsToShow.length} fields)\n                                </span>\n                              </>\n                            ) : (\n                              <>\n                                All Fields ({allFields.length})\n                                {allFields.length === 0 && (\n                                  <span className=\"text-sm font-normal text-muted-foreground\">\n                                    Add fields from the sidebar ‚Üí\n                                  </span>\n                                )}\n                              </>\n                            )}\n                          </CardTitle>\n                          {selectedPageId && (\n                            <p className=\"text-muted-foreground\">\n                              New fields will be added to this page. Click the page again to deselect.\n                            </p>\n                          )}\n                        </CardHeader>\n                        <CardContent className=\"space-y-2 p-4\">\n                          {fieldsToShow.length === 0 ? (\n                            <div className=\"text-center py-12 text-muted-foreground\">\n                              <Plus className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                              <p className=\"text-lg\">\n                                {selectedPageId\n                                  ? `No fields on this page yet. Add some from the sidebar!`\n                                  : `No fields yet. Add some from the sidebar!`}\n                              </p>\n                            </div>\n                          ) : (\n                            <FieldList\n                              fields={fieldsToShow}\n                              selectedFieldId={selectedFieldId}\n                              onSelectField={handleSelectField}\n                              onDeleteField={handleDeleteField}\n                              onDuplicateField={handleDuplicateField}\n                            />\n                          )}\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </div>\n\n                  {/* Field Configuration Panel */}\n                  <ConfiguratorPanel\n                    selectedFieldId={selectedFieldId}\n                    getField={fieldStore.getField}\n                    onUpdateField={fieldStore.updateField}\n                    availablePages={pages.map(p => p.page)}\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"preview\" className=\"h-full m-0 p-8 overflow-y-auto min-h-0\">\n                <div className=\"max-w-6xl mx-auto\">\n                  <div className=\"mb-8 flex items-center justify-between\">\n                    <div>\n                      <h2 className=\"text-2xl font-bold\">Live Preview</h2>\n                      <p className=\"text-muted-foreground\">See how your form will look and behave</p>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      {([\"desktop\", \"tablet\", \"mobile\"] as const).map((mode) => (\n                        <Button\n                          key={mode}\n                          variant={previewMode === mode ? \"default\" : \"outline\"}\n                          onClick={() => setPreviewMode(mode)}\n                        >\n                          {mode === \"desktop\" && \"üñ•Ô∏è\"}\n                          {mode === \"tablet\" && \"üì±\"}\n                          {mode === \"mobile\" && \"üì±\"}\n                          <span className=\"ml-2 capitalize\">{mode}</span>\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                  <div\n                    className={cn(\n                      \"mx-auto transition-all\",\n                      previewMode === \"mobile\"\n                        ? \"max-w-sm\"\n                        : previewMode === \"tablet\"\n                        ? \"max-w-md\"\n                        : \"max-w-4xl\"\n                    )}\n                  >\n                  <FormPreview config={formConfig} />                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"code\" className=\"h-full m-0 p-8 overflow-y-auto min-h-0\">\n                <div className=\"max-w-6xl mx-auto\">\n                  <div className=\"mb-8\">\n                    <h2 className=\"text-2xl font-bold\">Generated Code</h2>\n                    <p className=\"text-muted-foreground text-lg\">\n                      Copy this code to use your form in your application\n                    </p>\n                  </div>\n                  <CodeBlock\n                    code={generateCode}\n                    language=\"tsx\"\n                    title=\"MyForm.tsx\"\n                    showCopyButton={true}\n                    showLineNumbers={true}\n                  />\n                </div>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/formedible/builder/form-builder.tsx"
    },
    {
      "path": "src/components/formedible/builder/form-preview.tsx",
      "content": "'use client';\nimport React, { useMemo } from 'react';\nimport { useFormedible } from '@/hooks/use-formedible';\nimport { z } from 'zod';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { AlertCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface FormField {\n  id: string;\n  name: string;\n  type: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  required?: boolean;\n  options?: Array<{ value: string; label: string }>;\n  validation?: any;\n  page?: number;\n  group?: string;\n  section?: {\n    title: string;\n    description?: string;\n    collapsible?: boolean;\n    defaultExpanded?: boolean;\n  };\n  help?: {\n    text?: string;\n    tooltip?: string;\n    position?: 'top' | 'bottom' | 'left' | 'right';\n    link?: { url: string; text: string };\n  };\n  inlineValidation?: {\n    enabled?: boolean;\n    debounceMs?: number;\n    showSuccess?: boolean;\n  };\n  arrayConfig?: any;\n  datalist?: any;\n  multiSelectConfig?: any;\n  colorConfig?: any;\n  ratingConfig?: any;\n  phoneConfig?: any;\n}\n\ninterface FormConfiguration {\n  title: string;\n  description?: string;\n  fields: FormField[];\n  pages: Array<{\n    page: number;\n    title: string;\n    description?: string;\n  }>;\n  settings: {\n    submitLabel: string;\n    nextLabel: string;\n    previousLabel: string;\n    showProgress: boolean;\n    allowPageNavigation?: boolean;\n    resetOnSubmit?: boolean;\n  };\n}\n\ninterface FormPreviewProps {\n  config: FormConfiguration;\n  className?: string;\n}\n\nexport const FormPreview: React.FC<FormPreviewProps> = ({\n  config,\n  className,\n}) => {\n  // Convert form configuration to formedible configuration\n  const formedibleConfig = useMemo(() => {\n    if (config.fields.length === 0) {\n      return {\n        fields: [],\n        schema: z.object({})\n      };\n    }\n\n    try {\n      const schemaFields: Record<string, any> = {};\n\n      config.fields.forEach((field) => {\n        let fieldSchema: any;\n\n        switch (field.type) {\n          case \"number\":\n          case \"slider\":\n          case \"rating\":\n            fieldSchema = z.number();\n            break;\n          case \"checkbox\":\n          case \"switch\":\n            fieldSchema = z.boolean();\n            break;\n          case \"date\":\n            fieldSchema = z.string();\n            break;\n          case \"multiSelect\":\n          case \"array\":\n            fieldSchema = z.array(z.string());\n            break;\n          default:\n            fieldSchema = z.string();\n        }\n\n        if (field.required) {\n          if (field.type === \"number\" || field.type === \"slider\" || field.type === \"rating\") {\n            // For numbers, required means not null/undefined\n          } else if (field.type === \"checkbox\" || field.type === \"switch\") {\n            fieldSchema = fieldSchema.refine((val: boolean) => val === true, {\n              message: `${field.label} is required`,\n            });\n          } else if (typeof fieldSchema.min === \"function\") {\n            fieldSchema = fieldSchema.min(1, `${field.label} is required`);\n          }\n        } else {\n          fieldSchema = fieldSchema.optional();\n        }\n\n        schemaFields[field.name] = fieldSchema;\n      });\n\n      return {\n        schema: z.object(schemaFields),\n        fields: config.fields.map((field) => ({\n          name: field.name,\n          type: field.type,\n          label: field.label,\n          placeholder: field.placeholder,\n          description: field.description,\n          page: field.page || 1,\n          group: field.group,\n          section: field.section,\n          help: field.help,\n          inlineValidation: field.inlineValidation,\n          ...(field.options && { options: field.options }),\n          ...(field.arrayConfig && { arrayConfig: field.arrayConfig }),\n          ...(field.datalist && { datalist: field.datalist }),\n          ...(field.multiSelectConfig && { multiSelectConfig: field.multiSelectConfig }),\n          ...(field.colorConfig && { colorConfig: field.colorConfig }),\n          ...(field.ratingConfig && { ratingConfig: field.ratingConfig }),\n          ...(field.phoneConfig && { phoneConfig: field.phoneConfig }),\n        })),\n        pages: config.pages && config.pages.length > 1 ? config.pages : [],\n        submitLabel: config.settings.submitLabel,\n        nextLabel: config.settings.nextLabel,\n        previousLabel: config.settings.previousLabel,\n        progress: config.settings.showProgress\n          ? { showSteps: true, showPercentage: true }\n          : undefined,\n        formOptions: {\n          onSubmit: async ({ value }: any) => {\n            console.log('Preview form submitted:', value);\n            alert('Form submitted successfully! Check the console for form data.');\n          },\n        },\n      };\n    } catch (error) {\n      console.error('Error converting form configuration:', error);\n      return {\n        fields: [],\n        schema: z.object({})\n      };\n    }\n  }, [config]);\n\n  // Create the form using formedible - call hook at top level\n  const formResult = useFormedible(formedibleConfig);\n\n  // Handle configuration errors or empty fields\n  if (!formResult || !formResult.Form || config.fields.length === 0) {\n    if (config.fields.length === 0) {\n      return (\n        <Card className={cn(\"bg-muted/30\", className)}>\n          <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"text-4xl mb-4\">üìù</div>\n            <h3 className=\"text-lg font-medium mb-2\">No Fields Added</h3>\n            <p className=\"text-muted-foreground\">\n              Add some fields from the sidebar to see your form preview\n            </p>\n          </CardContent>\n        </Card>\n      );\n    }\n    return (\n      <Card className={cn(\"bg-muted/30\", className)}>\n        <CardContent className=\"py-6\">\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              There was an error generating the form preview. Please check your field configurations.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const { Form } = formResult;\n\n  return (\n    <Card className={cn(\"bg-muted/30\", className)}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div>\n            <div>{config.title}</div>\n            {config.description && (\n              <div className=\"text-sm font-normal text-muted-foreground mt-1\">\n                {config.description}\n              </div>\n            )}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            {config.fields.length} field{config.fields.length !== 1 ? 's' : ''}\n            {config.pages.length > 1 && ` ‚Ä¢ ${config.pages.length} pages`}\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Form stats */}\n          <div className={`grid gap-4 p-4 bg-muted/50 border rounded-lg ${config.pages.length > 1 ? 'grid-cols-3' : 'grid-cols-2'}`}>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">{config.fields.length}</div>\n              <div className=\"text-xs text-muted-foreground\">Fields</div>\n            </div>\n            {config.pages.length > 1 && (\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\">{config.pages.length}</div>\n                <div className=\"text-xs text-muted-foreground\">Pages</div>\n              </div>\n            )}\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">\n                {config.fields.filter(f => f.required).length}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Required</div>\n            </div>\n          </div>\n\n          {/* Live form preview */}\n          <div className=\"border-2 border-dashed border-muted-foreground/20 rounded-lg p-6 bg-background\">\n            <div className=\"text-xs text-muted-foreground mb-4 text-center\">\n              ‚ú® Live Preview - This form is fully functional!\n            </div>\n            <Form />\n          </div>\n\n          {/* Field breakdown */}\n          <div className=\"space-y-2\">\n            <h4 className=\"text-sm font-medium text-muted-foreground\">Field Types Used</h4>\n            <div className=\"flex flex-wrap gap-2\">\n              {Array.from(new Set(config.fields.map(f => f.type))).map(type => {\n                const count = config.fields.filter(f => f.type === type).length;\n                const icons: Record<string, string> = {\n                  text: 'üìù', email: 'üìß', password: 'üîí', textarea: 'üìÑ',\n                  number: 'üî¢', select: 'üìã', radio: '‚ö™', multiSelect: '‚òëÔ∏è',\n                  checkbox: '‚úÖ', switch: 'üîò', date: 'üìÖ', slider: 'üéöÔ∏è',\n                  rating: '‚≠ê', colorPicker: 'üé®', phone: 'üìû', file: 'üìé',\n                  array: 'üìö'\n                };\n                \n                return (\n                  <div\n                    key={type}\n                    className=\"inline-flex items-center gap-1 px-2 py-1 bg-muted rounded text-xs\"\n                  >\n                    <span>{icons[type] || 'üìù'}</span>\n                    <span>{type}</span>\n                    {count > 1 && (\n                      <span className=\"bg-primary text-primary-foreground rounded-full w-4 h-4 text-xs flex items-center justify-center\">\n                        {count}\n                      </span>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Advanced features used */}\n          {(config.fields.some(f => f.section) || \n            config.fields.some(f => f.group) ||\n            config.fields.some(f => f.help) ||\n            config.fields.some(f => f.inlineValidation?.enabled)) && (\n            <div className=\"space-y-2\">\n              <h4 className=\"text-sm font-medium text-muted-foreground\">Advanced Features</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {config.fields.some(f => f.section) && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-primary/10 text-primary rounded text-xs\">\n                    üìë Sections\n                  </div>\n                )}\n                {config.fields.some(f => f.group) && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-accent/10 text-accent rounded text-xs\">\n                    üè∑Ô∏è Field Groups\n                  </div>\n                )}\n                {config.fields.some(f => f.help) && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-secondary/50 text-foreground rounded text-xs\">\n                    ‚ùì Help & Tooltips\n                  </div>\n                )}\n                {config.fields.some(f => f.inlineValidation?.enabled) && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-muted text-muted-foreground rounded text-xs\">\n                    ‚ö° Inline Validation\n                  </div>\n                )}\n                {config.settings.showProgress && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-primary/20 text-primary rounded text-xs\">\n                    üìä Progress Indicator\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};",
      "type": "registry:component",
      "target": "components/formedible/builder/form-preview.tsx"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    },
    {
      "path": "src/components/ui/code-block.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Highlight, themes } from \"prism-react-renderer\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { Copy, Check } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\n/**\n * Unified CodeBlock component with syntax highlighting, copy functionality, and package manager tabs\n * \n * Features:\n * - Syntax highlighting using Prism.js with oneDark theme\n * - Floating copy button with animation feedback\n * - Optional line numbers\n * - Package manager tabs for installation commands (npx, pnpm, yarn, bunx)\n * - Optional title header\n * - Responsive design with proper overflow handling\n */\n\ninterface CodeBlockProps {\n  code: string;\n  language?: string;\n  showLineNumbers?: boolean;\n  showCopyButton?: boolean;\n  showPackageManagerTabs?: boolean;\n  className?: string;\n  title?: string;\n}\n\n// Copy Button Component\nconst CopyButton: React.FC<{ text: string; className?: string }> = ({\n  text,\n  className = \"\",\n}) => {\n  const [copied, setCopied] = useState(false);\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      toast.success(\"Copied to clipboard!\");\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast.error(\"Failed to copy\");\n    }\n  };\n\n  return (\n    <motion.button\n      onClick={copyToClipboard}\n      className={`relative inline-flex items-center justify-center p-2 rounded-md bg-muted/80 hover:bg-muted text-muted-foreground hover:text-foreground backdrop-blur-sm transition-colors shadow-lg ${className}`}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n    >\n      <AnimatePresence mode=\"wait\">\n        {copied ? (\n          <motion.div\n            key=\"check\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0 }}\n          >\n            <Check className=\"w-4 h-4 text-accent\" />\n          </motion.div>\n        ) : (\n          <motion.div\n            key=\"copy\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0 }}\n          >\n            <Copy className=\"w-4 h-4\" />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.button>\n  );\n};\n\nexport const CodeBlock: React.FC<CodeBlockProps> = ({\n  code,\n  language = \"tsx\",\n  showLineNumbers = false,\n  showCopyButton = true,\n  showPackageManagerTabs = false,\n  className = \"\",\n  title,\n}) => {\n  const [selectedPM, setSelectedPM] = useState(\"npx\");\n  \n  const packageManagers = {\n    npx: code,\n    pnpm: code.replace(\"npx shadcn@latest\", \"pnpm dlx shadcn@latest\"),\n    yarn: code.replace(\"npx shadcn@latest\", \"yarn dlx shadcn@latest\"),\n    bunx: code.replace(\"npx shadcn@latest\", \"bunx --bun shadcn@latest\"),\n  };\n\n  const currentCode = showPackageManagerTabs ? packageManagers[selectedPM as keyof typeof packageManagers] : code;\n\n  return (\n    <div className={`relative ${className}`}>\n      {title && (\n        <div className=\"bg-muted text-muted-foreground px-4 py-2 text-sm font-medium rounded-t-lg border-b\">\n          {title}\n        </div>\n      )}\n      \n      {showPackageManagerTabs && (\n        <div className=\"flex gap-1 mb-2\">\n          {Object.keys(packageManagers).map((pm) => (\n            <button\n              key={pm}\n              onClick={() => setSelectedPM(pm)}\n              className={`px-3 py-1 text-xs rounded-t-md transition-colors ${\n                selectedPM === pm\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"bg-secondary text-secondary-foreground hover:bg-secondary/80\"\n              }`}\n            >\n              {pm}\n            </button>\n          ))}\n        </div>\n      )}\n      \n      <div className=\"relative group\">\n        <Highlight\n          theme={themes.oneDark}\n          code={currentCode.trim()}\n          language={language as any}\n        >\n          {({ className: highlightClassName, style, tokens, getLineProps, getTokenProps }) => (\n            <pre \n              className={`${highlightClassName} p-4 rounded-lg font-mono text-sm overflow-x-auto ${\n                showPackageManagerTabs ? 'rounded-tl-none' : ''\n              } ${title ? 'rounded-t-none' : ''}`}\n              style={style}\n            >\n              {tokens.map((line, i) => (\n                <div key={i} {...getLineProps({ line })} className={showLineNumbers ? \"table-row\" : \"\"}>\n                  {showLineNumbers && (\n                     <span className=\"table-cell text-right pr-4 text-muted-foreground select-none text-xs\">                      {i + 1}\n                    </span>\n                  )}\n                  <span className={showLineNumbers ? \"table-cell\" : \"\"}>\n                    {line.map((token, key) => (\n                      <span key={key} {...getTokenProps({ token })} />\n                    ))}\n                  </span>\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n        \n        {showCopyButton && (\n          <div className=\"absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n            <CopyButton text={currentCode} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/ui/code-block.tsx"
    }
  ],
  "docs": "Make sure to install formedible and configure your shadcn/ui components before using this builder. This component provides a visual interface for creating forms that can be used with the formedible library.",
  "categories": [
    "form",
    "builder",
    "component"
  ]
}