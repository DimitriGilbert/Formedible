{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-builder",
  "type": "registry:component",
  "title": "Form Builder",
  "description": "A visual form builder component for creating forms with drag-and-drop interface",
  "dependencies": [
    "@tanstack/react-form",
    "@radix-ui/react-accordion",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-dialog",
    "@radix-ui/react-label",
    "@radix-ui/react-popover",
    "@radix-ui/react-progress",
    "@radix-ui/react-radio-group",
    "@radix-ui/react-select",
    "@radix-ui/react-slider",
    "@radix-ui/react-slot",
    "@radix-ui/react-switch",
    "@radix-ui/react-tabs",
    "lucide-react",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "textarea",
    "select",
    "checkbox",
    "switch",
    "label",
    "card",
    "tabs",
    "accordion",
    "dialog",
    "popover",
    "progress",
    "radio-group",
    "slider",
    "badge",
    "alert",
    "skeleton",
    "https://formedible.dev/r/use-formedible.json"
  ],
  "files": [
    {
      "path": "src/components/formedible/builder/form-builder.tsx",
      "content": "\"use client\";\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport { useFormedible } from \"@/hooks/use-formedible\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Plus,\n  Eye,\n  Code,\n  Settings,\n  Download,\n  Upload,\n  Trash2,\n  Copy,\n  Edit,\n  FileText,\n} from \"lucide-react\";\nimport { z } from \"zod\";\nimport { CodeBlock } from \"@/components/ui/code-block\";\nimport { SimpleFieldConfigurator } from \"./simple-field-configurator\";\nimport { FormPreview } from \"./form-preview\";\n\n// Types for the form builder\ninterface FormField {\n  id: string;\n  name: string;\n  type: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  required?: boolean;\n  options?: Array<{ value: string; label: string }>;\n  validation?: any;\n  page?: number;\n  group?: string;\n  section?: {\n    title: string;\n    description?: string;\n    collapsible?: boolean;\n    defaultExpanded?: boolean;\n  };\n  help?: {\n    text?: string;\n    tooltip?: string;\n    position?: \"top\" | \"bottom\" | \"left\" | \"right\";\n    link?: { url: string; text: string };\n  };\n  inlineValidation?: {\n    enabled?: boolean;\n    debounceMs?: number;\n    showSuccess?: boolean;\n  };\n  arrayConfig?: any;\n  datalist?: any;\n  multiSelectConfig?: any;\n  colorConfig?: any;\n  ratingConfig?: any;\n  phoneConfig?: any;\n}\n\nconst FIELD_TYPES = [\n  { value: \"text\", label: \"Text Input\", icon: \"📝\" },\n  { value: \"email\", label: \"Email\", icon: \"📧\" },\n  { value: \"password\", label: \"Password\", icon: \"🔒\" },\n  { value: \"textarea\", label: \"Textarea\", icon: \"📄\" },\n  { value: \"number\", label: \"Number\", icon: \"🔢\" },\n  { value: \"select\", label: \"Select\", icon: \"📋\" },\n  { value: \"radio\", label: \"Radio Group\", icon: \"⚪\" },\n  { value: \"multiSelect\", label: \"Multi-Select\", icon: \"☑️\" },\n  { value: \"checkbox\", label: \"Checkbox\", icon: \"✅\" },\n  { value: \"switch\", label: \"Switch\", icon: \"🔘\" },\n  { value: \"date\", label: \"Date Picker\", icon: \"📅\" },\n  { value: \"slider\", label: \"Slider\", icon: \"🎚️\" },\n  { value: \"rating\", label: \"Rating\", icon: \"⭐\" },\n  { value: \"colorPicker\", label: \"Color Picker\", icon: \"🎨\" },\n  { value: \"phone\", label: \"Phone Number\", icon: \"📞\" },\n  { value: \"file\", label: \"File Upload\", icon: \"📎\" },\n  { value: \"array\", label: \"Array Field\", icon: \"📚\" },\n];\n\nexport const FormBuilder: React.FC = () => {\n  // Form data state\n  const [formTitle, setFormTitle] = useState<string>(\"My Form\");\n  const [formDescription, setFormDescription] = useState<string>(\"A form built with Formedible\");\n  const [fields, setFields] = useState<FormField[]>([]);\n  const [pages, setPages] = useState<Array<{ page: number; title: string; description?: string }>>([\n    { page: 1, title: \"Page 1\", description: \"First page\" }\n  ]);\n  const [settings, setSettings] = useState({\n    submitLabel: \"Submit\",\n    nextLabel: \"Next\",\n    previousLabel: \"Previous\",\n    showProgress: true,\n    allowPageNavigation: false,\n    resetOnSubmit: false,\n  });\n\n  // UI state\n  const [selectedFieldId, setSelectedFieldId] = useState<string | null>(null);\n  const [selectedPageId, setSelectedPageId] = useState<number | null>(null);\n  const [editingPageId, setEditingPageId] = useState<number | null>(null);\n  const [activeTab, setActiveTab] = useState<string>(\"builder\");\n  const [previewMode, setPreviewMode] = useState<\"desktop\" | \"tablet\" | \"mobile\">(\"desktop\");\n\n  // Form configuration form\n  const configFormSchema = z.object({\n    title: z.string().min(1, \"Title is required\"),\n    description: z.string().optional(),\n  });\n\n  const { Form: ConfigForm } = useFormedible({\n    schema: configFormSchema,\n    fields: [\n      {\n        name: \"title\",\n        type: \"text\",\n        label: \"Form Title\",\n        placeholder: \"Enter form title\",\n      },\n      {\n        name: \"description\",\n        type: \"textarea\",\n        label: \"Description\",\n        placeholder: \"Enter form description\",\n      },\n    ],\n    formOptions: {\n      defaultValues: {\n        title: formTitle,\n        description: formDescription || \"\",\n      },\n      onChange: ({ value }) => {\n        if (value.title !== formTitle) {\n          setFormTitle(value.title);\n        }\n        if (value.description !== formDescription) {\n          setFormDescription(value.description || \"\");\n        }\n      },\n    },\n    showSubmitButton: false,\n  });\n\n  // Page editing form\n  const pageFormSchema = z.object({\n    title: z.string().min(1, \"Page title is required\"),\n    description: z.string().optional(),\n  });\n\n  const { Form: PageForm } = useFormedible({\n    schema: pageFormSchema,\n    fields: [\n      {\n        name: \"title\",\n        type: \"text\",\n        label: \"Page Title\",\n        placeholder: \"Enter page title\",\n      },\n      {\n        name: \"description\",\n        type: \"textarea\",\n        label: \"Description (optional)\",\n        placeholder: \"Enter page description\",\n      },\n    ],\n    formOptions: {\n      defaultValues: editingPageId ? {\n        title: pages.find(p => p.page === editingPageId)?.title || \"\",\n        description: pages.find(p => p.page === editingPageId)?.description || \"\",\n      } : { title: \"\", description: \"\" },\n      onChange: ({ value }) => {\n        if (editingPageId) {\n          setPages(prev => prev.map(p =>\n            p.page === editingPageId\n              ? { ...p, title: value.title, description: value.description }\n              : p\n          ));\n        }\n      },\n    },\n    showSubmitButton: false,\n  });\n\n  // Add a new field\n  const addField = useCallback((type: string) => {\n    const newField: FormField = {\n      id: `field_${Date.now()}`,\n      name: `field_${fields.length + 1}`,\n      type,\n      label: `${FIELD_TYPES.find((t) => t.value === type)?.label || type} Field`,\n      required: false,\n      page: selectedPageId || 1,\n    };\n\n    setFields(prev => [...prev, newField]);\n    setSelectedFieldId(newField.id);\n  }, [fields.length, selectedPageId]);\n\n  // Update a field\n  const updateField = useCallback((fieldId: string, updates: Partial<FormField>) => {\n    setFields(prev => prev.map(field =>\n      field.id === fieldId ? { ...field, ...updates } : field\n    ));\n  }, []);\n\n  // Get field by ID\n  const getField = useCallback((id: string) => {\n    return fields.find(f => f.id === id);\n  }, [fields]);\n\n  // Delete a field\n  const deleteField = useCallback((fieldId: string) => {\n    setFields(prev => prev.filter(field => field.id !== fieldId));\n    setSelectedFieldId(null);\n  }, []);\n\n  // Duplicate a field\n  const duplicateField = useCallback((fieldId: string) => {\n    const field = fields.find((f) => f.id === fieldId);\n    if (field) {\n      const newField: FormField = {\n        ...field,\n        id: `field_${Date.now()}`,\n        name: `${field.name}_copy`,\n        label: `${field.label} (Copy)`,\n      };\n      setFields(prev => [...prev, newField]);\n      setSelectedFieldId(newField.id);\n    }\n  }, [fields]);\n\n  // Generate form configuration\n  const formConfig = useMemo(() => {\n    const schemaFields: Record<string, any> = {};\n\n    fields.forEach((field) => {\n      let fieldSchema: any;\n\n      switch (field.type) {\n        case \"number\":\n        case \"slider\":\n        case \"rating\":\n          fieldSchema = z.number();\n          break;\n        case \"checkbox\":\n        case \"switch\":\n          fieldSchema = z.boolean();\n          break;\n        case \"date\":\n          fieldSchema = z.string();\n          break;\n        case \"multiSelect\":\n        case \"array\":\n          fieldSchema = z.array(z.string());\n          break;\n        default:\n          fieldSchema = z.string();\n      }\n\n      if (field.required) {\n        if (field.type === \"number\" || field.type === \"slider\" || field.type === \"rating\") {\n          // For numbers, required means not null/undefined\n        } else if (field.type === \"checkbox\" || field.type === \"switch\") {\n          fieldSchema = fieldSchema.refine((val: boolean) => val === true, {\n            message: `${field.label} is required`,\n          });\n        } else if (typeof fieldSchema.min === \"function\") {\n          fieldSchema = fieldSchema.min(1, `${field.label} is required`);\n        }\n      } else {\n        fieldSchema = fieldSchema.optional();\n      }\n\n      schemaFields[field.name] = fieldSchema;\n    });\n\n    return {\n      title: formTitle,\n      description: formDescription,\n      schema: z.object(schemaFields),\n      settings,\n      fields: fields.map((field) => ({\n        name: field.name,\n        type: field.type,\n        label: field.label,\n        placeholder: field.placeholder,\n        description: field.description,\n        page: field.page || 1,\n        group: field.group,\n        section: field.section,\n        help: field.help,\n        inlineValidation: field.inlineValidation,\n        ...(field.options && { options: field.options }),\n        ...(field.arrayConfig && { arrayConfig: field.arrayConfig }),\n        ...(field.datalist && { datalist: field.datalist }),\n        ...(field.multiSelectConfig && { multiSelectConfig: field.multiSelectConfig }),\n        ...(field.colorConfig && { colorConfig: field.colorConfig }),\n        ...(field.ratingConfig && { ratingConfig: field.ratingConfig }),\n        ...(field.phoneConfig && { phoneConfig: field.phoneConfig }),\n      })),\n      pages: pages,\n      submitLabel: settings.submitLabel,\n      nextLabel: settings.nextLabel,\n      previousLabel: settings.previousLabel,\n      progress: settings.showProgress\n        ? { showSteps: true, showPercentage: true }\n        : undefined,\n      formOptions: {\n        onSubmit: async ({ value }: any) => {\n          console.log(\"Form submitted:\", value);\n          alert(\"Form submitted! Check console for values.\");\n        },\n      },\n    };\n  }, [formTitle, formDescription, fields, pages, settings]);\n\n  // Export configuration\n  const exportConfig = useCallback(() => {\n    const blob = new Blob([JSON.stringify(formConfig, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${formTitle.toLowerCase().replace(/\\s+/g, \"-\")}-form.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  }, [formTitle, formConfig]);\n\n  // Import configuration\n  const importConfig = useCallback(() => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \".json\";\n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const config = JSON.parse(e.target?.result as string);\n          const importedFields: FormField[] = (config.fields || []).map(\n            (field: any, idx: number) => ({\n              id: `field_${Date.now()}_${idx}`,\n              name: field.name,\n              type: field.type,\n              label: field.label,\n              placeholder: field.placeholder,\n              description: field.description,\n              required: false,\n              page: field.page || 1,\n              group: field.group,\n              section: field.section,\n              help: field.help,\n              inlineValidation: field.inlineValidation,\n              options: field.options,\n              arrayConfig: field.arrayConfig,\n              datalist: field.datalist,\n              multiSelectConfig: field.multiSelectConfig,\n              colorConfig: field.colorConfig,\n              ratingConfig: field.ratingConfig,\n              phoneConfig: field.phoneConfig,\n            })\n          );\n\n          setFormTitle(\"Imported Form\");\n          setFormDescription(\"Imported from JSON\");\n          setFields(importedFields);\n          setPages(config.pages || [{ page: 1, title: \"Page 1\", description: \"\" }]);\n          setSettings({\n            submitLabel: config.submitLabel || \"Submit\",\n            nextLabel: config.nextLabel || \"Next\",\n            previousLabel: config.previousLabel || \"Previous\",\n            showProgress: !!config.progress,\n            allowPageNavigation: false,\n            resetOnSubmit: false,\n          });\n        } catch (_error) {\n          alert(\"Error importing configuration. Please check the file format.\");\n        }\n      };\n      reader.readAsText(file);\n    };\n    input.click();\n  }, []);\n\n  // Generate code\n  const generateCode = useMemo(() => {\n    return `import { useFormedible } from 'formedible';\nimport { z } from 'zod';\n\nconst formConfig = ${JSON.stringify(formConfig, null, 2)};\n\nexport const MyForm = () => {\n  const { Form } = useFormedible(formConfig);\n  \n  return <Form />;\n};`;\n  }, [formConfig]);\n\n  return (\n    <div className=\"w-full min-h-[800px] flex flex-col bg-background\">\n      {/* Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"flex h-16 items-center px-6\">\n          <div className=\"flex items-center space-x-4\">\n            <h1 className=\"text-2xl font-bold\">Formedible Builder</h1>\n            <div className=\"text-foreground\">Build forms with forms! 🚀</div>\n          </div>\n          <div className=\"ml-auto flex items-center space-x-4\">\n            <Button variant=\"secondary\" onClick={exportConfig}>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n            <Button variant=\"secondary\" onClick={importConfig}>\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Import\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 flex min-h-0\">\n        {/* Sidebar - Field Types */}\n        <div className=\"w-72 border-r bg-card overflow-y-auto\">\n          <div className=\"p-6\">\n            <h3 className=\"font-semibold text-lg mb-6\">Field Types</h3>\n            <div className=\"grid grid-cols-1 gap-3\">\n              {FIELD_TYPES.map((fieldType) => (\n                <Button\n                  key={fieldType.value}\n                  variant=\"outline\"\n                  size=\"default\"\n                  className=\"justify-start h-auto p-4\"\n                  onClick={() => addField(fieldType.value)}\n                >\n                  <span className=\"mr-3 text-lg\">{fieldType.icon}</span>\n                  <span>{fieldType.label}</span>\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1 flex flex-col\">\n            <TabsList className=\"w-full justify-start border-b rounded-none h-14 bg-card p-0\">\n              <TabsTrigger value=\"builder\" className=\"flex items-center gap-2 h-full px-6\">\n                <Settings className=\"h-4 w-4\" />\n                Builder\n              </TabsTrigger>\n              <TabsTrigger value=\"preview\" className=\"flex items-center gap-2 h-full px-6\">\n                <Eye className=\"h-4 w-4\" />\n                Preview\n              </TabsTrigger>\n              <TabsTrigger value=\"code\" className=\"flex items-center gap-2 h-full px-6\">\n                <Code className=\"h-4 w-4\" />\n                Code\n              </TabsTrigger>\n            </TabsList>\n\n            <div className=\"flex-1 min-h-0\">\n              <TabsContent value=\"builder\" className=\"h-full m-0\">\n                <div className=\"h-full flex min-h-0\">\n                  {/* Form Structure */}\n                  <div className=\"flex-1 p-4 overflow-y-auto min-h-0\">\n                    <div className=\"mx-auto space-y-4\">\n                      {/* Form Configuration */}\n                      <Card className=\"hover:shadow-lg transition-shadow py-3 gap-2\">\n                        <CardHeader>\n                          <CardTitle className=\"text-xl\">Form Configuration</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2 p-4\">\n                          <ConfigForm />\n                        </CardContent>\n                      </Card>\n\n                      {/* Page Management */}\n                      <Card className=\"hover:shadow-lg transition-shadow gap-2\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center justify-between text-xl\">\n                            Pages ({pages.length})\n                            {selectedPageId && (\n                              <span className=\"text-sm font-normal text-primary\">\n                                Page {selectedPageId} selected\n                              </span>\n                            )}\n                            <Button\n                              onClick={() => {\n                                const newPageNumber = Math.max(...pages.map((p) => p.page)) + 1;\n                                setPages(prev => [\n                                  ...prev,\n                                  {\n                                    page: newPageNumber,\n                                    title: `Page ${newPageNumber}`,\n                                    description: \"\",\n                                  },\n                                ]);\n                                setEditingPageId(newPageNumber);\n                              }}\n                            >\n                              <Plus className=\"h-4 w-4 mr-2\" />\n                              Add Page\n                            </Button>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2 p-4\">\n                          <div className=\"space-y-2\">\n                            {pages.map((page) => (\n                              <div\n                                key={page.page}\n                                className={cn(\n                                  \"border rounded-lg transition-all cursor-pointer\",\n                                  selectedPageId === page.page\n                                    ? \"border-primary bg-primary/5 shadow-sm\"\n                                    : \"border-border hover:border-primary/50\",\n                                  editingPageId === page.page && \"ring-2 ring-primary/20\"\n                                )}\n                                onClick={() => {\n                                  if (editingPageId === page.page) return;\n                                  setSelectedPageId(selectedPageId === page.page ? null : page.page);\n                                }}\n                              >\n                                {editingPageId === page.page ? (\n                                  <div className=\"p-8 space-y-6\">\n                                    <PageForm />\n                                    <div className=\"flex items-center gap-3\">\n                                      <Button onClick={() => setEditingPageId(null)}>Done</Button>\n                                      <Button variant=\"outline\" onClick={() => setEditingPageId(null)}>\n                                        Cancel\n                                      </Button>\n                                    </div>\n                                  </div>\n                                ) : (\n                                  <div className=\"flex items-center justify-between p-8\">\n                                    <div className=\"flex items-center space-x-4\">\n                                      <FileText\n                                        className={cn(\n                                          \"h-5 w-5\",\n                                          selectedPageId === page.page\n                                            ? \"text-primary\"\n                                            : \"text-muted-foreground\"\n                                        )}\n                                      />\n                                      <div>\n                                        <div\n                                          className={cn(\n                                            \"font-medium text-lg\",\n                                            selectedPageId === page.page && \"text-primary\"\n                                          )}\n                                        >\n                                          {page.title}\n                                        </div>\n                                        {page.description && (\n                                          <div className=\"text-muted-foreground\">{page.description}</div>\n                                        )}\n                                        <div className=\"text-sm text-muted-foreground\">\n                                          {fields.filter((f) => (f.page || 1) === page.page).length} fields\n                                        </div>\n                                      </div>\n                                    </div>\n                                    <div className=\"flex items-center space-x-2\">\n                                      <Button\n                                        variant=\"ghost\"\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                          setEditingPageId(page.page);\n                                        }}\n                                      >\n                                        <Edit className=\"h-4 w-4\" />\n                                      </Button>\n                                      {pages.length > 1 && (\n                                        <Button\n                                          variant=\"ghost\"\n                                          onClick={(e) => {\n                                            e.stopPropagation();\n                                            if (\n                                              confirm(\n                                                `Delete ${page.title}? Fields on this page will be moved to Page 1.`\n                                              )\n                                            ) {\n                                              const filteredPages = pages.filter((p) => p.page !== page.page);\n                                              const renumberedPages = filteredPages.map((p, idx) => ({\n                                                ...p,\n                                                page: idx + 1,\n                                              }));\n                                              setPages(renumberedPages);\n\n                                              const updatedFields = fields.map((f) => {\n                                                if ((f.page || 1) === page.page) {\n                                                  return { ...f, page: 1 };\n                                                }\n                                                if ((f.page || 1) > page.page) {\n                                                  return { ...f, page: (f.page || 1) - 1 };\n                                                }\n                                                return f;\n                                              });\n                                              setFields(updatedFields);\n                                              if (selectedPageId === page.page) {\n                                                setSelectedPageId(null);\n                                              }\n                                            }\n                                          }}\n                                        >\n                                          <Trash2 className=\"h-4 w-4\" />\n                                        </Button>\n                                      )}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      {/* Fields List */}\n                      <Card className=\"hover:shadow-lg transition-shadow gap-2\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center justify-between text-xl\">\n                            {selectedPageId ? (\n                              <>\n                                {pages.find((p) => p.page === selectedPageId)?.title} Fields\n                                <span className=\"text-sm font-normal text-muted-foreground\">\n                                  ({fields.filter((f) => (f.page || 1) === selectedPageId).length} fields)\n                                </span>\n                              </>\n                            ) : (\n                              <>\n                                All Fields ({fields.length})\n                                {fields.length === 0 && (\n                                  <span className=\"text-sm font-normal text-muted-foreground\">\n                                    Add fields from the sidebar →\n                                  </span>\n                                )}\n                              </>\n                            )}\n                          </CardTitle>\n                          {selectedPageId && (\n                            <p className=\"text-muted-foreground\">\n                              New fields will be added to this page. Click the page again to deselect.\n                            </p>\n                          )}\n                        </CardHeader>\n                        <CardContent className=\"space-y-2 p-4\">\n                          {(() => {\n                            const fieldsToShow = selectedPageId\n                              ? fields.filter((f) => (f.page || 1) === selectedPageId)\n                              : fields;\n\n                            if (fieldsToShow.length === 0) {\n                              return (\n                                <div className=\"text-center py-12 text-muted-foreground\">\n                                  <Plus className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                                  <p className=\"text-lg\">\n                                    {selectedPageId\n                                      ? `No fields on this page yet. Add some from the sidebar!`\n                                      : `No fields yet. Add some from the sidebar!`}\n                                  </p>\n                                </div>\n                              );\n                            }\n\n                            if (selectedPageId) {\n                              return (\n                                <div className=\"space-y-4\">\n                                  {fieldsToShow.map((field) => (\n                                    <div\n                                      key={field.id}\n                                      className={cn(\n                                        \"flex items-center justify-between p-6 border rounded-lg cursor-pointer transition-colors hover:shadow-md\",\n                                        selectedFieldId === field.id\n                                          ? \"border-primary bg-primary/5\"\n                                          : \"border-border hover:border-primary/50\"\n                                      )}\n                                      onClick={() => setSelectedFieldId(field.id)}\n                                    >\n                                      <div className=\"flex items-center space-x-4\">\n                                        <span className=\"text-2xl\">\n                                          {FIELD_TYPES.find((t) => t.value === field.type)?.icon || \"📝\"}\n                                        </span>\n                                        <div>\n                                          <div className=\"font-medium text-lg\">{field.label}</div>\n                                          <div className=\"text-muted-foreground\">\n                                            {field.type} • {field.name}\n                                          </div>\n                                        </div>\n                                      </div>\n                                      <div className=\"flex items-center space-x-2\">\n                                        <Button\n                                          variant=\"ghost\"\n                                          onClick={(e) => {\n                                            e.stopPropagation();\n                                            duplicateField(field.id);\n                                          }}\n                                        >\n                                          <Copy className=\"h-4 w-4\" />\n                                        </Button>\n                                        <Button\n                                          variant=\"ghost\"\n                                          onClick={(e) => {\n                                            e.stopPropagation();\n                                            deleteField(field.id);\n                                          }}\n                                        >\n                                          <Trash2 className=\"h-4 w-4\" />\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              );\n                            } else {\n                              return (\n                                <div className=\"space-y-8\">\n                                  {pages.map((page) => {\n                                    const pageFields = fields.filter((f) => (f.page || 1) === page.page);\n                                    return (\n                                      <div key={page.page}>\n                                        <div className=\"flex items-center gap-3 mb-4\">\n                                          <FileText className=\"h-5 w-5 text-muted-foreground\" />\n                                          <span className=\"font-medium text-lg\">{page.title}</span>\n                                          <span className=\"text-sm text-muted-foreground\">\n                                            ({pageFields.length} fields)\n                                          </span>\n                                        </div>\n                                        <div className=\"space-y-4 ml-8\">\n                                          {pageFields.length === 0 ? (\n                                            <div className=\"text-muted-foreground italic\">\n                                              No fields on this page\n                                            </div>\n                                          ) : (\n                                            pageFields.map((field) => (\n                                              <div\n                                                key={field.id}\n                                                className={cn(\n                                                  \"flex items-center justify-between p-6 border rounded-lg cursor-pointer transition-colors hover:shadow-md\",\n                                                  selectedFieldId === field.id\n                                                    ? \"border-primary bg-primary/5\"\n                                                    : \"border-border hover:border-primary/50\"\n                                                )}\n                                                onClick={() => setSelectedFieldId(field.id)}\n                                              >\n                                                <div className=\"flex items-center space-x-4\">\n                                                  <span className=\"text-2xl\">\n                                                    {FIELD_TYPES.find((t) => t.value === field.type)?.icon || \"📝\"}\n                                                  </span>\n                                                  <div>\n                                                    <div className=\"font-medium text-lg\">{field.label}</div>\n                                                    <div className=\"text-muted-foreground\">\n                                                      {field.type} • {field.name}\n                                                    </div>\n                                                  </div>\n                                                </div>\n                                                <div className=\"flex items-center space-x-2\">\n                                                  <Button\n                                                    variant=\"ghost\"\n                                                    onClick={(e) => {\n                                                      e.stopPropagation();\n                                                      duplicateField(field.id);\n                                                    }}\n                                                  >\n                                                    <Copy className=\"h-4 w-4\" />\n                                                  </Button>\n                                                  <Button\n                                                    variant=\"ghost\"\n                                                    onClick={(e) => {\n                                                      e.stopPropagation();\n                                                      deleteField(field.id);\n                                                    }}\n                                                  >\n                                                    <Trash2 className=\"h-4 w-4\" />\n                                                  </Button>\n                                                </div>\n                                              </div>\n                                            ))\n                                          )}\n                                        </div>\n                                      </div>\n                                    );\n                                  })}\n                                </div>\n                              );\n                            }\n                          })()}\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </div>\n\n                  {/* Field Configuration Panel */}\n                  {selectedFieldId && (\n                    <div className=\"w-96 border-l bg-card overflow-y-auto min-h-0\">\n                      <div className=\"p-6\">\n                        <h3 className=\"font-semibold text-lg mb-6\">Configure Field</h3>\n                        <SimpleFieldConfigurator\n                          fieldId={selectedFieldId}\n                          getField={getField}\n                          onUpdate={updateField}\n                          availablePages={pages.map((p) => p.page)}\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"preview\" className=\"h-full m-0 p-8 overflow-y-auto min-h-0\">\n                <div className=\"max-w-6xl mx-auto\">\n                  <div className=\"mb-8 flex items-center justify-between\">\n                    <h2 className=\"text-2xl font-bold\">Live Preview</h2>\n                    <div className=\"flex items-center space-x-3\">\n                      {([\"desktop\", \"tablet\", \"mobile\"] as const).map((mode) => (\n                        <Button\n                          key={mode}\n                          variant={previewMode === mode ? \"default\" : \"outline\"}\n                          onClick={() => setPreviewMode(mode)}\n                        >\n                          {mode === \"desktop\" && \"🖥️\"}\n                          {mode === \"tablet\" && \"📱\"}\n                          {mode === \"mobile\" && \"📱\"}\n                          <span className=\"ml-2 capitalize\">{mode}</span>\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                  <div\n                    className={cn(\n                      \"mx-auto transition-all\",\n                      previewMode === \"mobile\"\n                        ? \"max-w-sm\"\n                        : previewMode === \"tablet\"\n                        ? \"max-w-md\"\n                        : \"max-w-4xl\"\n                    )}\n                  >\n                    <FormPreview config={formConfig} />\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"code\" className=\"h-full m-0 p-8 overflow-y-auto min-h-0\">\n                <div className=\"max-w-6xl mx-auto\">\n                  <div className=\"mb-8\">\n                    <h2 className=\"text-2xl font-bold\">Generated Code</h2>\n                    <p className=\"text-muted-foreground text-lg\">\n                      Copy this code to use your form in your application\n                    </p>\n                  </div>\n                  <CodeBlock\n                    code={generateCode}\n                    language=\"tsx\"\n                    title=\"MyForm.tsx\"\n                    showCopyButton={true}\n                    showLineNumbers={true}\n                  />\n                </div>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/formedible/builder/form-builder.tsx"
    },
    {
      "path": "src/components/formedible/builder/simple-field-configurator.tsx",
      "content": "'use client';\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useFormedible } from '@/hooks/use-formedible';\nimport { z } from 'zod';\n\ninterface FormField {\n  id: string;\n  name: string;\n  type: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  required?: boolean;\n  options?: Array<{ value: string; label: string }>;\n  page?: number;\n  group?: string;\n}\n\ninterface FieldConfiguratorProps {\n  fieldId: string;\n  getField: (id: string) => FormField | undefined;\n  onUpdate: (fieldId: string, updates: Partial<FormField>) => void;\n  availablePages: number[];\n}\n\nexport const SimpleFieldConfigurator: React.FC<FieldConfiguratorProps> = ({\n  fieldId,\n  getField,\n  onUpdate,\n  availablePages,\n}) => {\n  // Always call hooks at the top level\n  const field = getField(fieldId);\n  \n  // Local state for form values\n  const [localValues, setLocalValues] = useState(() => ({\n    name: field?.name || '',\n    label: field?.label || '',\n    placeholder: field?.placeholder || '',\n    description: field?.description || '',\n    required: field?.required || false,\n    page: field?.page || 1,\n  }));\n\n  // Update local values when field changes\n  useEffect(() => {\n    if (field) {\n      setLocalValues({\n        name: field.name || '',\n        label: field.label || '',\n        placeholder: field.placeholder || '',\n        description: field.description || '',\n        required: field.required || false,\n        page: field.page || 1,\n      });\n    }\n  }, [field]);\n\n  // Schema for validation\n  const configSchema = useMemo(() => z.object({\n    name: z.string().min(1, 'Field name is required'),\n    label: z.string().min(1, 'Label is required'),\n    placeholder: z.string().optional(),\n    description: z.string().optional(),\n    required: z.boolean(),\n    page: z.number(),\n  }), []);\n\n  // Form fields configuration\n  const formFields = useMemo(() => [\n    {\n      name: 'name',\n      type: 'text',\n      label: 'Field Name',\n      placeholder: 'e.g., firstName, email',\n    },\n    {\n      name: 'label',\n      type: 'text',\n      label: 'Label',\n      placeholder: 'e.g., First Name, Email Address',\n    },\n    {\n      name: 'placeholder',\n      type: 'text',\n      label: 'Placeholder',\n      placeholder: 'e.g., Enter your name...',\n    },\n    {\n      name: 'description',\n      type: 'textarea',\n      label: 'Description',\n      placeholder: 'Optional description or help text',\n    },\n    {\n      name: 'required',\n      type: 'switch',\n      label: 'Required Field',\n      description: 'Make this field mandatory',\n    },\n    {\n      name: 'page',\n      type: 'select',\n      label: 'Page',\n      options: availablePages.map(p => ({ value: p.toString(), label: `Page ${p}` })),\n      description: 'Which page should this field appear on?',\n    },\n  ], [availablePages]);\n\n  // Handle form changes\n  const handleChange = useCallback(({ value }: { value: any }) => {\n    setLocalValues(value);\n    // Update the field immediately\n    onUpdate(fieldId, {\n      name: value.name,\n      label: value.label,\n      placeholder: value.placeholder,\n      description: value.description,\n      required: value.required,\n      page: value.page,\n    });\n  }, [fieldId, onUpdate]);\n\n  // Create the form\n  const { Form } = useFormedible({\n    schema: configSchema,\n    fields: formFields,\n    formOptions: {\n      defaultValues: localValues,\n      onChange: handleChange,\n    },\n    showSubmitButton: false,\n  });\n\n  // Render nothing if no field\n  if (!field) {\n    return <div className=\"text-muted-foreground\">No field selected</div>;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"border-b pb-4\">\n        <h4 className=\"font-medium\">Field Configuration</h4>\n        <p className=\"text-sm text-muted-foreground\">\n          Configure the properties for this {field.type} field\n        </p>\n      </div>\n      <Form />\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/formedible/builder/simple-field-configurator.tsx"
    },
    {
      "path": "src/components/formedible/builder/form-preview.tsx",
      "content": "'use client';\nimport React, { useMemo } from 'react';\nimport { useFormedible } from 'formedible';\nimport { z } from 'zod';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { AlertCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface FormField {\n  id: string;\n  name: string;\n  type: string;\n  label: string;\n  placeholder?: string;\n  description?: string;\n  required?: boolean;\n  options?: Array<{ value: string; label: string }>;\n  validation?: any;\n  page?: number;\n  group?: string;\n  section?: {\n    title: string;\n    description?: string;\n    collapsible?: boolean;\n    defaultExpanded?: boolean;\n  };\n  help?: {\n    text?: string;\n    tooltip?: string;\n    position?: 'top' | 'bottom' | 'left' | 'right';\n    link?: { url: string; text: string };\n  };\n  inlineValidation?: {\n    enabled?: boolean;\n    debounceMs?: number;\n    showSuccess?: boolean;\n  };\n  arrayConfig?: any;\n  datalist?: any;\n  multiSelectConfig?: any;\n  colorConfig?: any;\n  ratingConfig?: any;\n  phoneConfig?: any;\n}\n\ninterface FormConfiguration {\n  title: string;\n  description?: string;\n  fields: FormField[];\n  pages: Array<{\n    page: number;\n    title: string;\n    description?: string;\n  }>;\n  settings: {\n    submitLabel: string;\n    nextLabel: string;\n    previousLabel: string;\n    showProgress: boolean;\n    allowPageNavigation: boolean;\n    resetOnSubmit: boolean;\n  };\n}\n\ninterface FormPreviewProps {\n  config: FormConfiguration;\n  className?: string;\n}\n\nexport const FormPreview: React.FC<FormPreviewProps> = ({\n  config,\n  className,\n}) => {\n  // Convert form configuration to formedible configuration\n  const formedibleConfig = useMemo(() => {\n    if (config.fields.length === 0) {\n      return {\n        fields: [],\n        schema: z.object({})\n      };\n    }\n\n    try {\n      return {\n        fields: config.fields.map(field => {\n          const fieldConfig: any = {\n            name: field.name,\n            type: field.type,\n            label: field.label,\n            placeholder: field.placeholder,\n            description: field.description,\n            page: field.page || 1,\n            group: field.group,\n            section: field.section,\n            help: field.help,\n            inlineValidation: field.inlineValidation,\n          };\n\n          // Add validation if field is required\n          if (field.required) {\n            switch (field.type) {\n              case 'text':\n              case 'email':\n              case 'password':\n              case 'textarea':\n                fieldConfig.validation = z.string().min(1, `${field.label} is required`);\n                break;\n              case 'number':\n              case 'slider':\n              case 'rating':\n                fieldConfig.validation = z.number().min(0, `${field.label} is required`);\n                break;\n              case 'select':\n              case 'radio':\n                fieldConfig.validation = z.string().min(1, `Please select ${field.label}`);\n                break;\n              case 'multiSelect':\n                fieldConfig.validation = z.array(z.string()).min(1, `Please select at least one ${field.label}`);\n                break;\n              case 'checkbox':\n              case 'switch':\n                fieldConfig.validation = z.boolean().refine(val => val === true, `${field.label} is required`);\n                break;\n              case 'date':\n                fieldConfig.validation = z.date();\n                break;\n              case 'array':\n                fieldConfig.validation = z.array(z.string()).min(1, `At least one ${field.label} is required`);\n                break;\n              case 'colorPicker':\n                fieldConfig.validation = z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Please select a color');\n                break;\n              case 'phone':\n                fieldConfig.validation = z.string().min(10, 'Please enter a valid phone number');\n                break;\n              case 'file':\n                fieldConfig.validation = z.any().refine(val => val && val.length > 0, `${field.label} is required`);\n                break;\n            }\n          }\n\n          // Add options for select/radio/multiSelect fields\n          if (['select', 'radio', 'multiSelect'].includes(field.type) && field.options) {\n            fieldConfig.options = field.options;\n          }\n\n          // Add field-specific configurations\n          if (field.arrayConfig) fieldConfig.arrayConfig = field.arrayConfig;\n          if (field.datalist) fieldConfig.datalist = field.datalist;\n          if (field.multiSelectConfig) fieldConfig.multiSelectConfig = field.multiSelectConfig;\n          if (field.colorConfig) fieldConfig.colorConfig = field.colorConfig;\n          if (field.ratingConfig) fieldConfig.ratingConfig = field.ratingConfig;\n          if (field.phoneConfig) fieldConfig.phoneConfig = field.phoneConfig;\n\n          return fieldConfig;\n        }),\n        pages: config.pages.length > 1 ? config.pages : undefined,\n        submitLabel: config.settings.submitLabel,\n        nextLabel: config.settings.nextLabel,\n        previousLabel: config.settings.previousLabel,\n        progress: config.settings.showProgress ? { \n          showSteps: true, \n          showPercentage: true \n        } : undefined,\n        formOptions: {\n          onSubmit: async ({ value }: any) => {\n            console.log('Preview form submitted:', value);\n            alert('Form submitted successfully! Check the console for form data.');\n          },\n        },\n      };\n    } catch (error) {\n      console.error('Error converting form configuration:', error);\n      return {\n        fields: [],\n        schema: z.object({})\n      };\n    }\n  }, [config]);\n\n  // Create the form using formedible - call hook at top level\n  const formResult = useFormedible(formedibleConfig);\n\n  // Handle configuration errors or empty fields\n  if (!formResult || !formResult.Form || config.fields.length === 0) {\n    if (config.fields.length === 0) {\n      return (\n        <Card className={cn(\"bg-muted/30\", className)}>\n          <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"text-4xl mb-4\">📝</div>\n            <h3 className=\"text-lg font-medium mb-2\">No Fields Added</h3>\n            <p className=\"text-muted-foreground\">\n              Add some fields from the sidebar to see your form preview\n            </p>\n          </CardContent>\n        </Card>\n      );\n    }\n    return (\n      <Card className={cn(\"bg-muted/30\", className)}>\n        <CardContent className=\"py-6\">\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              There was an error generating the form preview. Please check your field configurations.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const { Form } = formResult;\n\n  return (\n    <Card className={cn(\"bg-muted/30\", className)}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div>\n            <div>{config.title}</div>\n            {config.description && (\n              <div className=\"text-sm font-normal text-muted-foreground mt-1\">\n                {config.description}\n              </div>\n            )}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            {config.fields.length} field{config.fields.length !== 1 ? 's' : ''}\n            {config.pages.length > 1 && ` • ${config.pages.length} pages`}\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Form stats */}\n          <div className=\"grid grid-cols-3 gap-4 p-4 bg-muted/50 border rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">{config.fields.length}</div>\n              <div className=\"text-xs text-muted-foreground\">Fields</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">{config.pages.length}</div>\n              <div className=\"text-xs text-muted-foreground\">Pages</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">\n                {config.fields.filter(f => f.required).length}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Required</div>\n            </div>\n          </div>\n\n          {/* Live form preview */}\n          <div className=\"border-2 border-dashed border-muted-foreground/20 rounded-lg p-6 bg-background\">\n            <div className=\"text-xs text-muted-foreground mb-4 text-center\">\n              ✨ Live Preview - This form is fully functional!\n            </div>\n            <Form />\n          </div>\n\n          {/* Field breakdown */}\n          <div className=\"space-y-2\">\n            <h4 className=\"text-sm font-medium text-muted-foreground\">Field Types Used</h4>\n            <div className=\"flex flex-wrap gap-2\">\n              {Array.from(new Set(config.fields.map(f => f.type))).map(type => {\n                const count = config.fields.filter(f => f.type === type).length;\n                const icons: Record<string, string> = {\n                  text: '📝', email: '📧', password: '🔒', textarea: '📄',\n                  number: '🔢', select: '📋', radio: '⚪', multiSelect: '☑️',\n                  checkbox: '✅', switch: '🔘', date: '📅', slider: '🎚️',\n                  rating: '⭐', colorPicker: '🎨', phone: '📞', file: '📎',\n                  array: '📚'\n                };\n                \n                return (\n                  <div\n                    key={type}\n                    className=\"inline-flex items-center gap-1 px-2 py-1 bg-muted rounded text-xs\"\n                  >\n                    <span>{icons[type] || '📝'}</span>\n                    <span>{type}</span>\n                    {count > 1 && (\n                      <span className=\"bg-primary text-primary-foreground rounded-full w-4 h-4 text-xs flex items-center justify-center\">\n                        {count}\n                      </span>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Advanced features used */}\n          {(config.fields.some(f => f.section) || \n            config.fields.some(f => f.group) ||\n            config.fields.some(f => f.help) ||\n            config.fields.some(f => f.inlineValidation?.enabled)) && (\n            <div className=\"space-y-2\">\n              <h4 className=\"text-sm font-medium text-muted-foreground\">Advanced Features</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {config.fields.some(f => f.section) && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-primary/10 text-primary rounded text-xs\">\n                    📑 Sections\n                  </div>\n                )}\n                {config.fields.some(f => f.group) && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-accent/10 text-accent rounded text-xs\">\n                    🏷️ Field Groups\n                  </div>\n                )}\n                {config.fields.some(f => f.help) && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-secondary/50 text-foreground rounded text-xs\">\n                    ❓ Help & Tooltips\n                  </div>\n                )}\n                {config.fields.some(f => f.inlineValidation?.enabled) && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-muted text-muted-foreground rounded text-xs\">\n                    ⚡ Inline Validation\n                  </div>\n                )}\n                {config.settings.showProgress && (\n                  <div className=\"inline-flex items-center gap-1 px-2 py-1 bg-primary/20 text-primary rounded text-xs\">\n                    📊 Progress Indicator\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};",
      "type": "registry:component",
      "target": "components/formedible/builder/form-preview.tsx"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    },
    {
      "path": "src/components/ui/code-block.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Highlight, themes } from \"prism-react-renderer\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { Copy, Check } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\n/**\n * Unified CodeBlock component with syntax highlighting, copy functionality, and package manager tabs\n * \n * Features:\n * - Syntax highlighting using Prism.js with oneDark theme\n * - Floating copy button with animation feedback\n * - Optional line numbers\n * - Package manager tabs for installation commands (npx, pnpm, yarn, bunx)\n * - Optional title header\n * - Responsive design with proper overflow handling\n */\n\ninterface CodeBlockProps {\n  code: string;\n  language?: string;\n  showLineNumbers?: boolean;\n  showCopyButton?: boolean;\n  showPackageManagerTabs?: boolean;\n  className?: string;\n  title?: string;\n}\n\n// Copy Button Component\nconst CopyButton: React.FC<{ text: string; className?: string }> = ({\n  text,\n  className = \"\",\n}) => {\n  const [copied, setCopied] = useState(false);\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      toast.success(\"Copied to clipboard!\");\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast.error(\"Failed to copy\");\n    }\n  };\n\n  return (\n    <motion.button\n      onClick={copyToClipboard}\n      className={`relative inline-flex items-center justify-center p-2 rounded-md bg-muted/80 hover:bg-muted text-muted-foreground hover:text-foreground backdrop-blur-sm transition-colors shadow-lg ${className}`}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n    >\n      <AnimatePresence mode=\"wait\">\n        {copied ? (\n          <motion.div\n            key=\"check\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0 }}\n          >\n            <Check className=\"w-4 h-4 text-accent\" />\n          </motion.div>\n        ) : (\n          <motion.div\n            key=\"copy\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0 }}\n          >\n            <Copy className=\"w-4 h-4\" />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.button>\n  );\n};\n\nexport const CodeBlock: React.FC<CodeBlockProps> = ({\n  code,\n  language = \"tsx\",\n  showLineNumbers = false,\n  showCopyButton = true,\n  showPackageManagerTabs = false,\n  className = \"\",\n  title,\n}) => {\n  const [selectedPM, setSelectedPM] = useState(\"npx\");\n  \n  const packageManagers = {\n    npx: code,\n    pnpm: code.replace(\"npx shadcn@latest\", \"pnpm dlx shadcn@latest\"),\n    yarn: code.replace(\"npx shadcn@latest\", \"yarn dlx shadcn@latest\"),\n    bunx: code.replace(\"npx shadcn@latest\", \"bunx --bun shadcn@latest\"),\n  };\n\n  const currentCode = showPackageManagerTabs ? packageManagers[selectedPM as keyof typeof packageManagers] : code;\n\n  return (\n    <div className={`relative ${className}`}>\n      {title && (\n        <div className=\"bg-muted text-muted-foreground px-4 py-2 text-sm font-medium rounded-t-lg border-b\">\n          {title}\n        </div>\n      )}\n      \n      {showPackageManagerTabs && (\n        <div className=\"flex gap-1 mb-2\">\n          {Object.keys(packageManagers).map((pm) => (\n            <button\n              key={pm}\n              onClick={() => setSelectedPM(pm)}\n              className={`px-3 py-1 text-xs rounded-t-md transition-colors ${\n                selectedPM === pm\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"bg-secondary text-secondary-foreground hover:bg-secondary/80\"\n              }`}\n            >\n              {pm}\n            </button>\n          ))}\n        </div>\n      )}\n      \n      <div className=\"relative group\">\n        <Highlight\n          theme={themes.oneDark}\n          code={currentCode.trim()}\n          language={language as any}\n        >\n          {({ className: highlightClassName, style, tokens, getLineProps, getTokenProps }) => (\n            <pre \n              className={`${highlightClassName} p-4 rounded-lg font-mono text-sm overflow-x-auto ${\n                showPackageManagerTabs ? 'rounded-tl-none' : ''\n              } ${title ? 'rounded-t-none' : ''}`}\n              style={style}\n            >\n              {tokens.map((line, i) => (\n                <div key={i} {...getLineProps({ line })} className={showLineNumbers ? \"table-row\" : \"\"}>\n                  {showLineNumbers && (\n                     <span className=\"table-cell text-right pr-4 text-muted-foreground select-none text-xs\">                      {i + 1}\n                    </span>\n                  )}\n                  <span className={showLineNumbers ? \"table-cell\" : \"\"}>\n                    {line.map((token, key) => (\n                      <span key={key} {...getTokenProps({ token })} />\n                    ))}\n                  </span>\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n        \n        {showCopyButton && (\n          <div className=\"absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n            <CopyButton text={currentCode} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/ui/code-block.tsx"
    }
  ],
  "docs": "Make sure to install formedible and configure your shadcn/ui components before using this builder. This component provides a visual interface for creating forms that can be used with the formedible library.",
  "categories": [
    "form",
    "builder",
    "component"
  ]
}