{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-formedible",
  "type": "registry:hook",
  "title": "Use Formedible",
  "description": "A powerful React hook for creating schema-driven forms with TanStack Form and shadcn/ui components",
  "dependencies": [
    "@tanstack/react-form",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-label",
    "@radix-ui/react-select",
    "@radix-ui/react-switch",
    "date-fns",
    "react-day-picker",
    "lucide-react",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "textarea",
    "select",
    "checkbox",
    "switch",
    "label",
    "calendar",
    "popover",
    "badge",
    "slider",
    "radio-group",
    "progress",
    "dialog",
    "tabs",
    "accordion",
    "progress",
    "sonner"
  ],
  "files": [
    {
      "path": "src/hooks/use-formedible.tsx",
      "content":"prout",
      "type": "registry:hook",
      "target": "hooks/use-formedible.tsx"
    },
    {
      "path": "src/lib/formedible/types.ts",
      "content": "import React from 'react';\nimport type { AnyFieldApi } from '@tanstack/react-form';\nimport type { FormApi, ValidationError } from '@tanstack/form-core';\n\n// Validation error types based on TanStack Form\nexport type FormedibleValidationError = ValidationError;\n\n// Validation error that can be a string, Error object, or custom validation result\nexport type FieldValidationError = string | Error | ValidationError;\n\n// Array of validation errors for a field\nexport type FieldValidationErrors = FieldValidationError[];\n\n// Type alias for our FormApi - use the core FormApi type which is what useForm actually returns\nexport type FormedibleFormApi<TFormData = Record<string, unknown>> = FormApi<\n  TFormData,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined,\n  undefined\n>;\n\n// Option types for select, radio, and multi-select fields\nexport type FieldOption = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n  description?: string;\n};\n\nexport type FieldOptions = string[] | FieldOption[];\n\n// Normalize options to consistent format\nexport type NormalizedFieldOption = FieldOption;\n\n// Props that all basic field components rendered by FormedibleRoot will receive\nexport interface BaseFieldProps {\n  fieldApi: AnyFieldApi;\n  label?: string;\n  description?: string;\n  placeholder?: string;\n  inputClassName?: string;   // For the <Input /> component itself\n  labelClassName?: string;   // For the <Label /> component\n  wrapperClassName?: string; // For the div wrapping label and input\n}\n\n// Specific field component prop types\nexport interface SelectFieldProps extends BaseFieldProps {\n  options: FieldOptions;\n  placeholder?: string;\n}\n\nexport interface RadioFieldProps extends BaseFieldProps {\n  options: FieldOptions;\n}\n\nexport interface MultiSelectFieldProps extends BaseFieldProps {\n  options: FieldOptions;\n  placeholder?: string;\n  maxSelections?: number;\n}\n\nexport interface ArrayFieldProps extends BaseFieldProps {\n  arrayConfig: {\n    itemType: string;\n    itemLabel?: string;\n    itemPlaceholder?: string;\n    itemValidation?: unknown;\n    minItems?: number;\n    maxItems?: number;\n    addButtonLabel?: string;\n    removeButtonLabel?: string;\n    sortable?: boolean;\n    defaultValue?: unknown;\n    itemComponent?: React.ComponentType<BaseFieldProps>;\n    itemProps?: Record<string, unknown>;\n  };\n}\n\nexport interface TextFieldProps extends BaseFieldProps {\n  type?: 'text' | 'email' | 'password' | 'url' | 'tel';\n  datalist?: string[];\n  maxLength?: number;\n  minLength?: number;\n  pattern?: string;\n  autoComplete?: string;\n}\n\nexport interface NumberFieldProps extends BaseFieldProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  precision?: number;\n}\n\nexport interface DateFieldProps extends BaseFieldProps {\n  dateConfig?: {\n    format?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    disabledDates?: Date[];\n    showTime?: boolean;\n    timeFormat?: string;\n  };\n}\n\nexport interface SliderFieldProps extends BaseFieldProps {\n  sliderConfig?: {\n    min?: number;\n    max?: number;\n    step?: number;\n    showValue?: boolean;\n    showTicks?: boolean;\n    orientation?: 'horizontal' | 'vertical';\n  };\n}\n\nexport interface FileUploadFieldProps extends BaseFieldProps {\n  fileConfig?: {\n    accept?: string;\n    multiple?: boolean;\n    maxSize?: number;\n    maxFiles?: number;\n    allowedTypes?: string[];\n    uploadUrl?: string;\n    onUpload?: (files: File[]) => Promise<string[]>;\n  };\n}\n\nexport interface LocationPickerFieldProps extends BaseFieldProps {\n  locationConfig?: LocationConfig;\n}\n\nexport interface DurationPickerFieldProps extends BaseFieldProps {\n  durationConfig?: DurationConfig;\n}\n\nexport interface AutocompleteFieldProps extends BaseFieldProps {\n  autocompleteConfig?: AutocompleteConfig;\n}\n\nexport interface MaskedInputFieldProps extends BaseFieldProps {\n  maskedConfig?: MaskedInputConfig;\n}\n\nexport interface ColorPickerFieldProps extends BaseFieldProps {\n  colorConfig?: {\n    format?: 'hex' | 'rgb' | 'hsl';\n    showAlpha?: boolean;\n    presetColors?: string[];\n    allowCustom?: boolean;\n  };\n}\n\nexport interface RatingFieldProps extends BaseFieldProps {\n  ratingConfig?: {\n    max?: number;\n    allowHalf?: boolean;\n    allowClear?: boolean;\n    icon?: 'star' | 'heart' | 'thumbs' | React.ComponentType;\n    size?: 'sm' | 'md' | 'lg' | 'small' | 'medium' | 'large';\n    showValue?: boolean;\n  };\n}\n\nexport interface PhoneFieldProps extends BaseFieldProps {\n  phoneConfig?: {\n    defaultCountry?: string;\n    preferredCountries?: string[];\n    onlyCountries?: string[];\n    excludeCountries?: string[];\n    format?: 'national' | 'international';\n  };\n}\n\n// Union type for all possible field component props - using intersection for flexibility\nexport type FieldComponentProps = BaseFieldProps & {\n  // Optional props that specific field types might need\n  options?: FieldOptions;\n  arrayConfig?: ArrayFieldProps['arrayConfig'];\n  type?: TextFieldProps['type'];\n  datalist?: string[];\n  dateConfig?: DateFieldProps['dateConfig'];\n  sliderConfig?: SliderFieldProps['sliderConfig'];\n  fileConfig?: FileUploadFieldProps['fileConfig'];\n  locationConfig?: LocationPickerFieldProps['locationConfig'];\n  durationConfig?: DurationPickerFieldProps['durationConfig'];\n  autocompleteConfig?: AutocompleteFieldProps['autocompleteConfig'];\n  maskedConfig?: MaskedInputFieldProps['maskedConfig'];\n  colorConfig?: ColorPickerFieldProps['colorConfig'];\n  ratingConfig?: RatingFieldProps['ratingConfig'];\n  phoneConfig?: PhoneFieldProps['phoneConfig'];\n  // Legacy support for existing configurations\n  multiSelectConfig?: {\n    maxSelections?: number;\n    searchable?: boolean;\n    creatable?: boolean;\n    placeholder?: string;\n    noOptionsText?: string;\n    loadingText?: string;\n  };\n  maskedInputConfig?: MaskedInputConfig;\n  // Allow additional props for extensibility\n  [key: string]: unknown;\n};\n\n// Cross-field validation configuration\nexport interface CrossFieldValidation<TFormValues = Record<string, unknown>> {\n  fields: (keyof TFormValues)[];\n  validator: (values: Partial<TFormValues>) => string | null;\n  message: string;\n}\n\n// Async validation configuration\nexport interface AsyncValidation {\n  validator: (value: unknown) => Promise<string | null>;\n  debounceMs?: number;\n  loadingMessage?: string;\n}\n\n// Form analytics and tracking configuration\nexport interface FormAnalytics {\n  onFieldFocus?: (fieldName: string, timestamp: number) => void;\n  onFieldBlur?: (fieldName: string, timeSpent: number) => void;\n  onFormAbandon?: (completionPercentage: number) => void;\n  onPageChange?: (fromPage: number, toPage: number, timeSpent: number) => void;\n  onFieldChange?: (fieldName: string, value: unknown, timestamp: number) => void;\n  onFormComplete?: (timeSpent: number, formData: unknown) => void;\n}\n\n// Layout configuration for forms\nexport interface LayoutConfig {\n  type: 'grid' | 'flex' | 'tabs' | 'accordion' | 'stepper';\n  columns?: number;\n  gap?: string;\n  responsive?: boolean;\n  className?: string;\n}\n\n// Conditional sections configuration\nexport interface ConditionalSection<TFormValues = Record<string, unknown>> {\n  condition: (values: TFormValues) => boolean;\n  fields: string[];\n  layout?: LayoutConfig;\n}\n\n// Location picker configuration\nexport interface LocationConfig {\n  apiKey?: string;\n  defaultLocation?: { lat: number; lng: number };\n  zoom?: number;\n  searchPlaceholder?: string;\n  enableSearch?: boolean;\n  enableGeolocation?: boolean;\n  mapProvider?: 'google' | 'openstreetmap';\n}\n\n// Duration picker configuration\nexport interface DurationConfig {\n  format?: 'hms' | 'hm' | 'ms' | 'hours' | 'minutes' | 'seconds';\n  maxHours?: number;\n  maxMinutes?: number;\n  maxSeconds?: number;\n  showLabels?: boolean;\n  allowNegative?: boolean;\n}\n\n// Autocomplete configuration\nexport interface AutocompleteConfig {\n  options?: string[] | { value: string; label: string }[];\n  asyncOptions?: (query: string) => Promise<string[] | { value: string; label: string }[]>;\n  debounceMs?: number;\n  minChars?: number;\n  maxResults?: number;\n  allowCustom?: boolean;\n  placeholder?: string;\n  noOptionsText?: string;\n  loadingText?: string;\n}\n\n// Masked input configuration\nexport interface MaskedInputConfig {\n  mask: string | ((value: string) => string);\n  placeholder?: string;\n  showMask?: boolean;\n  guide?: boolean;\n  keepCharPositions?: boolean;\n  pipe?: (conformedValue: string, config: unknown) => false | string | { value: string; indexesOfPipedChars: number[] };\n} ",
      "type": "registry:hook",
      "target": "lib/formedible/types.ts"
    },
    {
      "path": "src/components/fields/array-field.tsx",
      "content": "'use client';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport { Plus, Trash2, GripVertical } from 'lucide-react';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\nimport { TextField } from './text-field';\nimport { NumberField } from './number-field';\nimport { TextareaField } from './textarea-field';\nimport { SelectField } from './select-field';\nimport { CheckboxField } from './checkbox-field';\nimport { SwitchField } from './switch-field';\nimport { DateField } from './date-field';\nimport { SliderField } from './slider-field';\nimport { FileUploadField } from './file-upload-field';\n\n// Map of field types to components\nconst fieldTypeComponents: Record<string, React.ComponentType<any>> = {\n  text: TextField,\n  email: TextField,\n  password: TextField,\n  url: TextField,\n  tel: TextField,\n  number: NumberField,\n  textarea: TextareaField,\n  select: SelectField,\n  checkbox: CheckboxField,\n  switch: SwitchField,\n  date: DateField,\n  slider: SliderField,\n  file: FileUploadField,\n};\n\nexport interface ArrayFieldSpecificProps extends BaseFieldProps {\n  arrayConfig: {\n    itemType: string;\n    itemLabel?: string;\n    itemPlaceholder?: string;\n    itemValidation?: unknown;\n    minItems?: number;\n    maxItems?: number;\n    addButtonLabel?: string;\n    removeButtonLabel?: string;\n    itemComponent?: React.ComponentType<any>;\n    sortable?: boolean;\n    defaultValue?: unknown;\n    // Additional props to pass to item components\n    itemProps?: Record<string, unknown>;\n  };\n}\n\nexport const ArrayField: React.FC<ArrayFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  wrapperClassName,\n  labelClassName,\n  arrayConfig,\n}) => {\n  const { name, state, handleChange, handleBlur } = fieldApi;\n  const value = useMemo(() => (state.value as unknown[]) || [], [state.value]);\n  \n  const {\n    itemType,\n    itemLabel,\n    itemPlaceholder,\n    minItems = 0,\n    maxItems = 10,\n    addButtonLabel = \"Add Item\",\n    removeButtonLabel = \"Remove\",\n    itemComponent: CustomItemComponent,\n    sortable = false,\n    defaultValue = '',\n    itemProps = {},\n  } = arrayConfig || {};\n\n  // Get the component for rendering items\n  const ItemComponent = CustomItemComponent || fieldTypeComponents[itemType || 'text'] || TextField;\n\n  const addItem = useCallback(() => {\n    if (value.length >= maxItems) return;\n    \n    const newValue = [...value, defaultValue];\n    handleChange(newValue);\n  }, [value, maxItems, defaultValue, handleChange]);\n\n  const removeItem = useCallback((index: number) => {\n    if (value.length <= minItems) return;\n    \n    const newValue = value.filter((_, i) => i !== index);\n    handleChange(newValue);\n    handleBlur();\n  }, [value, minItems, handleChange, handleBlur]);\n\n  const updateItem = useCallback((index: number, newItemValue: unknown) => {\n    const newValue = [...value];\n    newValue[index] = newItemValue;\n    handleChange(newValue);\n  }, [value, handleChange]);\n\n  const moveItem = useCallback((fromIndex: number, toIndex: number) => {\n    if (!sortable) return;\n    if (fromIndex === toIndex) return;\n    \n    const newValue = [...value];\n    const [movedItem] = newValue.splice(fromIndex, 1);\n    newValue.splice(toIndex, 0, movedItem);\n    handleChange(newValue);\n  }, [value, handleChange, sortable]);\n\n  const [draggedIndex, setDraggedIndex] = useState<number | null>(null);\n\n\n\n  // Create a mock field API for each item\n  const createItemFieldApi = useCallback((index: number) => {\n    return {\n      name: `${name}[${index}]`,\n      state: {\n        value: value[index],\n        meta: {\n          errors: [],\n          isTouched: false,\n          isValidating: false,\n        },\n      },\n      handleChange: (newValue: unknown) => updateItem(index, newValue),\n      handleBlur: () => handleBlur(),\n      form: fieldApi.form,\n    };\n  }, [name, value, updateItem, handleBlur, fieldApi.form]);\n\n  const canAddMore = value.length < maxItems;\n  const canRemove = value.length > minItems;\n\n  return (\n    <div className={cn(\"space-y-4\", wrapperClassName)}>\n      {label && (\n        <Label className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n          {value.length > 0 && (\n            <span className=\"ml-2 text-xs text-muted-foreground\">\n              ({value.length}{maxItems < Infinity ? `/${maxItems}` : ''} items)\n            </span>\n          )}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      \n      <div className=\"space-y-3\">\n        {value.map((_, index) => (\n          <div\n            key={index}\n            className=\"flex items-start gap-2 p-3 border rounded-lg bg-card\"\n            onDragOver={sortable ? (e) => {\n              e.preventDefault();\n              e.dataTransfer.dropEffect = 'move';\n            } : undefined}\n            onDrop={sortable ? (e) => {\n              e.preventDefault();\n              if (draggedIndex !== null && draggedIndex !== index) {\n                moveItem(draggedIndex, index);\n              }\n            } : undefined}\n          >\n            {sortable && (\n              <button\n                type=\"button\"\n                className=\"mt-2 p-1 hover:bg-muted rounded cursor-grab active:cursor-grabbing\"\n                draggable\n                onDragStart={(e) => {\n                  setDraggedIndex(index);\n                  e.dataTransfer.effectAllowed = 'move';\n                }}\n                onDragEnd={() => {\n                  setDraggedIndex(null);\n                }}\n              >\n                <GripVertical className=\"h-4 w-4 text-muted-foreground\" />\n              </button>\n            )}\n            \n            <div className=\"flex-1\">\n              <ItemComponent\n                fieldApi={createItemFieldApi(index)}\n                label={itemLabel ? `${itemLabel} ${index + 1}` : undefined}\n                placeholder={itemPlaceholder}\n                wrapperClassName=\"mb-0\"\n                {...itemProps}\n                // Pass specific props based on item type\n                {...(itemType === 'select' && { options: itemProps.options || [] })}\n                {...(itemType === 'number' && { \n                  min: itemProps.min, \n                  max: itemProps.max, \n                  step: itemProps.step \n                })}\n                {...(itemType === 'slider' && { \n                  min: itemProps.min, \n                  max: itemProps.max, \n                  step: itemProps.step \n                })}\n                {...(itemType === 'file' && { \n                  accept: itemProps.accept,\n                  multiple: itemProps.multiple \n                })}\n                {...(itemType === 'date' && typeof itemProps.dateProps === 'object' && itemProps.dateProps ? itemProps.dateProps : {})}\n                {...(['text', 'email', 'password', 'url', 'tel'].includes(itemType) && {\n                  type: itemType,\n                  datalist: itemProps.datalist,\n                })}\n              />\n            </div>\n            \n            {canRemove && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => removeItem(index)}\n                className=\"mt-2 h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                title={removeButtonLabel}\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        ))}\n        \n        {value.length === 0 && (\n          <div className=\"text-center py-8 text-muted-foreground border-2 border-dashed rounded-lg\">\n            <p className=\"text-sm\">No items added yet</p>\n            <p className=\"text-xs mt-1\">Click &quot;{addButtonLabel}&quot; to add your first item</p>\n          </div>\n        )}\n      </div>\n      \n      {canAddMore && (\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={addItem}\n          className=\"w-full\"\n          disabled={fieldApi.form.state.isSubmitting}\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          {addButtonLabel}\n        </Button>\n      )}\n      \n      {minItems > 0 && value.length < minItems && (\n        <p className=\"text-xs text-muted-foreground\">\n          Minimum {minItems} item{minItems !== 1 ? 's' : ''} required\n        </p>\n      )}\n      \n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}; ",
      "type": "registry:component",
      "target": "components/formedible/fields/array-field.tsx"
    },
    {
      "path": "src/components/fields/autocomplete-field.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport type { BaseFieldProps } from \"@/lib/formedible/types\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface AutocompleteOption {\n  value: string;\n  label: string;\n}\n\ninterface AutocompleteFieldProps extends BaseFieldProps {\n  autocompleteConfig?: {\n    options?: string[] | AutocompleteOption[];\n    asyncOptions?: (query: string) => Promise<string[] | AutocompleteOption[]>;\n    debounceMs?: number;\n    minChars?: number;\n    maxResults?: number;\n    allowCustom?: boolean;\n    placeholder?: string;\n    noOptionsText?: string;\n    loadingText?: string;\n  };\n}\n\nexport const AutocompleteField: React.FC<AutocompleteFieldProps> = ({\n  fieldApi,\n  label,\n  description,\n  placeholder,\n  wrapperClassName,\n  labelClassName,\n  inputClassName,\n  autocompleteConfig = {},\n}) => {\n  const {\n    options = [],\n    asyncOptions,\n    debounceMs = 300,\n    minChars = 1,\n    maxResults = 10,\n    allowCustom = true,\n    noOptionsText = \"No options found\",\n    loadingText = \"Loading...\"\n  } = autocompleteConfig;\n\n  const [inputValue, setInputValue] = useState(fieldApi.state.value || \"\");\n  const [filteredOptions, setFilteredOptions] = useState<AutocompleteOption[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [highlightedIndex, setHighlightedIndex] = useState(-1);\n  \n  const inputRef = useRef<HTMLInputElement>(null);\n  const listRef = useRef<HTMLDivElement>(null);\n  const debounceRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  // Normalize options to consistent format\n  const normalizeOptions = (opts: string[] | AutocompleteOption[]): AutocompleteOption[] => {\n    return opts.map(opt => \n      typeof opt === 'string' ? { value: opt, label: opt } : opt\n    );\n  };\n\n  // Filter static options\n  const filterStaticOptions = React.useCallback((query: string): AutocompleteOption[] => {\n    if (!query || query.length < minChars) return [];\n    \n    const normalizedOptions = normalizeOptions(options);\n    return normalizedOptions\n      .filter(option => \n        option.label.toLowerCase().includes(query.toLowerCase()) ||\n        option.value.toLowerCase().includes(query.toLowerCase())\n      )\n      .slice(0, maxResults);\n  }, [minChars, options, maxResults]);\n\n  // Handle async options\n  const fetchAsyncOptions = React.useCallback(async (query: string) => {\n    if (!asyncOptions || query.length < minChars) return;\n\n    setIsLoading(true);\n    try {\n      const results = await asyncOptions(query);\n      const normalizedResults = normalizeOptions(results);\n      setFilteredOptions(normalizedResults.slice(0, maxResults));\n    } catch (error) {\n      console.error('Autocomplete async options error:', error);\n      setFilteredOptions([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [asyncOptions, minChars, maxResults]);\n\n  // Debounced search\n  useEffect(() => {\n    if (debounceRef.current) {\n      clearTimeout(debounceRef.current);\n    }\n\n    debounceRef.current = setTimeout(() => {\n      if (asyncOptions) {\n        fetchAsyncOptions(inputValue);\n      } else {\n        setFilteredOptions(filterStaticOptions(inputValue));\n      }\n    }, debounceMs);\n\n    return () => {\n      if (debounceRef.current) {\n        clearTimeout(debounceRef.current);\n      }\n    };\n  }, [inputValue, asyncOptions, debounceMs, fetchAsyncOptions, filterStaticOptions]);\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setInputValue(value);\n    setIsOpen(true);\n    setHighlightedIndex(-1);\n    \n    if (allowCustom) {\n      fieldApi.handleChange(value);\n    }\n  };\n\n  // Handle option selection\n  const handleOptionSelect = (option: AutocompleteOption) => {\n    setInputValue(option.label);\n    fieldApi.handleChange(option.value);\n    setIsOpen(false);\n    setHighlightedIndex(-1);\n    inputRef.current?.blur();\n  };\n\n  // Handle keyboard navigation\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!isOpen) {\n      if (e.key === 'ArrowDown' || e.key === 'Enter') {\n        setIsOpen(true);\n        return;\n      }\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setHighlightedIndex(prev => \n          prev < filteredOptions.length - 1 ? prev + 1 : prev\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setHighlightedIndex(prev => prev > 0 ? prev - 1 : -1);\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (highlightedIndex >= 0 && filteredOptions[highlightedIndex]) {\n          handleOptionSelect(filteredOptions[highlightedIndex]);\n        } else if (allowCustom && inputValue) {\n          fieldApi.handleChange(inputValue);\n          setIsOpen(false);\n        }\n        break;\n      case 'Escape':\n        setIsOpen(false);\n        setHighlightedIndex(-1);\n        inputRef.current?.blur();\n        break;\n    }\n  };\n\n  // Handle focus/blur\n  const handleFocus = () => {\n    if (inputValue.length >= minChars) {\n      setIsOpen(true);\n    }\n  };\n\n  const handleBlur = () => {\n    // Delay closing to allow option clicks\n    setTimeout(() => {\n      if (!listRef.current?.contains(document.activeElement)) {\n        setIsOpen(false);\n        setHighlightedIndex(-1);\n      }\n    }, 150);\n  };\n\n  // Scroll highlighted option into view\n  useEffect(() => {\n    if (highlightedIndex >= 0 && listRef.current) {\n      const highlightedElement = listRef.current.children[highlightedIndex] as HTMLElement;\n      if (highlightedElement) {\n        highlightedElement.scrollIntoView({\n          block: 'nearest',\n          behavior: 'smooth'\n        });\n      }\n    }\n  }, [highlightedIndex]);\n\n  const showDropdown = isOpen && (filteredOptions.length > 0 || isLoading || (inputValue.length >= minChars && !isLoading));\n\n  return (\n    <div className={cn(\"space-y-2\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name} className={labelClassName}>\n          {label}\n        </Label>\n      )}\n      \n      {description && (\n        <p className=\"text-sm text-muted-foreground\">{description}</p>\n      )}\n\n      <div className=\"relative\">\n        <Input\n          ref={inputRef}\n          id={fieldApi.name}\n          name={fieldApi.name}\n          value={inputValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder || autocompleteConfig.placeholder || \"Type to search...\"}\n          className={cn(inputClassName, isOpen && \"rounded-b-none\")}\n          autoComplete=\"off\"\n        />\n\n        {showDropdown && (\n          <Card className=\"absolute top-full left-0 right-0 z-50 max-h-60 overflow-y-auto border-t-0 rounded-t-none\">\n            <div ref={listRef} className=\"p-1\">\n              {isLoading && (\n                <div className=\"px-3 py-2 text-sm text-muted-foreground\">\n                  {loadingText}\n                </div>\n              )}\n              \n              {!isLoading && filteredOptions.length === 0 && inputValue.length >= minChars && (\n                <div className=\"px-3 py-2 text-sm text-muted-foreground\">\n                  {noOptionsText}\n                  {allowCustom && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"ml-2 h-auto p-1 text-xs\"\n                      onClick={() => {\n                        fieldApi.handleChange(inputValue);\n                        setIsOpen(false);\n                      }}\n                    >\n                      Use \"{inputValue}\"\n                    </Button>\n                  )}\n                </div>\n              )}\n              \n              {!isLoading && filteredOptions.map((option, index) => (\n                <button\n                  key={`${option.value}-${index}`}\n                  type=\"button\"\n                  className={cn(\n                    \"w-full text-left px-3 py-2 text-sm rounded-sm transition-colors\",\n                    \"hover:bg-muted focus:bg-muted focus:outline-none\",\n                    highlightedIndex === index && \"bg-muted\"\n                  )}\n                  onClick={() => handleOptionSelect(option)}\n                  onMouseEnter={() => setHighlightedIndex(index)}\n                >\n                  <div className=\"font-medium\">{option.label}</div>\n                  {option.value !== option.label && (\n                    <div className=\"text-xs text-muted-foreground\">{option.value}</div>\n                  )}\n                </button>\n              ))}\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {fieldApi.state.meta.errors && fieldApi.state.meta.errors.length > 0 && (\n        <p className=\"text-sm text-destructive\">\n          {fieldApi.state.meta.errors[0]}\n        </p>\n      )}\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/formedible/fields/autocomplete-field.tsx"
    },
    {
      "path": "src/components/fields/checkbox-field.tsx",
      "content": "import React from 'react';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport const CheckboxField: React.FC<BaseFieldProps> = ({\n  fieldApi,\n  label,\n  description,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={fieldApi.name}\n          checked={!!fieldApi.state.value}\n          onCheckedChange={(checked) => fieldApi.handleChange(Boolean(checked))}\n          onBlur={fieldApi.handleBlur}\n          disabled={fieldApi.form.state.isSubmitting}\n          aria-describedby={description ? `${fieldApi.name}-description` : undefined}\n        />\n        {label && (\n          <Label htmlFor={fieldApi.name} className={cn(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\", labelClassName)}>\n            {label}\n          </Label>\n        )}\n      </div>\n      {description && <p id={`${fieldApi.name}-description`} className=\"text-xs text-muted-foreground\">{description}</p>}\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: string, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/formedible/fields/checkbox-field.tsx"
    },
    {
      "path": "src/components/fields/color-picker-field.tsx",
      "content": "'use client';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Palette, Check } from 'lucide-react';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport interface ColorPickerFieldSpecificProps extends BaseFieldProps {\n  colorConfig?: {\n    format?: 'hex' | 'rgb' | 'hsl';\n    showPreview?: boolean;\n    presetColors?: string[];\n    allowCustom?: boolean;\n  };\n}\n\nconst DEFAULT_PRESETS = [\n  '#FF0000', '#FF8000', '#FFFF00', '#80FF00', '#00FF00', '#00FF80',\n  '#00FFFF', '#0080FF', '#0000FF', '#8000FF', '#FF00FF', '#FF0080',\n  '#000000', '#404040', '#808080', '#C0C0C0', '#FFFFFF', '#8B4513'\n];\n\n// Color conversion utilities\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n};\n\n\n\nconst hexToHsl = (hex: string): { h: number; s: number; l: number } | null => {\n  const rgb = hexToRgb(hex);\n  if (!rgb) return null;\n  \n  const { r, g, b } = rgb;\n  const rNorm = r / 255;\n  const gNorm = g / 255;\n  const bNorm = b / 255;\n  \n  const max = Math.max(rNorm, gNorm, bNorm);\n  const min = Math.min(rNorm, gNorm, bNorm);\n  const diff = max - min;\n  \n  let h = 0;\n  let s = 0;\n  const l = (max + min) / 2;\n  \n  if (diff !== 0) {\n    s = l > 0.5 ? diff / (2 - max - min) : diff / (max + min);\n    \n    switch (max) {\n      case rNorm:\n        h = (gNorm - bNorm) / diff + (gNorm < bNorm ? 6 : 0);\n        break;\n      case gNorm:\n        h = (bNorm - rNorm) / diff + 2;\n        break;\n      case bNorm:\n        h = (rNorm - gNorm) / diff + 4;\n        break;\n    }\n    h /= 6;\n  }\n  \n  return {\n    h: Math.round(h * 360),\n    s: Math.round(s * 100),\n    l: Math.round(l * 100)\n  };\n};\n\nconst formatColor = (hex: string, format: 'hex' | 'rgb' | 'hsl'): string => {\n  switch (format) {\n    case 'rgb': {\n      const rgb = hexToRgb(hex);\n      return rgb ? `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})` : hex;\n    }\n    case 'hsl': {\n      const hsl = hexToHsl(hex);\n      return hsl ? `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)` : hex;\n    }\n    default:\n      return hex;\n  }\n};\n\nexport const ColorPickerField: React.FC<ColorPickerFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  colorConfig = {},\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  const {\n    format = 'hex',\n    showPreview = true,\n    presetColors = DEFAULT_PRESETS,\n    allowCustom = true,\n  } = colorConfig;\n\n  const { state, handleChange, handleBlur } = fieldApi;\n  const value = (state.value as string) || '#000000';\n  \n  const [isOpen, setIsOpen] = useState(false);\n  const [customInput, setCustomInput] = useState(value);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const colorInputRef = useRef<HTMLInputElement>(null);\n\n  // Ensure value is always a valid hex color\n  const normalizedValue = value.startsWith('#') ? value : `#${value}`;\n  const displayValue = formatColor(normalizedValue, format);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const handleColorSelect = (color: string) => {\n    const formattedColor = formatColor(color, format);\n    handleChange(formattedColor);\n    setCustomInput(color);\n    setIsOpen(false);\n    handleBlur();\n  };\n\n  const handleCustomInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    setCustomInput(inputValue);\n    \n    // Validate and update if it's a valid color\n    if (inputValue.match(/^#[0-9A-Fa-f]{6}$/)) {\n      const formattedColor = formatColor(inputValue, format);\n      handleChange(formattedColor);\n    }\n  };\n\n  const handleNativeColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const color = e.target.value;\n    const formattedColor = formatColor(color, format);\n    handleChange(formattedColor);\n    setCustomInput(color);\n  };\n\n  const isValidColor = (color: string): boolean => {\n    return /^#[0-9A-Fa-f]{6}$/.test(color);\n  };\n\n  return (\n    <div className={cn(\"relative space-y-2\", wrapperClassName)} ref={containerRef}>\n      {label && (\n        <Label className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <div className=\"flex gap-2\">\n        {/* Color preview and trigger */}\n        <div className=\"relative\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            className={cn(\n              \"w-12 h-10 p-0 border-2\",\n              state.meta.errors.length ? \"border-destructive\" : \"\",\n              inputClassName\n            )}\n            onClick={() => setIsOpen(!isOpen)}\n            disabled={fieldApi.form.state.isSubmitting}\n            style={{ backgroundColor: normalizedValue }}\n          >\n            {!showPreview && <Palette className=\"h-4 w-4\" />}\n          </Button>\n          \n          {/* Native color input (hidden) */}\n          <input\n            ref={colorInputRef}\n            type=\"color\"\n            value={normalizedValue}\n            onChange={handleNativeColorChange}\n            className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n            disabled={fieldApi.form.state.isSubmitting}\n          />\n        </div>\n\n        {/* Color value input */}\n        <Input\n          value={displayValue}\n          onChange={(e) => {\n            const inputValue = e.target.value;\n            handleChange(inputValue);\n            // Try to extract hex value for internal use\n            if (inputValue.startsWith('#')) {\n              setCustomInput(inputValue);\n            }\n          }}\n          onBlur={handleBlur}\n          placeholder={format === 'hex' ? '#000000' : format === 'rgb' ? 'rgb(0, 0, 0)' : 'hsl(0, 0%, 0%)'}\n          className={cn(\n            \"flex-1\",\n            state.meta.errors.length ? \"border-destructive\" : \"\"\n          )}\n          disabled={fieldApi.form.state.isSubmitting}\n        />\n      </div>\n\n      {/* Color picker dropdown */}\n      {isOpen && (\n        <div className=\"absolute z-50 mt-1 p-4 bg-popover border rounded-md shadow-lg w-64\">\n          {/* Preset colors */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium mb-2\">Preset Colors</h4>\n            <div className=\"grid grid-cols-6 gap-2\">\n              {presetColors.map((color, index) => (\n                <button\n                  key={index}\n                  type=\"button\"\n                  className={cn(\n                    \"w-8 h-8 rounded border-2 hover:scale-110 transition-transform\",\n                    normalizedValue.toLowerCase() === color.toLowerCase() \n                      ? \"border-primary ring-2 ring-primary ring-offset-2\" \n                      : \"border-muted hover:border-primary\"\n                  )}\n                  style={{ backgroundColor: color }}\n                  onClick={() => handleColorSelect(color)}\n                  title={color}\n                >\n                  {normalizedValue.toLowerCase() === color.toLowerCase() && (\n                    <Check className=\"h-4 w-4 text-white drop-shadow-lg\" />\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Custom color input */}\n          {allowCustom && (\n            <div>\n              <h4 className=\"text-sm font-medium mb-2\">Custom Color</h4>\n              <div className=\"flex gap-2\">\n                <Input\n                  value={customInput}\n                  onChange={handleCustomInputChange}\n                  placeholder=\"#000000\"\n                  className=\"flex-1 text-xs\"\n                />\n                <Button\n                  type=\"button\"\n                  size=\"sm\"\n                  onClick={() => handleColorSelect(customInput)}\n                  disabled={!isValidColor(customInput)}\n                >\n                  Apply\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}; ",
      "type": "registry:component",
      "target": "components/formedible/fields/color-picker-field.tsx"
    },
    {
      "path": "src/components/fields/date-field.tsx",
      "content": "import React from 'react';\nimport { format, parseISO } from 'date-fns';\nimport { Calendar as CalendarIcon } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Label } from '@/components/ui/label';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport const DateField: React.FC<BaseFieldProps> = ({\n  fieldApi,\n  label,\n  placeholder = \"Pick a date\",\n  description,\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const selectedDate = fieldApi.state.value\n    ? fieldApi.state.value instanceof Date\n      ? fieldApi.state.value\n      : typeof fieldApi.state.value === 'string'\n        ? parseISO(fieldApi.state.value)\n        : undefined\n    : undefined;\n\n  const handleDateSelect = (date: Date | undefined) => {\n    fieldApi.handleChange(date);\n    fieldApi.handleBlur();\n    setIsOpen(false);\n  };\n\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name + \"-trigger\"} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            id={fieldApi.name + \"-trigger\"}\n            variant={\"outline\"}\n            className={cn(\n              \"w-full justify-start text-left font-normal\",\n              !selectedDate && \"text-muted-foreground\",\n              inputClassName,\n              fieldApi.state.meta.errors.length ? \"border-destructive\" : \"\"\n            )}\n            disabled={fieldApi.form.state.isSubmitting}\n            onBlur={fieldApi.handleBlur}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {selectedDate ? format(selectedDate, \"PPP\") : <span>{placeholder}</span>}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\">\n          <Calendar\n            mode=\"single\"\n            selected={selectedDate}\n            onSelect={handleDateSelect}\n            initialFocus\n            disabled={fieldApi.form.state.isSubmitting}\n          />\n        </PopoverContent>\n      </Popover>\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: string, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/formedible/fields/date-field.tsx"
    },
    {
      "path": "src/components/fields/duration-picker-field.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport type { BaseFieldProps } from \"@/lib/formedible/types\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DurationValue {\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n  totalSeconds?: number;\n}\n\ninterface DurationPickerFieldProps extends BaseFieldProps {\n  durationConfig?: {\n    format?: 'hms' | 'hm' | 'ms' | 'hours' | 'minutes' | 'seconds';\n    maxHours?: number;\n    maxMinutes?: number;\n    maxSeconds?: number;\n    showLabels?: boolean;\n    allowNegative?: boolean;\n  };\n}\n\nexport const DurationPickerField: React.FC<DurationPickerFieldProps> = ({\n  fieldApi,\n  label,\n  description,\n  placeholder,\n  wrapperClassName,\n  labelClassName,\n  inputClassName,\n  durationConfig = {},\n}) => {\n  const {\n    format = 'hms',\n    maxHours = 23,\n    maxMinutes = 59,\n    maxSeconds = 59,\n    showLabels = true,\n    allowNegative: _allowNegative = false\n  } = durationConfig;\n\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n\n  // Initialize from field value\n  useEffect(() => {\n    const value = fieldApi.state.value;\n    if (value) {\n      if (typeof value === 'number') {\n        // Value is total seconds\n        const totalSeconds = Math.abs(value);\n        const newHours = Math.min(Math.floor(totalSeconds / 3600), maxHours);\n        const newMinutes = Math.min(Math.floor((totalSeconds % 3600) / 60), maxMinutes);\n        const newSeconds = Math.min(totalSeconds % 60, maxSeconds);\n        setHours(newHours);\n        setMinutes(newMinutes);\n        setSeconds(newSeconds);\n      } else if (typeof value === 'object') {\n        // Value is duration object\n        setHours(Math.min(value.hours || 0, maxHours));\n        setMinutes(Math.min(value.minutes || 0, maxMinutes));\n        setSeconds(Math.min(value.seconds || 0, maxSeconds));\n      }\n    }\n  }, [fieldApi.state.value, maxHours, maxMinutes, maxSeconds]);\n\n  // Update field value when duration changes\n  useEffect(() => {\n    const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n    const durationValue: DurationValue = {\n      hours,\n      minutes,\n      seconds,\n      totalSeconds\n    };\n\n    // Update field based on format\n    switch (format) {\n      case 'hours':\n        fieldApi.handleChange(hours + minutes / 60 + seconds / 3600);\n        break;\n      case 'minutes':\n        fieldApi.handleChange(hours * 60 + minutes + seconds / 60);\n        break;\n      case 'seconds':\n        fieldApi.handleChange(totalSeconds);\n        break;\n      default:\n        fieldApi.handleChange(durationValue);\n    }\n  }, [hours, minutes, seconds, format, fieldApi]);\n\n  const formatDuration = () => {\n    const parts = [];\n    if (format.includes('h') && hours > 0) parts.push(`${hours}h`);\n    if (format.includes('m') && minutes > 0) parts.push(`${minutes}m`);\n    if (format.includes('s') && seconds > 0) parts.push(`${seconds}s`);\n    return parts.join(' ') || '0';\n  };\n\n  const renderTimeInput = (\n    value: number,\n    onChange: (value: number) => void,\n    max: number,\n    unit: string,\n    show: boolean\n  ) => {\n    if (!show) return null;\n\n    return (\n      <div className=\"flex flex-col space-y-1\">\n        {showLabels && (\n          <Label className=\"text-xs text-muted-foreground capitalize\">\n            {unit}\n          </Label>\n        )}\n        <Select\n          value={value.toString()}\n          onValueChange={(val) => onChange(parseInt(val))}\n        >\n          <SelectTrigger className={cn(\"w-20\", inputClassName)}>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            {Array.from({ length: max + 1 }, (_, i) => (\n              <SelectItem key={i} value={i.toString()}>\n                {i.toString().padStart(2, '0')}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n    );\n  };\n\n  const renderManualInput = () => {\n    return (\n      <div className=\"space-y-2\">\n        <Input\n          id={fieldApi.name}\n          value={formatDuration()}\n          placeholder={placeholder || \"Enter duration (e.g., 1h 30m 45s)\"}\n          className={inputClassName}\n          onChange={(e) => {\n            const input = e.target.value;\n            // Parse manual input like \"1h 30m 45s\" or \"90m\" or \"3600s\"\n            const hourMatch = input.match(/(\\d+)h/i);\n            const minuteMatch = input.match(/(\\d+)m(?!s)/i); // Don't match 'ms'\n            const secondMatch = input.match(/(\\d+)s/i);\n            \n            const newHours = hourMatch ? Math.max(0, parseInt(hourMatch[1], 10)) : 0;\n            const newMinutes = minuteMatch ? Math.max(0, parseInt(minuteMatch[1], 10)) : 0;\n            const newSeconds = secondMatch ? Math.max(0, parseInt(secondMatch[1], 10)) : 0;\n            \n            if (newHours <= maxHours && newMinutes <= maxMinutes && newSeconds <= maxSeconds) {\n              setHours(newHours);\n              setMinutes(newMinutes);\n              setSeconds(newSeconds);\n            } else {\n              // Provide feedback for invalid input\n              console.warn('Duration values exceed maximum limits');\n            }\n          }}\n        />\n        <div className=\"text-xs text-muted-foreground\">\n          Format: {format === 'hms' ? '1h 30m 45s' : format === 'hm' ? '1h 30m' : format === 'ms' ? '30m 45s' : `${format} only`}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name} className={labelClassName}>\n          {label}\n        </Label>\n      )}\n      \n      {description && (\n        <p className=\"text-sm text-muted-foreground\">{description}</p>\n      )}\n\n      <div className=\"space-y-3\">\n        {/* Dropdown selectors */}\n        <div className=\"flex gap-3\">\n          {renderTimeInput(\n            hours,\n            setHours,\n            maxHours,\n            'hours',\n            format.includes('h')\n          )}\n          {renderTimeInput(\n            minutes,\n            setMinutes,\n            maxMinutes,\n            'minutes',\n            format.includes('m')\n          )}\n          {renderTimeInput(\n            seconds,\n            setSeconds,\n            maxSeconds,\n            'seconds',\n            format.includes('s')\n          )}\n        </div>\n\n        {/* Manual input alternative */}\n        {renderManualInput()}\n\n        {/* Duration display */}\n        <div className=\"text-sm text-muted-foreground\">\n          Total: {formatDuration()}\n          {format !== 'seconds' && ` (${hours * 3600 + minutes * 60 + seconds} seconds)`}\n        </div>\n      </div>\n\n      {fieldApi.state.meta.errors && fieldApi.state.meta.errors.length > 0 && (\n        <p className=\"text-sm text-destructive\">\n          {fieldApi.state.meta.errors[0]}\n        </p>\n      )}\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/formedible/fields/duration-picker-field.tsx"
    },
    {
      "path": "src/components/fields/field-help.tsx",
      "content": "'use client';\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { HelpCircle, ExternalLink, Info } from 'lucide-react';\n\ninterface FieldHelpProps {\n  help?: {\n    text?: string;\n    tooltip?: string;\n    position?: 'top' | 'bottom' | 'left' | 'right';\n    link?: { url: string; text: string };\n  };\n  className?: string;\n}\n\nexport const FieldHelp: React.FC<FieldHelpProps> = ({\n  help,\n  className,\n}) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  if (!help || (!help.text && !help.tooltip && !help.link)) {\n    return null;\n  }\n\n  const { text, tooltip, position = 'top', link } = help;\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      {/* Help text */}\n      {text && (\n        <div className=\"flex items-start gap-2 text-xs text-muted-foreground\">\n          <Info className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n          <p>{text}</p>\n        </div>\n      )}\n\n      {/* Tooltip trigger */}\n      {tooltip && (\n        <div className=\"relative inline-block\">\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-6 w-6 p-0 text-muted-foreground hover:text-foreground\"\n            onMouseEnter={() => setShowTooltip(true)}\n            onMouseLeave={() => setShowTooltip(false)}\n            onFocus={() => setShowTooltip(true)}\n            onBlur={() => setShowTooltip(false)}\n          >\n            <HelpCircle className=\"h-3 w-3\" />\n          </Button>\n\n          {/* Tooltip */}\n          {showTooltip && (\n            <div\n              className={cn(\n                \"absolute z-50 px-2 py-1 text-xs text-white bg-black rounded shadow-lg whitespace-nowrap\",\n                \"pointer-events-none\",\n                {\n                  'bottom-full left-1/2 -translate-x-1/2 mb-1': position === 'top',\n                  'top-full left-1/2 -translate-x-1/2 mt-1': position === 'bottom',\n                  'right-full top-1/2 -translate-y-1/2 mr-1': position === 'left',\n                  'left-full top-1/2 -translate-y-1/2 ml-1': position === 'right',\n                }\n              )}\n            >\n              {tooltip}\n              {/* Tooltip arrow */}\n              <div\n                className={cn(\n                  \"absolute w-0 h-0 border-2 border-transparent\",\n                  {\n                    'top-full left-1/2 -translate-x-1/2 border-t-black border-b-0': position === 'top',\n                    'bottom-full left-1/2 -translate-x-1/2 border-b-black border-t-0': position === 'bottom',\n                    'top-1/2 left-full -translate-y-1/2 border-l-black border-r-0': position === 'left',\n                    'top-1/2 right-full -translate-y-1/2 border-r-black border-l-0': position === 'right',\n                  }\n                )}\n              />\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Help link */}\n      {link && (\n        <div className=\"flex items-center gap-1\">\n          <Button\n            type=\"button\"\n            variant=\"link\"\n            size=\"sm\"\n            className=\"h-auto p-0 text-xs text-primary hover:text-primary/80\"\n            onClick={() => window.open(link.url, '_blank', 'noopener,noreferrer')}\n          >\n            {link.text}\n            <ExternalLink className=\"h-3 w-3 ml-1\" />\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}; ",
      "type": "registry:component",
      "target": "components/formedible/fields/field-help.tsx"
    },
    {
      "path": "src/components/fields/file-upload-field.tsx",
      "content": "import React from \"react\";\nimport type { AnyFieldApi } from \"@tanstack/react-form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { cn } from \"@/lib/utils\";\nimport { PaperclipIcon, XIcon, UploadCloudIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface FileUploadFieldProps {\n  fieldApi: AnyFieldApi;\n  label?: string;\n  accept?: string;\n  className?: string;\n  wrapperClassName?: string;\n  description?: string;\n}\n\nexport const FileUploadField: React.FC<FileUploadFieldProps> = ({\n  fieldApi,\n  label,\n  accept,\n  className,\n  wrapperClassName,\n  description,\n}) => {\n  const { name, state, handleChange, handleBlur } = fieldApi;\n  const file = state.value as File | null;\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0] ?? null;\n    handleChange(selectedFile);\n    handleBlur();\n  };\n\n  const handleRemoveFile = () => {\n    handleChange(null);\n    const inputElement = document.getElementById(name) as HTMLInputElement;\n    if (inputElement) {\n      inputElement.value = \"\";\n    }\n    handleBlur();\n  };\n\n  const triggerFileInput = () => {\n    const inputElement = document.getElementById(name) as HTMLInputElement;\n    inputElement?.click();\n  };\n\n  return (\n    <div\n      className={cn(\"space-y-1.5\", wrapperClassName)}\n    >\n      {label && (\n        <Label className=\"text-sm font-medium cursor-pointer\" onClick={triggerFileInput}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Input\n        id={name}\n        name={name}\n        type=\"file\"\n        accept={accept}\n        onChange={handleFileChange}\n        className=\"hidden\"\n      />\n      {file ? (\n        <div\n          className=\"flex items-center justify-between p-2.5 border rounded-lg bg-muted/40 shadow-sm hover:shadow-md transition-shadow\"\n        >\n          <div className=\"flex items-center gap-2 text-sm overflow-hidden\">\n            <PaperclipIcon className=\"h-5 w-5 text-primary shrink-0\" />\n            <span className=\"truncate\" title={file.name}>{file.name}</span>\n            <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n              ({(file.size / 1024).toFixed(1)} KB)\n            </span>\n          </div>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleRemoveFile}\n            className=\"h-7 w-7 text-destructive hover:bg-destructive/10 shrink-0\"\n            aria-label=\"Remove file\"\n          >\n            <XIcon className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ) : (\n        <button\n          type=\"button\"\n          onClick={triggerFileInput}\n          className={cn(\n            \"w-full flex flex-col items-center justify-center p-4 border-2 border-dashed rounded-lg hover:border-primary transition-colors cursor-pointer bg-background hover:bg-muted/50\",\n            className,\n            state.meta.errors.length ? \"border-destructive hover:border-destructive\" : \"border-muted-foreground/50\",\n          )}\n        >\n          <UploadCloudIcon className=\"h-8 w-8 text-muted-foreground mb-2\" />\n          <span className=\"text-sm font-medium text-muted-foreground\">\n            Click or drag and drop a file\n          </span>\n          {accept && <span className=\"text-xs text-muted-foreground/80 mt-1\">Accepted types: {accept}</span>}\n        </button>\n      )}\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/formedible/fields/file-upload-field.tsx"
    },
    {
      "path": "src/components/fields/inline-validation-wrapper.tsx",
      "content": "'use client';\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { cn } from '@/lib/utils';\nimport { Check, X, Loader2 } from 'lucide-react';\nimport type { AnyFieldApi } from '@tanstack/react-form';\n\n\ninterface InlineValidationWrapperProps {\n  children: React.ReactNode;\n  fieldApi: AnyFieldApi;\n  inlineValidation?: {\n    enabled?: boolean;\n    debounceMs?: number;\n    showSuccess?: boolean;\n    asyncValidator?: (value: unknown) => Promise<string | null>;\n  };\n  className?: string;\n}\n\nexport const InlineValidationWrapper: React.FC<InlineValidationWrapperProps> = ({\n  children,\n  fieldApi,\n  inlineValidation = {},\n  className,\n}) => {\n  const {\n    enabled = true,\n    debounceMs = 300,\n    showSuccess = true,\n    asyncValidator,\n  } = inlineValidation;\n\n  const [validationState, setValidationState] = useState<{\n    isValidating: boolean;\n    isValid: boolean | null;\n    message: string | null;\n  }>({\n    isValidating: false,\n    isValid: null,\n    message: null,\n  });\n\n  const { state } = fieldApi;\n  const value = state.value;\n  const hasErrors = state.meta.errors.length > 0;\n  const isTouched = state.meta.isTouched;\n\n  // Validation function\n  const validateValue = useCallback(async (currentValue: unknown) => {\n    if (!enabled || !asyncValidator) return;\n\n    setValidationState(prev => ({ ...prev, isValidating: true }));\n\n    try {\n      const result = await asyncValidator(currentValue);\n      \n      setValidationState({\n        isValidating: false,\n        isValid: result === null,\n        message: result,\n      });\n    } catch (error) {\n      setValidationState({\n        isValidating: false,\n        isValid: false,\n        message: error instanceof Error ? error.message : 'Validation failed',\n      });\n    }\n  }, [enabled, asyncValidator]);\n\n  // Debounced validation function\n  const debouncedValidate = useMemo(\n    () => debounce(validateValue, debounceMs),\n    [validateValue, debounceMs]\n  );\n\n  // Trigger validation when value changes\n  useEffect(() => {\n    if (enabled && isTouched && value !== undefined && value !== '') {\n      debouncedValidate(value);\n    } else {\n      setValidationState({\n        isValidating: false,\n        isValid: null,\n        message: null,\n      });\n    }\n  }, [value, isTouched, enabled, debouncedValidate]);\n\n  // Reset validation state when field is reset\n  useEffect(() => {\n    if (!isTouched) {\n      setValidationState({\n        isValidating: false,\n        isValid: null,\n        message: null,\n      });\n    }\n  }, [isTouched]);\n\n  const getValidationIcon = () => {\n    if (!enabled || !isTouched) return null;\n    \n    if (validationState.isValidating) {\n      return <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />;\n    }\n\n    if (hasErrors) {\n      return <X className=\"h-4 w-4 text-destructive\" />;\n    }\n\n    if (validationState.isValid === false) {\n      return <X className=\"h-4 w-4 text-destructive\" />;\n    }\n\n    if (showSuccess && validationState.isValid === true) {\n      return <Check className=\"h-4 w-4 text-green-500\" />;\n    }\n\n    if (showSuccess && !hasErrors && isTouched && value) {\n      return <Check className=\"h-4 w-4 text-green-500\" />;\n    }\n\n    return null;\n  };\n\n  const getValidationMessage = () => {\n    if (!enabled || !isTouched) return null;\n\n    // Show form validation errors first\n    if (hasErrors) {\n      return state.meta.errors[0];\n    }\n\n    // Show async validation message\n    if (validationState.message) {\n      return validationState.message;\n    }\n\n    return null;\n  };\n\n  const validationIcon = getValidationIcon();\n  const validationMessage = getValidationMessage();\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {/* Field with validation icon */}\n      <div className=\"relative\">\n        {children}\n        {validationIcon && (\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 pointer-events-none\">\n            {validationIcon}\n          </div>\n        )}\n      </div>\n      \n      {/* Validation message */}\n      {validationMessage && (\n        <div className={cn(\n          \"text-xs mt-1 flex items-center gap-1\",\n          hasErrors || validationState.isValid === false\n            ? \"text-destructive\"\n            : \"text-muted-foreground\"\n        )}>\n          {typeof validationMessage === 'string' \n            ? validationMessage \n            : (validationMessage as Error)?.message || 'Validation error'\n          }\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Debounce utility function\nfunction debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: ReturnType<typeof setTimeout>;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n} ",
      "type": "registry:component",
      "target": "components/formedible/fields/inline-validation-wrapper.tsx"
    },
    {
      "path": "src/components/fields/location-picker-field.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport type { BaseFieldProps } from \"@/lib/formedible/types\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\n\ninterface LocationValue {\n  lat: number;\n  lng: number;\n  address?: string;\n}\n\ninterface SearchResult extends LocationValue {\n  id: string | number;\n}\n\ninterface LocationPickerFieldProps extends BaseFieldProps {\n  locationConfig?: {\n    apiKey?: string;\n    defaultLocation?: { lat: number; lng: number };\n    zoom?: number;\n    searchPlaceholder?: string;\n    enableSearch?: boolean;\n    enableGeolocation?: boolean;\n    mapProvider?: 'google' | 'openstreetmap';\n  };\n}\n\nexport const LocationPickerField: React.FC<LocationPickerFieldProps> = ({\n  fieldApi,\n  label,\n  description,\n  placeholder,\n  wrapperClassName,\n  labelClassName,\n  inputClassName,\n  locationConfig = {},\n}) => {\n  const {\n    defaultLocation = { lat: 40.7128, lng: -74.0060 }, // NYC default\n    searchPlaceholder = \"Search for a location...\",\n    enableSearch = true,\n    enableGeolocation = true\n  } = locationConfig;\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);\n  const [showResults, setShowResults] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState<LocationValue | null>(\n    fieldApi.state.value || (defaultLocation ? { ...defaultLocation, address: \"Default Location\" } : null)\n  );\n  const mapRef = useRef<HTMLDivElement>(null);\n  const searchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const [geoError, setGeoError] = useState<string | null>(null);\n\n  const [manualLat, setManualLat] = useState('');\n  const [manualLng, setManualLng] = useState('');\n\n  const handleManualCoordinatesSubmit = () => {\n    const lat = parseFloat(manualLat);\n    const lng = parseFloat(manualLng);\n    if (!isNaN(lat) && !isNaN(lng)) {\n      const location: LocationValue = {\n        lat,\n        lng,\n        address: `${lat}, ${lng}`\n      };\n      handleLocationSelect(location);\n\n    } else {\n      alert(\"Invalid coordinates. Please enter valid numbers.\");\n    }\n  };\n\n  // Initialize map (simplified version without external dependencies)\n{/* Map placeholder */}\n<div ref={mapRef} className=\"w-full h-48 border rounded-md\">\n  {currentLocation ? (\n    <div className=\"w-full h-48 bg-muted rounded-md flex items-center justify-center text-muted-foreground\">\n      <div className=\"text-center\">\n        <div className=\"text-sm font-medium\">\n          Location: {currentLocation.lat.toFixed(4)}, {currentLocation.lng.toFixed(4)}\n        </div>\n        {currentLocation.address && (\n          <div className=\"text-xs mt-1\">{currentLocation.address}</div>\n        )}\n      </div>\n    </div>\n  ) : (\n    <div className=\"w-full h-full bg-muted rounded-md flex items-center justify-center text-muted-foreground\">\n      <div className=\"text-center\">\n        <div className=\"text-sm\">No location selected</div>\n        <div className=\"text-xs mt-1\">Search or use current location</div>\n      </div>\n    </div>\n  )}\n</div>\n\n  // Handle search with debouncing\n  useEffect(() => {\n    if (!enableSearch || !searchQuery.trim()) {\n      setSearchResults([]);\n      setShowResults(false);\n      return;\n    }\n\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    searchTimeoutRef.current = setTimeout(async () => {\n      setIsSearching(true);\n      try {\n        // Mock search results - in real implementation, this would call a geocoding API\n        const mockResults = [\n          {\n            id: 1,\n            address: `${searchQuery} Street, New York, NY`,\n            lat: 40.7128 + Math.random() * 0.01,\n            lng: -74.0060 + Math.random() * 0.01\n          },\n          {\n            id: 2,\n            address: `${searchQuery} Avenue, Brooklyn, NY`,\n            lat: 40.6782 + Math.random() * 0.01,\n            lng: -73.9442 + Math.random() * 0.01\n          }\n        ];\n        \n        setSearchResults(mockResults);\n        setShowResults(true);\n      } catch (error) {\n        console.error('Location search error:', error);\n        setSearchResults([]);\n      } finally {\n        setIsSearching(false);\n      }\n    }, 300);\n\n    return () => {\n      if (searchTimeoutRef.current) {\n        clearTimeout(searchTimeoutRef.current);\n      }\n    };\n  }, [searchQuery, enableSearch]);\n\n  const handleLocationSelect = (location: LocationValue) => {\n    setCurrentLocation(location);\n    fieldApi.handleChange(location);\n    setShowResults(false);\n    setSearchQuery(location.address || `${location.lat}, ${location.lng}`);\n  };\n\n  const handleGetCurrentLocation = () => {\n    if (!enableGeolocation || !navigator.geolocation) {\n      setGeoError('Geolocation is not supported by your browser');\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const location: LocationValue = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          address: \"Current Location\"\n        };\n        handleLocationSelect(location);\n        setGeoError(null);\n      },\n      (error) => {\n        const errorMessages: Record<number, string> = {\n          1: 'Location access denied. Please enable location permissions.',\n          2: 'Location unavailable. Please try again.',\n          3: 'Location request timed out. Please try again.'\n        };\n        setGeoError(errorMessages[error.code] || 'Failed to get location');\n      }\n    );\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name} className={labelClassName}>\n          {label}\n        </Label>\n      )}\n      \n      {description && (\n        <p className=\"text-sm text-muted-foreground\">{description}</p>\n      )}\n\n      <div className=\"space-y-3\">\n        {enableSearch && (\n          <div className=\"relative\">\n            <Input\n              id={fieldApi.name}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder={placeholder || searchPlaceholder}\n              className={inputClassName}\n              onFocus={() => searchResults.length > 0 && setShowResults(true)}\n            />\n            \n            {showResults && searchResults.length > 0 && (\n              <Card className=\"absolute top-full left-0 right-0 z-10 mt-1 max-h-48 overflow-y-auto\">\n                <div className=\"p-2\">\n                  {isSearching && (\n                    <div className=\"text-sm text-muted-foreground p-2\">\n                      Searching...\n                    </div>\n                  )}\n                  {searchResults.map((result) => (\n                    <button\n                      key={result.id}\n                      type=\"button\"\n                      className=\"w-full text-left p-2 hover:bg-muted rounded-sm text-sm\"\n                      onClick={() => handleLocationSelect({\n                        lat: result.lat,\n                        lng: result.lng,\n                        address: result.address\n                      })}\n                    >\n                      {result.address}\n                    </button>\n                  ))}\n                </div>\n              </Card>\n            )}\n          </div>\n        )}\n\n        <div className=\"flex gap-2\">\n          {enableGeolocation && (\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleGetCurrentLocation}\n            >\n              Use Current Location\n            </Button>\n          )}\n          \n          <Dialog>\n            <DialogTrigger asChild>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                Enter Coordinates\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Enter Coordinates</DialogTitle>\n                <DialogDescription>\n                  Enter the latitude and longitude.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"latitude\" className=\"text-right\">\n                    Latitude\n                  </Label>\n                  <Input id=\"latitude\" value={manualLat} onChange={(e) => setManualLat(e.target.value)} className=\"col-span-3\" />\n                </div>\n                <div className=\"grid grid-cols-4 items-center gap-4\">\n                  <Label htmlFor=\"longitude\" className=\"text-right\">\n                    Longitude\n                  </Label>\n                  <Input id=\"longitude\" value={manualLng} onChange={(e) => setManualLng(e.target.value)} className=\"col-span-3\" />\n                </div>\n              </div>\n              <DialogFooter>\n                <Button type=\"button\" onClick={handleManualCoordinatesSubmit}>Save changes</Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Map placeholder */}\n        <div ref={mapRef} className=\"w-full h-48 border rounded-md\">\n          {!currentLocation && (\n            <div className=\"w-full h-full bg-muted rounded-md flex items-center justify-center text-muted-foreground\">\n              <div className=\"text-center\">\n                <div className=\"text-sm\">No location selected</div>\n                <div className=\"text-xs mt-1\">Search or use current location</div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {currentLocation && (\n          <div className=\"text-sm text-muted-foreground\">\n            Selected: {currentLocation.address || `${currentLocation.lat}, ${currentLocation.lng}`}\n          </div>\n        )}\n      </div>\n\n      {geoError && (\n        <p className=\"text-sm text-destructive mt-2\">{geoError}</p>\n      )}\n\n      {fieldApi.state.meta.errors && fieldApi.state.meta.errors.length > 0 && (\n        <p className=\"text-sm text-destructive\">\n          {fieldApi.state.meta.errors[0]}\n        </p>\n      )}\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/formedible/fields/location-picker-field.tsx"
    },
    {
      "path": "src/components/fields/masked-input-field.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport type { BaseFieldProps } from \"@/lib/formedible/types\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MaskedInputFieldProps extends BaseFieldProps {\n  maskedInputConfig?: {\n    mask: string | ((value: string) => string);\n    placeholder?: string;\n    showMask?: boolean;\n    guide?: boolean;\n    keepCharPositions?: boolean;\n    pipe?: (conformedValue: string, config: unknown) => false | string | { value: string; indexesOfPipedChars: number[] };\n  };\n}\n\n// Common mask patterns\nconst MASK_PATTERNS = {\n  phone: '(000) 000-0000',\n  ssn: '000-00-0000',\n  creditCard: '0000 0000 0000 0000',\n  date: '00/00/0000',\n  time: '00:00',\n  zipCode: '00000',\n  zipCodeExtended: '00000-0000',\n  currency: '$0,000.00',\n};\n\nexport const MaskedInputField: React.FC<MaskedInputFieldProps> = ({\n  fieldApi,\n  label,\n  description,\n  placeholder,\n  wrapperClassName,\n  labelClassName,\n  inputClassName,\n  maskedInputConfig = {},\n}) => {\n  const {\n    mask = '',\n    showMask = false,\n    guide = true,\n\n    pipe\n  } = maskedInputConfig;\n\n  const [displayValue, setDisplayValue] = useState('');\n  const [rawValue, setRawValue] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Apply mask to value\n  const applyMask = React.useCallback((value: string): string => {\n    if (!mask) return value;\n\n    if (typeof mask === 'function') {\n      return mask(value);\n    }\n\n    // Handle string mask patterns\n    let maskedValue = '';\n    let digitIndex = 0;\n    let letterIndex = 0;\n    const cleanDigits = value.replace(/\\D/g, ''); // Extract digits\n    const cleanLetters = value.replace(/[^a-zA-Z]/g, ''); // Extract letters\n\n    for (let i = 0; i < mask.length; i++) {\n      const maskChar = mask[i];\n      \n      if (maskChar === '0' || maskChar === '9') {\n        // Digit placeholder\n        if (digitIndex < cleanDigits.length) {\n          maskedValue += cleanDigits[digitIndex];\n          digitIndex++;\n        } else if (guide && showMask) {\n          maskedValue += '_';\n        } else {\n          break; // Stop if no more digits and not showing guide\n        }\n      } else if (maskChar === 'A' || maskChar === 'a') {\n        // Letter placeholder\n        if (letterIndex < cleanLetters.length) {\n          const char = cleanLetters[letterIndex];\n          maskedValue += maskChar === 'A' ? char.toUpperCase() : char.toLowerCase();\n          letterIndex++;\n        } else if (guide && showMask) {\n          maskedValue += '_';\n        } else {\n          break; // Stop if no more letters and not showing guide\n        }\n      } else {\n        // Literal character\n        maskedValue += maskChar;\n      }\n    }\n\n    // Apply pipe function if provided\n    if (pipe) {\n      const piped = pipe(maskedValue, { mask, guide, showMask });\n      if (piped === false) {\n        return displayValue; // Reject the change\n      }\n      if (typeof piped === 'string') {\n        return piped;\n      }\n      if (piped && typeof piped === 'object' && piped.value) {\n        return piped.value;\n      }\n    }\n\n    return maskedValue;\n  }, [mask, guide, showMask, pipe, displayValue]);\n\n  // Initialize from field value\n  useEffect(() => {\n    const value = fieldApi.state.value || '';\n    setRawValue(value);\n    setDisplayValue(applyMask(value));\n  }, [fieldApi.state.value, applyMask]);\n\n  // Extract raw value from masked value\n  const extractRawValue = (maskedValue: string): string => {\n    if (!mask || typeof mask === 'function') {\n      return maskedValue;\n    }\n\n    // For string masks, extract only the actual input characters\n    let rawValue = '';\n    let maskIndex = 0;\n\n    for (let i = 0; i < maskedValue.length && maskIndex < mask.length; i++) {\n      const char = maskedValue[i];\n      const maskChar = mask[maskIndex];\n\n      if (maskChar === '0' || maskChar === '9') {\n        if (/\\d/.test(char)) {\n          rawValue += char;\n        }\n        maskIndex++;\n      } else if (maskChar === 'A' || maskChar === 'a') {\n        if (/[a-zA-Z]/.test(char)) {\n          rawValue += char;\n        }\n        maskIndex++;\n      } else if (char === maskChar) {\n        // Skip literal characters\n        maskIndex++;\n      } else {\n        // Character doesn't match mask, skip it\n        continue;\n      }\n    }\n\n    return rawValue;\n  };\n\n  // Handle input change\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    const newRawValue = extractRawValue(inputValue);\n    const newDisplayValue = applyMask(newRawValue);\n\n    setRawValue(newRawValue);\n    setDisplayValue(newDisplayValue);\n    fieldApi.handleChange(newRawValue);\n  };\n\n  // Handle key down for better UX\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const input = e.target as HTMLInputElement;\n    const { selectionStart, selectionEnd } = input;\n\n    // Handle backspace to skip over literal characters\n    if (e.key === 'Backspace' && selectionStart !== null && selectionEnd !== null && selectionStart === selectionEnd && selectionStart > 0) {\n      const maskChar = typeof mask === 'string' ? mask[selectionStart - 1] : '';\n      \n      // If the previous character is a literal (not a placeholder), skip it\n      if (maskChar && maskChar !== '0' && maskChar !== '9' && maskChar !== 'A' && maskChar !== 'a') {\n        e.preventDefault();\n        const newCursorPos = selectionStart - 1;\n        setTimeout(() => {\n          if (inputRef.current) {\n            inputRef.current.setSelectionRange(newCursorPos, newCursorPos);\n          }\n        }, 0);\n      }\n    }\n  };\n\n  // Get placeholder text\n  const getPlaceholder = (): string => {\n    if (placeholder) return placeholder;\n    if (maskedInputConfig.placeholder) return maskedInputConfig.placeholder;\n    if (showMask && typeof mask === 'string') {\n      return mask.replace(/[09Aa]/g, '_');\n    }\n    return '';\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name} className={labelClassName}>\n          {label}\n        </Label>\n      )}\n      \n      {description && (\n        <p className=\"text-sm text-muted-foreground\">{description}</p>\n      )}\n\n      <Input\n        ref={inputRef}\n        id={fieldApi.name}\n        name={fieldApi.name}\n        value={displayValue}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        placeholder={getPlaceholder()}\n        className={inputClassName}\n      />\n\n      {/* Show mask pattern hint */}\n      {mask && typeof mask === 'string' && (\n        <div className=\"text-xs text-muted-foreground\">\n          Format: {mask.replace(/[09]/g, '#').replace(/[Aa]/g, 'A')}\n        </div>\n      )}\n\n      {/* Show raw value for debugging */}\n      {process.env.NODE_ENV === 'development' && rawValue !== displayValue && (\n        <div className=\"text-xs text-muted-foreground\">\n          Raw value: {rawValue}\n        </div>\n      )}\n\n      {fieldApi.state.meta.errors && fieldApi.state.meta.errors.length > 0 && (\n        <p className=\"text-sm text-destructive\">\n          {fieldApi.state.meta.errors[0]}\n        </p>\n      )}\n    </div>\n  );\n};\n\n// Export common mask patterns for convenience\nexport { MASK_PATTERNS };",
      "type": "registry:component",
      "target": "components/formedible/fields/masked-input-field.tsx"
    },
    {
      "path": "src/components/fields/multi-select-field.tsx",
      "content": "'use client';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\nimport { cn } from '@/lib/utils';\nimport { X, ChevronDown, Check } from 'lucide-react';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport interface MultiSelectFieldSpecificProps extends BaseFieldProps {\n  options: Array<{ value: string; label: string }> | string[];\n  multiSelectConfig?: {\n    maxSelections?: number;\n    searchable?: boolean;\n    creatable?: boolean;\n    placeholder?: string;\n    noOptionsText?: string;\n    loadingText?: string;\n  };\n}\n\nexport const MultiSelectField: React.FC<MultiSelectFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  options = [],\n  multiSelectConfig = {},\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  const {\n    maxSelections = Infinity,\n    searchable = true,\n    creatable = false,\n    placeholder = 'Select options...',\n    noOptionsText = 'No options found',\n  } = multiSelectConfig;\n\n  const { state, handleChange, handleBlur } = fieldApi;\n  const selectedValues = Array.isArray(state.value) ? (state.value as string[]) : [];\n  \n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const containerRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const normalizedOptions = options.map(option => \n    typeof option === 'string' \n      ? { value: option, label: option }\n      : option\n  );\n\n  // Filter options based on search query\n  const filteredOptions = normalizedOptions.filter(option =>\n    option.label.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    option.value.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Add create option if enabled and query doesn't match existing options\n  const canCreate = creatable && \n    searchQuery.trim() && \n    !normalizedOptions.some(opt => \n      opt.value.toLowerCase() === searchQuery.toLowerCase() ||\n      opt.label.toLowerCase() === searchQuery.toLowerCase()\n    ) &&\n    !selectedValues.includes(searchQuery.trim());\n\n  const displayOptions = [...filteredOptions];\n  if (canCreate) {\n    displayOptions.unshift({\n      value: searchQuery.trim(),\n      label: `Create \"${searchQuery.trim()}\"`,\n      isCreateOption: true\n    } as { value: string; label: string; isCreateOption: true });\n  }\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n        setSearchQuery('');\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const handleSelect = (optionValue: string) => {\n    if (selectedValues.includes(optionValue)) {\n      // Remove if already selected\n      const newValues = selectedValues.filter(v => v !== optionValue);\n      handleChange(newValues);\n    } else if (selectedValues.length < maxSelections) {\n      // Add if not at max selections\n      const newValues = [...selectedValues, optionValue];\n      handleChange(newValues);\n    }\n    \n    setSearchQuery('');\n    if (!searchable) {\n      setIsOpen(false);\n    }\n    inputRef.current?.focus();\n  };\n\n  const handleRemove = (valueToRemove: string) => {\n    const newValues = selectedValues.filter(v => v !== valueToRemove);\n    handleChange(newValues);\n    handleBlur();\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Backspace' && !searchQuery && selectedValues.length > 0) {\n      // Remove last selected item on backspace\n      handleRemove(selectedValues[selectedValues.length - 1]);\n    } else if (e.key === 'Enter' && canCreate) {\n      e.preventDefault();\n      handleSelect(searchQuery.trim());\n    } else if (e.key === 'Escape') {\n      setIsOpen(false);\n      setSearchQuery('');\n    }\n  };\n\n  const getSelectedLabels = () => {\n    return selectedValues.map(value => {\n      const option = normalizedOptions.find(opt => opt.value === value);\n      return option ? option.label : value;\n    });\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", wrapperClassName)} ref={containerRef}>\n      {label && (\n        <Label className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n          {maxSelections < Infinity && (\n            <span className=\"ml-2 text-xs text-muted-foreground\">\n              ({selectedValues.length}/{maxSelections})\n            </span>\n          )}\n        </Label>\n      )}\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <div className=\"relative\">\n        {/* Selected items display */}\n        <div\n          className={cn(\n            \"min-h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background\",\n            \"focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2\",\n            state.meta.errors.length ? \"border-destructive\" : \"\",\n            fieldApi.form.state.isSubmitting ? \"opacity-50 cursor-not-allowed\" : \"cursor-text\",\n            inputClassName\n          )}\n          onClick={() => {\n            if (!fieldApi.form.state.isSubmitting) {\n              setIsOpen(true);\n              inputRef.current?.focus();\n            }\n          }}\n        >\n          <div className=\"flex flex-wrap gap-1 items-center\">\n            {/* Selected tags */}\n            {selectedValues.map((value, index) => {\n              const label = getSelectedLabels()[index];\n              return (\n                <Badge\n                  key={value}\n                  variant=\"secondary\"\n                  className=\"text-xs h-6 px-2 gap-1\"\n                >\n                  {label}\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-3 w-3 p-0 hover:bg-destructive hover:text-destructive-foreground\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleRemove(value);\n                    }}\n                    disabled={fieldApi.form.state.isSubmitting}\n                  >\n                    <X className=\"h-2 w-2\" />\n                  </Button>\n                </Badge>\n              );\n            })}\n            \n            {/* Search input */}\n            {searchable && (\n              <Input\n                ref={inputRef}\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyDown={handleKeyDown}\n                onFocus={() => setIsOpen(true)}\n                onBlur={handleBlur}\n                placeholder={selectedValues.length === 0 ? placeholder : ''}\n                className=\"border-0 p-0 h-6 focus-visible:ring-0 focus-visible:ring-offset-0 bg-transparent\"\n                disabled={fieldApi.form.state.isSubmitting || selectedValues.length >= maxSelections}\n              />\n            )}\n            \n            {/* Dropdown indicator */}\n            <ChevronDown \n              className={cn(\n                \"h-4 w-4 text-muted-foreground transition-transform ml-auto\",\n                isOpen ? \"rotate-180\" : \"\"\n              )} \n            />\n          </div>\n        </div>\n\n        {/* Dropdown */}\n        {isOpen && (\n          <div className=\"absolute z-50 w-full mt-1 bg-popover border rounded-md shadow-lg max-h-60 overflow-y-auto\">\n            {displayOptions.length === 0 ? (\n              <div className=\"p-2 text-sm text-muted-foreground text-center\">\n                {noOptionsText}\n              </div>\n            ) : (\n              displayOptions.map((option: { value: string; label: string; isCreateOption?: boolean }, index) => {\n                const isSelected = selectedValues.includes(option.value);\n                const isDisabled = !isSelected && selectedValues.length >= maxSelections;\n                \n                return (\n                  <button\n                    key={`${option.value}-${index}`}\n                    type=\"button\"\n                    className={cn(\n                      \"w-full px-3 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground\",\n                      \"flex items-center justify-between\",\n                      isSelected ? \"bg-accent\" : \"\",\n                      isDisabled ? \"opacity-50 cursor-not-allowed\" : \"\",\n                      option.isCreateOption ? \"font-medium text-primary\" : \"\"\n                    )}\n                    onClick={() => !isDisabled && handleSelect(option.value)}\n                    disabled={isDisabled}\n                  >\n                    <span>{option.label}</span>\n                    {isSelected && <Check className=\"h-4 w-4\" />}\n                  </button>\n                );\n              })\n            )}\n          </div>\n        )}\n      </div>\n\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}; ",
      "type": "registry:component",
      "target": "components/formedible/fields/multi-select-field.tsx"
    },
    {
      "path": "src/components/fields/number-field.tsx",
      "content": "'use client';\nimport React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport interface NumberFieldSpecificProps extends BaseFieldProps {\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\nexport const NumberField: React.FC<NumberFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  placeholder,\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n  min,\n  max,\n  step,\n}) => {\n  const { name, state, handleChange, handleBlur } = fieldApi;\n  const value = state.value as number | string | undefined;\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const val = e.target.value;\n    if (val === '') {\n      handleChange(undefined);\n    } else {\n      const num = parseFloat(val);\n      handleChange(isNaN(num) ? val : num);\n    }\n  };\n\n  let displayValue: string | number = '';\n  if (typeof value === 'number') {\n    displayValue = value;\n  } else if (typeof value === 'string') {\n    displayValue = value;\n  }\n\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={name} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Input\n        id={name}\n        name={name}\n        type=\"number\"\n        value={displayValue}\n        onBlur={handleBlur}\n        onChange={onChange}\n        placeholder={placeholder}\n        min={min}\n        max={max}\n        step={step}\n        className={cn(inputClassName, state.meta.errors.length ? \"border-destructive\" : \"\")}\n        disabled={fieldApi.form.state.isSubmitting}\n      />\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/formedible/fields/number-field.tsx"
    },
    {
      "path": "src/components/fields/object-field.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport type { BaseFieldProps } from \"@/lib/formedible/types\";\nimport { TextField } from \"./text-field\";\nimport { TextareaField } from \"./textarea-field\";\nimport { NumberField } from \"./number-field\";\nimport { SelectField } from \"./select-field\";\nimport { MultiSelectField } from \"./multi-select-field\";\nimport { CheckboxField } from \"./checkbox-field\";\nimport { SwitchField } from \"./switch-field\";\nimport { RadioField } from \"./radio-field\";\nimport { SliderField } from \"./slider-field\";\nimport { DateField } from \"./date-field\";\nimport { RatingField } from \"./rating-field\";\nimport { PhoneField } from \"./phone-field\";\nimport { ColorPickerField } from \"./color-picker-field\";\nimport { FileUploadField } from \"./file-upload-field\";\n\ninterface ObjectFieldConfig {\n  title?: string;\n  description?: string;\n  fields: Array<{\n    name: string;\n    type: string;\n    label?: string;\n    placeholder?: string;\n    description?: string;\n    options?: Array<{ value: string; label: string }>;\n    min?: number;\n    max?: number;\n    step?: number;\n    [key: string]: any;\n  }>;\n  collapsible?: boolean;\n  defaultExpanded?: boolean;\n  showCard?: boolean;\n  layout?: \"vertical\" | \"horizontal\" | \"grid\";\n  columns?: number;\n}\n\ninterface ObjectFieldProps extends BaseFieldProps {\n  objectConfig?: ObjectFieldConfig;\n  disabled?: boolean;\n}\n\nexport const ObjectField: React.FC<ObjectFieldProps> = ({\n  fieldApi,\n  label,\n  description,\n  wrapperClassName,\n  disabled,\n  objectConfig,\n  ...props\n}) => {\n  const [isExpanded, setIsExpanded] = React.useState(\n    objectConfig?.defaultExpanded !== false\n  );\n\n  const fieldComponents = {\n    text: TextField,\n    email: TextField,\n    password: TextField,\n    url: TextField,\n    tel: TextField,\n    textarea: TextareaField,\n    number: NumberField,\n    select: SelectField,\n    multiselect: MultiSelectField,\n    checkbox: CheckboxField,\n    switch: SwitchField,\n    radio: RadioField,\n    slider: SliderField,\n    date: DateField,\n    rating: RatingField,\n    phone: PhoneField,\n    color: ColorPickerField,\n    file: FileUploadField,\n    // Add more as needed\n  };\n\n  const renderField = (fieldConfig: ObjectFieldConfig['fields'][0]) => {\n    const FieldComponent = fieldComponents[fieldConfig.type as keyof typeof fieldComponents];\n    \n    if (!FieldComponent) {\n      console.warn(`Object field: Unknown field type \"${fieldConfig.type}\"`);\n      return null;\n    }\n\n    // Create a mock field API for object subfields\n    const mockFieldApi = {\n      name: `${fieldApi.name}.${fieldConfig.name}`,\n      state: {\n        ...fieldApi.state,\n        value: fieldApi.state.value?.[fieldConfig.name] || ''\n      },\n      handleChange: (value: any) => {\n        const currentValue = fieldApi.state.value || {};\n        fieldApi.handleChange({\n          ...currentValue,\n          [fieldConfig.name]: value\n        });\n      },\n      handleBlur: fieldApi.handleBlur\n    } as any;\n\n    const fieldProps: any = {\n      fieldApi: mockFieldApi,\n      label: fieldConfig.label,\n      placeholder: fieldConfig.placeholder,\n      description: fieldConfig.description,\n      ...(fieldConfig.min !== undefined && { min: fieldConfig.min }),\n      ...(fieldConfig.max !== undefined && { max: fieldConfig.max }),\n      ...(fieldConfig.step !== undefined && { step: fieldConfig.step }),\n      ...(disabled !== undefined && { disabled }),\n    };\n\n    // Handle fields that require options\n    if (['select', 'radio', 'multiselect'].includes(fieldConfig.type)) {\n      fieldProps.options = fieldConfig.options || [];\n    }\n\n    return (\n      <div key={fieldConfig.name}>\n        <FieldComponent {...fieldProps} />\n      </div>\n    );\n  };\n\n  const getLayoutClasses = () => {\n    const layout = objectConfig?.layout || \"vertical\";\n    const columns = objectConfig?.columns || 2;\n    \n    switch (layout) {\n      case \"horizontal\":\n        return \"flex flex-wrap gap-4\";\n      case \"grid\":\n        return `grid grid-cols-1 md:grid-cols-${columns} gap-4`;\n      default:\n        return \"space-y-4\";\n    }\n  };\n\n  const content = (\n    <div className={cn(\"space-y-4\", wrapperClassName)}>\n      {/* Main label and description */}\n      {(label || description) && (\n        <div className=\"space-y-1\">\n          {label && (\n            <label className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n              {label}\n            </label>\n          )}\n          {description && (\n            <p className=\"text-sm text-muted-foreground\">\n              {description}\n            </p>\n          )}\n        </div>\n      )}\n\n      {/* Object title and description */}\n      {(objectConfig?.title || objectConfig?.description) && (\n        <div className=\"space-y-1\">\n          {objectConfig?.title && (\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"text-sm font-medium text-muted-foreground\">\n                {objectConfig.title}\n              </h4>\n              {objectConfig?.collapsible && (\n                <button\n                  type=\"button\"\n                  onClick={() => setIsExpanded(!isExpanded)}\n                  className=\"text-xs text-muted-foreground hover:text-foreground\"\n                >\n                  {isExpanded ? \"Collapse\" : \"Expand\"}\n                </button>\n              )}\n            </div>\n          )}\n          {objectConfig?.description && (\n            <p className=\"text-xs text-muted-foreground\">\n              {objectConfig.description}\n            </p>\n          )}\n        </div>\n      )}\n\n      {/* Fields */}\n      {(!objectConfig?.collapsible || isExpanded) && (\n        <>\n          {objectConfig?.title && <div className=\"border-t my-4\" />}\n          <div className={getLayoutClasses()}>\n            {objectConfig?.fields?.map(renderField)}\n          </div>\n        </>\n      )}\n\n      {/* Show field errors */}\n      {fieldApi.state.meta.errors && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-sm text-destructive\">\n          {fieldApi.state.meta.errors.join(\", \")}\n        </div>\n      )}\n    </div>\n  );\n\n  // Wrap in card if specified\n  if (objectConfig?.showCard) {\n    return (\n      <Card className=\"w-full\">\n        {(objectConfig?.title || objectConfig?.description) && (\n          <CardHeader className=\"pb-3\">\n            {objectConfig?.title && (\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-base\">{objectConfig.title}</CardTitle>\n                {objectConfig?.collapsible && (\n                  <button\n                    type=\"button\"\n                    onClick={() => setIsExpanded(!isExpanded)}\n                    className=\"text-xs text-muted-foreground hover:text-foreground\"\n                  >\n                    {isExpanded ? \"Collapse\" : \"Expand\"}\n                  </button>\n                )}\n              </div>\n            )}\n            {objectConfig?.description && (\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {objectConfig.description}\n              </p>\n            )}\n          </CardHeader>\n        )}\n        <CardContent className=\"pt-0\">\n          {(!objectConfig?.collapsible || isExpanded) && (\n            <div className={getLayoutClasses()}>\n              {objectConfig?.fields?.map(renderField)}\n            </div>\n          )}\n          \n          {/* Show field errors */}\n          {fieldApi.state.meta.errors && fieldApi.state.meta.errors.length > 0 && (\n            <div className=\"text-sm text-destructive mt-4\">\n              {fieldApi.state.meta.errors.join(\", \")}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return content;\n};",
      "type": "registry:component",
      "target": "components/formedible/fields/object-field.tsx"
    },
    {
      "path": "src/components/fields/phone-field.tsx",
      "content": "'use client';\nimport React, { useState, useEffect } from 'react';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { ChevronDown, Phone } from 'lucide-react';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport interface PhoneFieldSpecificProps extends BaseFieldProps {\n  phoneConfig?: {\n    defaultCountry?: string;\n    format?: 'national' | 'international';\n    allowedCountries?: string[];\n    placeholder?: string;\n  };\n}\n\n// Common country codes and their formatting\nconst COUNTRY_CODES = {\n  US: { code: '+1', name: 'United States', flag: '🇺🇸', format: '(###) ###-####' },\n  CA: { code: '+1', name: 'Canada', flag: '🇨🇦', format: '(###) ###-####' },\n  GB: { code: '+44', name: 'United Kingdom', flag: '🇬🇧', format: '#### ### ####' },\n  FR: { code: '+33', name: 'France', flag: '🇫🇷', format: '## ## ## ## ##' },\n  DE: { code: '+49', name: 'Germany', flag: '🇩🇪', format: '### ### ####' },\n  IT: { code: '+39', name: 'Italy', flag: '🇮🇹', format: '### ### ####' },\n  ES: { code: '+34', name: 'Spain', flag: '🇪🇸', format: '### ### ###' },\n  AU: { code: '+61', name: 'Australia', flag: '🇦🇺', format: '#### ### ###' },\n  JP: { code: '+81', name: 'Japan', flag: '🇯🇵', format: '##-####-####' },\n  CN: { code: '+86', name: 'China', flag: '🇨🇳', format: '### #### ####' },\n  IN: { code: '+91', name: 'India', flag: '🇮🇳', format: '##### #####' },\n  BR: { code: '+55', name: 'Brazil', flag: '🇧🇷', format: '(##) #####-####' },\n  MX: { code: '+52', name: 'Mexico', flag: '🇲🇽', format: '## #### ####' },\n  RU: { code: '+7', name: 'Russia', flag: '🇷🇺', format: '### ###-##-##' },\n  KR: { code: '+82', name: 'South Korea', flag: '🇰🇷', format: '##-####-####' },\n};\n\nconst formatPhoneNumber = (value: string, format: string): string => {\n  // Remove all non-digits\n  const digits = value.replace(/\\D/g, '');\n  \n  // Apply format pattern\n  let formatted = '';\n  let digitIndex = 0;\n  \n  for (const char of format) {\n    if (char === '#' && digitIndex < digits.length) {\n      formatted += digits[digitIndex];\n      digitIndex++;\n    } else if (char !== '#') {\n      formatted += char;\n    } else {\n      break;\n    }\n  }\n  \n  return formatted;\n};\n\nconst extractDigits = (value: string): string => {\n  return value.replace(/\\D/g, '');\n};\n\nexport const PhoneField: React.FC<PhoneFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  phoneConfig = {},\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  const {\n    defaultCountry = 'US',\n    format = 'national',\n    allowedCountries,\n    placeholder,\n  } = phoneConfig;\n\n  const { state, handleChange, handleBlur } = fieldApi;\n  const value = (state.value as string) || '';\n  \n  const [selectedCountry, setSelectedCountry] = useState(defaultCountry);\n  const [isCountryDropdownOpen, setIsCountryDropdownOpen] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState('');\n\n  const availableCountries = allowedCountries \n    ? Object.entries(COUNTRY_CODES).filter(([code]) => allowedCountries.includes(code))\n    : Object.entries(COUNTRY_CODES);\n\n  const currentCountry = COUNTRY_CODES[selectedCountry as keyof typeof COUNTRY_CODES];\n\n  // Parse existing value on mount\n  useEffect(() => {\n    if (value) {\n      // Try to extract country code and phone number\n      const digits = extractDigits(value);\n      \n      // Find matching country code\n      const matchingCountry = Object.entries(COUNTRY_CODES).find(([_, country]) => {\n        const countryDigits = extractDigits(country.code);\n        return digits.startsWith(countryDigits);\n      });\n\n      if (matchingCountry) {\n        const [countryCode, countryData] = matchingCountry;\n        setSelectedCountry(countryCode);\n        \n        const countryCodeDigits = extractDigits(countryData.code);\n        const phoneDigits = digits.slice(countryCodeDigits.length);\n        setPhoneNumber(formatPhoneNumber(phoneDigits, countryData.format));\n      } else {\n        setPhoneNumber(value);\n      }\n    }\n  }, [value]);\n\n  const handlePhoneNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    const digits = extractDigits(inputValue);\n    \n    // Format the phone number according to country format\n    const formatted = formatPhoneNumber(digits, currentCountry.format);\n    setPhoneNumber(formatted);\n    \n    // Create the final value based on format preference\n    const finalValue = format === 'international' \n      ? `${currentCountry.code} ${formatted}`.trim()\n      : formatted;\n    \n    handleChange(finalValue);\n  };\n\n  const handleCountryChange = (countryCode: string) => {\n    setSelectedCountry(countryCode);\n    setIsCountryDropdownOpen(false);\n    \n    // Update the value with new country code\n    const newCountry = COUNTRY_CODES[countryCode as keyof typeof COUNTRY_CODES];\n    const digits = extractDigits(phoneNumber);\n    const formatted = formatPhoneNumber(digits, newCountry.format);\n    \n    const finalValue = format === 'international' \n      ? `${newCountry.code} ${formatted}`.trim()\n      : formatted;\n    \n    handleChange(finalValue);\n  };\n\n  const getPlaceholder = (): string => {\n    if (placeholder) return placeholder;\n    \n    const exampleNumber = formatPhoneNumber('1234567890', currentCountry.format);\n    return format === 'international' \n      ? `${currentCountry.code} ${exampleNumber}`\n      : exampleNumber;\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", wrapperClassName)}>\n      {label && (\n        <Label className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <div className=\"flex\">\n        {/* Country selector */}\n        <div className=\"relative\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            className={cn(\n              \"rounded-r-none border-r-0 px-3 h-10 min-w-[80px]\",\n              state.meta.errors.length ? \"border-destructive\" : \"\"\n            )}\n            onClick={() => setIsCountryDropdownOpen(!isCountryDropdownOpen)}\n            disabled={fieldApi.form.state.isSubmitting}\n          >\n            <span className=\"flex items-center gap-2\">\n              <span className=\"text-base\">{currentCountry.flag}</span>\n              {format === 'international' && (\n                <span className=\"text-xs text-muted-foreground\">\n                  {currentCountry.code}\n                </span>\n              )}\n              <ChevronDown className=\"h-3 w-3\" />\n            </span>\n          </Button>\n\n          {/* Country dropdown */}\n          {isCountryDropdownOpen && (\n            <div className=\"absolute z-50 top-full left-0 mt-1 bg-popover border rounded-md shadow-lg max-h-60 overflow-y-auto min-w-[200px]\">\n              {availableCountries.map(([code, country]) => (\n                <button\n                  key={code}\n                  type=\"button\"\n                  className={cn(\n                    \"w-full px-3 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground\",\n                    \"flex items-center gap-3\",\n                    selectedCountry === code ? \"bg-accent\" : \"\"\n                  )}\n                  onClick={() => handleCountryChange(code)}\n                >\n                  <span className=\"text-base\">{country.flag}</span>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{country.name}</div>\n                    <div className=\"text-xs text-muted-foreground\">{country.code}</div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Phone number input */}\n        <Input\n          value={phoneNumber}\n          onChange={handlePhoneNumberChange}\n          onBlur={handleBlur}\n          placeholder={getPlaceholder()}\n          className={cn(\n            \"rounded-l-none flex-1\",\n            state.meta.errors.length ? \"border-destructive\" : \"\",\n            inputClassName\n          )}\n          disabled={fieldApi.form.state.isSubmitting}\n        />\n      </div>\n\n      {/* Format hint */}\n      <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n        <Phone className=\"h-3 w-3\" />\n        <span>\n          Format: {currentCountry.format.replace(/#/g, '0')}\n          {format === 'international' && ` (${currentCountry.code})`}\n        </span>\n      </div>\n\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}; ",
      "type": "registry:component",
      "target": "components/formedible/fields/phone-field.tsx"
    },
    {
      "path": "src/components/fields/radio-field.tsx",
      "content": "'use client';\nimport React from 'react';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport interface RadioFieldSpecificProps extends BaseFieldProps {\n  options: Array<{ value: string; label: string }> | string[];\n  direction?: 'horizontal' | 'vertical';\n}\n\nexport const RadioField: React.FC<RadioFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  options = [],\n  direction = 'vertical',\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  const { name, state, handleChange, handleBlur } = fieldApi;\n  const value = state.value as string;\n\n  const normalizedOptions = options.map(option => \n    typeof option === 'string' \n      ? { value: option, label: option }\n      : option\n  );\n\n  return (\n    <div className={cn(\"space-y-3\", wrapperClassName)}>\n      {label && (\n        <Label className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n      \n      <RadioGroup\n        value={value || ''}\n        onValueChange={handleChange}\n        onBlur={handleBlur}\n        disabled={fieldApi.form.state.isSubmitting}\n        className={cn(\n          direction === 'horizontal' \n            ? \"flex flex-wrap gap-6\" \n            : \"flex flex-col space-y-2\",\n          inputClassName\n        )}\n      >\n        {normalizedOptions.map((option, index) => (\n          <div key={`${option.value}-${index}`} className=\"flex items-center space-x-2\">\n            <RadioGroupItem\n              value={option.value}\n              id={`${name}-${option.value}`}\n              className={cn(\n                state.meta.errors.length ? \"border-destructive\" : \"\"\n              )}\n            />\n            <Label\n              htmlFor={`${name}-${option.value}`}\n              className=\"text-sm font-normal cursor-pointer\"\n            >\n              {option.label}\n            </Label>\n          </div>\n        ))}\n      </RadioGroup>\n      \n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}; ",
      "type": "registry:component",
      "target": "components/formedible/fields/radio-field.tsx"
    },
    {
      "path": "src/components/fields/rating-field.tsx",
      "content": "'use client';\nimport React, { useState } from 'react';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport { Star, Heart, ThumbsUp } from 'lucide-react';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport interface RatingFieldSpecificProps extends BaseFieldProps {\n  ratingConfig?: {\n    max?: number;\n    allowHalf?: boolean;\n    icon?: 'star' | 'heart' | 'thumbs';\n    size?: 'sm' | 'md' | 'lg';\n    showValue?: boolean;\n  };\n}\n\nconst ICON_COMPONENTS = {\n  star: Star,\n  heart: Heart,\n  thumbs: ThumbsUp,\n};\n\nconst SIZE_CLASSES = {\n  sm: 'h-4 w-4',\n  md: 'h-6 w-6',\n  lg: 'h-8 w-8',\n};\n\nexport const RatingField: React.FC<RatingFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  ratingConfig = {},\n  labelClassName,\n  wrapperClassName,\n}) => {\n  const {\n    max = 5,\n    allowHalf = false,\n    icon = 'star',\n    size = 'md',\n    showValue = false,\n  } = ratingConfig;\n\n  const { state, handleChange, handleBlur } = fieldApi;\n  const value = (state.value as number) || 0;\n  \n  const [hoverValue, setHoverValue] = useState<number | null>(null);\n  const IconComponent = ICON_COMPONENTS[icon];\n  const iconSizeClass = SIZE_CLASSES[size];\n\n  const handleRatingClick = (rating: number) => {\n    handleChange(rating);\n    handleBlur();\n  };\n\n  const handleMouseEnter = (rating: number) => {\n    if (!fieldApi.form.state.isSubmitting) {\n      setHoverValue(rating);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    setHoverValue(null);\n  };\n\n  const getRatingValue = (index: number, isHalf: boolean = false): number => {\n    return isHalf ? index + 0.5 : index + 1;\n  };\n\n  const shouldShowFilled = (index: number, isHalf: boolean = false): boolean => {\n    const ratingValue = getRatingValue(index, isHalf);\n    const currentValue = hoverValue !== null ? hoverValue : value;\n    \n    if (isHalf) {\n      return currentValue >= ratingValue;\n    } else {\n      return currentValue >= ratingValue || (allowHalf && currentValue >= ratingValue - 0.5);\n    }\n  };\n\n  const shouldShowHalfFilled = (index: number): boolean => {\n    if (!allowHalf) return false;\n    \n    const currentValue = hoverValue !== null ? hoverValue : value;\n    const fullRating = index + 1;\n    const halfRating = index + 0.5;\n    \n    return currentValue >= halfRating && currentValue < fullRating;\n  };\n\n  const getDisplayValue = (): string => {\n    if (!showValue) return '';\n    \n    const displayRating = hoverValue !== null ? hoverValue : value;\n    return allowHalf && displayRating % 1 !== 0 \n      ? displayRating.toFixed(1) \n      : displayRating.toString();\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", wrapperClassName)}>\n      {label && (\n        <Label className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n          {showValue && (\n            <span className=\"ml-2 text-sm text-muted-foreground\">\n              ({getDisplayValue()}/{max})\n            </span>\n          )}\n        </Label>\n      )}\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <div className=\"flex items-center gap-1\">\n        {Array.from({ length: max }, (_, index) => (\n          <div key={index} className=\"relative\">\n            {/* Full star/icon button */}\n            <button\n              type=\"button\"\n              className={cn(\n                \"relative transition-all duration-150 hover:scale-110\",\n                fieldApi.form.state.isSubmitting \n                  ? \"cursor-not-allowed opacity-50\" \n                  : \"cursor-pointer\"\n              )}\n              onClick={() => handleRatingClick(getRatingValue(index, false))}\n              onMouseEnter={() => handleMouseEnter(getRatingValue(index, false))}\n              onMouseLeave={handleMouseLeave}\n              disabled={fieldApi.form.state.isSubmitting}\n              title={`Rate ${getRatingValue(index, false)} ${icon}${getRatingValue(index, false) !== 1 ? 's' : ''}`}\n            >\n              <IconComponent\n                className={cn(\n                  iconSizeClass,\n                  \"transition-colors duration-150\",\n                  shouldShowFilled(index, false)\n                    ? icon === 'star' \n                      ? \"fill-yellow-400 text-yellow-400\" \n                      : icon === 'heart'\n                      ? \"fill-red-500 text-red-500\"\n                      : \"fill-blue-500 text-blue-500\"\n                    : \"text-muted-foreground hover:text-muted-foreground/80\"\n                )}\n              />\n              \n              {/* Half-fill overlay for half ratings */}\n              {allowHalf && shouldShowHalfFilled(index) && (\n                <div className=\"absolute inset-0 overflow-hidden\" style={{ width: '50%' }}>\n                  <IconComponent\n                    className={cn(\n                      iconSizeClass,\n                      icon === 'star' \n                        ? \"fill-yellow-400 text-yellow-400\" \n                        : icon === 'heart'\n                        ? \"fill-red-500 text-red-500\"\n                        : \"fill-blue-500 text-blue-500\"\n                    )}\n                  />\n                </div>\n              )}\n            </button>\n\n            {/* Half star/icon button (if half ratings allowed) */}\n            {allowHalf && (\n              <button\n                type=\"button\"\n                className={cn(\n                  \"absolute inset-0 w-1/2 transition-all duration-150\",\n                  fieldApi.form.state.isSubmitting \n                    ? \"cursor-not-allowed\" \n                    : \"cursor-pointer\"\n                )}\n                onClick={() => handleRatingClick(getRatingValue(index, true))}\n                onMouseEnter={() => handleMouseEnter(getRatingValue(index, true))}\n                onMouseLeave={handleMouseLeave}\n                disabled={fieldApi.form.state.isSubmitting}\n                title={`Rate ${getRatingValue(index, true)} ${icon}s`}\n              />\n            )}\n          </div>\n        ))}\n        \n        {/* Clear rating button */}\n        {value > 0 && (\n          <button\n            type=\"button\"\n            className={cn(\n              \"ml-2 text-xs text-muted-foreground hover:text-foreground transition-colors\",\n              fieldApi.form.state.isSubmitting ? \"cursor-not-allowed opacity-50\" : \"cursor-pointer\"\n            )}\n            onClick={() => handleRatingClick(0)}\n            disabled={fieldApi.form.state.isSubmitting}\n            title=\"Clear rating\"\n          >\n            Clear\n          </button>\n        )}\n      </div>\n\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}; ",
      "type": "registry:component",
      "target": "components/formedible/fields/rating-field.tsx"
    },
    {
      "path": "src/components/fields/select-field.tsx",
      "content": "import React from 'react';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\ninterface SelectFieldSpecificProps extends BaseFieldProps {\n  options: Array<{ value: string; label: string }> | string[];\n}\n\nexport const SelectField: React.FC<SelectFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  placeholder,\n  description,\n  options = [],\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name + \"-trigger\"} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Select\n        value={(fieldApi.state.value as string) || ''}\n        onValueChange={(value) => fieldApi.handleChange(value)}\n        disabled={fieldApi.form.state.isSubmitting}\n      >\n        <SelectTrigger\n          id={fieldApi.name + \"-trigger\"}\n          onBlur={fieldApi.handleBlur}\n          className={cn(inputClassName, fieldApi.state.meta.errors.length ? \"border-destructive\" : \"\")}\n        >\n          <SelectValue placeholder={placeholder || \"Select an option\"} />\n        </SelectTrigger>\n        <SelectContent>\n          {options.map((option, index) => {\n            const value = typeof option === 'string' ? option : option.value;\n            const label = typeof option === 'string' ? option : option.label;\n            return (\n              <SelectItem key={value + index} value={value}>\n                {label}\n              </SelectItem>\n            );\n          })}\n        </SelectContent>\n      </Select>\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/formedible/fields/select-field.tsx"
    },
    {
      "path": "src/components/fields/slider-field.tsx",
      "content": "import React from 'react';\nimport { Slider } from '@/components/ui/slider';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport interface SliderFieldSpecificProps extends BaseFieldProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  valueLabelPrefix?: string; // E.g., \"Temperature\"\n  valueLabelSuffix?: string; // E.g., \"FPS\" \n  valueDisplayPrecision?: number; // For toFixed()\n  showRawValue?: boolean; // Optionally show raw value next to formatted one\n}\n\nexport const SliderField: React.FC<SliderFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  min = 0,\n  max = 100,\n  step = 1,\n  valueLabelPrefix = '',\n  valueLabelSuffix = '',\n  valueDisplayPrecision = 0,\n  showRawValue = false,\n  wrapperClassName,\n  inputClassName,\n  labelClassName,\n}) => {\n  const { name, state, handleChange, handleBlur } = fieldApi;\n  const fieldValue = typeof state.value === 'number' ? state.value : min;\n  const displayValue = fieldValue.toFixed(valueDisplayPrecision);\n\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={name} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label} ({valueLabelPrefix}{displayValue}{valueLabelSuffix})\n          {showRawValue && <span className=\"text-xs text-muted-foreground ml-2\">(Raw: {state.value})</span>}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Slider\n        id={name}\n        name={name}\n        value={[fieldValue]} // Slider expects an array\n        onValueChange={(valueArray) => handleChange(valueArray[0])} // Send single number to form state\n        onBlur={handleBlur}\n        disabled={fieldApi.form.state.isSubmitting}\n        min={min}\n        max={max}\n        step={step}\n        className={cn(inputClassName, state.meta.errors.length ? \"border-destructive\" : \"\")}\n      />\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}; ",
      "type": "registry:component",
      "target": "components/formedible/fields/slider-field.tsx"
    },
    {
      "path": "src/components/fields/switch-field.tsx",
      "content": "import React from 'react';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport const SwitchField: React.FC<BaseFieldProps> = ({\n  fieldApi,\n  label,\n  description,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      <div className=\"flex items-center space-x-2\">\n        <Switch\n          id={fieldApi.name}\n          checked={!!fieldApi.state.value}\n          onCheckedChange={(checked) => fieldApi.handleChange(checked)}\n          onBlur={fieldApi.handleBlur}\n          disabled={fieldApi.form.state.isSubmitting}\n          aria-describedby={description ? `${fieldApi.name}-description` : undefined}\n        />\n        {label && (\n          <Label htmlFor={fieldApi.name} className={cn(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\", labelClassName)}>\n            {label}\n          </Label>\n        )}\n      </div>\n      {description && <p id={`${fieldApi.name}-description`} className=\"text-xs text-muted-foreground\">{description}</p>}\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: string, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/formedible/fields/switch-field.tsx"
    },
    {
      "path": "src/components/fields/text-field.tsx",
      "content": "'use client';\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport interface TextFieldSpecificProps extends BaseFieldProps {\n  type?: 'text' | 'email' | 'password' | 'url' | 'tel' | 'datetime-local';\n  datalist?: {\n    options?: string[];\n    asyncOptions?: (query: string) => Promise<string[]>;\n    debounceMs?: number;\n    minChars?: number;\n    maxResults?: number;\n  };\n}\n\nexport const TextField: React.FC<TextFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  placeholder,\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n  type = 'text',\n  datalist,\n}) => {\n  const { name, state, handleChange, handleBlur } = fieldApi;\n  const value = state.value as string | number | undefined;\n  \n  // Datalist state\n  const [datalistOptions, setDatalistOptions] = useState<string[]>(datalist?.options || []);\n  const [isLoadingOptions, setIsLoadingOptions] = useState(false);\n  const [lastQuery, setLastQuery] = useState('');\n\n  // Debounced async options fetching\n  const fetchAsyncOptions = useCallback(\n    async (query: string) => {\n      if (!datalist?.asyncOptions) return;\n      \n      const minChars = datalist.minChars || 1;\n      if (query.length < minChars) {\n        setDatalistOptions(datalist.options || []);\n        return;\n      }\n\n      if (query === lastQuery) return;\n      \n      setIsLoadingOptions(true);\n      setLastQuery(query);\n      \n      try {\n        const results = await datalist.asyncOptions(query);\n        const maxResults = datalist.maxResults || 10;\n        const limitedResults = results.slice(0, maxResults);\n        \n        // Combine static options with async results\n        const staticOptions = datalist.options || [];\n        const combinedOptions = [...staticOptions, ...limitedResults];\n        \n        // Remove duplicates\n        const uniqueOptions = Array.from(new Set(combinedOptions));\n        \n        setDatalistOptions(uniqueOptions);\n      } catch (error) {\n        console.error('Error fetching datalist options:', error);\n        // Fallback to static options on error\n        setDatalistOptions(datalist.options || []);\n      } finally {\n        setIsLoadingOptions(false);\n      }\n    },\n    [datalist, lastQuery]\n  );\n\n  // Debounced effect for async options\n  useEffect(() => {\n    if (!datalist?.asyncOptions) return;\n    \n    const debounceMs = datalist.debounceMs || 300;\n    const currentValue = String(value || '');\n    \n    const timeoutId = setTimeout(() => {\n      fetchAsyncOptions(currentValue);\n    }, debounceMs);\n\n    return () => clearTimeout(timeoutId);\n  }, [value, fetchAsyncOptions, datalist]);\n\n  // Generate unique datalist id\n  const datalistId = useMemo(() => \n    datalist ? `${name}-datalist` : undefined, \n    [name, datalist]\n  );\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleChange(e.target.value);\n  };\n\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={name} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n          {isLoadingOptions && (\n            <span className=\"ml-2 text-xs text-muted-foreground\">Loading...</span>\n          )}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Input\n        id={name}\n        name={name}\n        type={type}\n        value={value === undefined || value === null ? '' : String(value)}\n        onBlur={handleBlur}\n        onChange={onChange}\n        placeholder={placeholder}\n        className={cn(inputClassName, state.meta.errors.length ? \"border-destructive\" : \"\")}\n        disabled={fieldApi.form.state.isSubmitting}\n        list={datalistId}\n        autoComplete={datalist ? \"off\" : undefined}\n      />\n      {datalist && datalistOptions.length > 0 && (\n        <datalist id={datalistId}>\n          {datalistOptions.map((option, index) => (\n            <option key={`${option}-${index}`} value={option} />\n          ))}\n        </datalist>\n      )}\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: string | Error, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/formedible/fields/text-field.tsx"
    },
    {
      "path": "src/components/fields/textarea-field.tsx",
      "content": "import React from 'react';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport interface TextareaFieldSpecificProps extends BaseFieldProps {\n  rows?: number;\n}\n\nexport const TextareaField: React.FC<TextareaFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  placeholder,\n  description,\n  rows = 3,\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Textarea\n        id={fieldApi.name}\n        name={fieldApi.name}\n        value={(fieldApi.state.value as string) || ''}\n        onBlur={fieldApi.handleBlur}\n        onChange={(e) => fieldApi.handleChange(e.target.value)}\n        placeholder={placeholder}\n        rows={rows}\n        className={cn(inputClassName, fieldApi.state.meta.errors.length ? \"border-destructive\" : \"\")}\n        disabled={fieldApi.form.state.isSubmitting}\n      />\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: string, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/formedible/fields/textarea-field.tsx"
    },
    {
      "path": "src/components/layout/form-tabs.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FormTabsProps {\n  children?: React.ReactNode;\n  tabs: {\n    id: string;\n    label: string;\n    content: React.ReactNode;\n  }[];\n  activeTab: string; // CONTROLLED - NO INTERNAL STATE\n  className?: string;\n  onTabChange: (tabId: string) => void; // REQUIRED - PARENT CONTROLS STATE\n}\n\n// PURE DISPLAY COMPONENT - NO STATE, NO RERENDERS\nexport const FormTabs: React.FC<FormTabsProps> = ({\n  children,\n  tabs,\n  activeTab,\n  className,\n  onTabChange,\n}) => {\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {children}\n      \n      <Tabs value={activeTab} onValueChange={onTabChange}>\n        <TabsList className=\"grid w-full\" style={{ gridTemplateColumns: `repeat(${tabs.length}, 1fr)` }}>\n          {tabs.map((tab) => (\n            <TabsTrigger key={tab.id} value={tab.id}>\n              {tab.label}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n        \n        {tabs.map((tab) => (\n          <TabsContent key={tab.id} value={tab.id} className=\"space-y-4\">\n            {tab.content}\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/formedible/layout/form-tabs.tsx"
    }
  ],
  "docs": "Make sure to install @tanstack/react-form and configure your shadcn/ui components before using this hook.",
  "categories": [
    "form",
    "hook"
  ]
}