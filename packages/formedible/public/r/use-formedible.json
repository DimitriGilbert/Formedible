{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-formedible",
  "type": "registry:hook",
  "title": "Use Formedible",
  "description": "A powerful React hook for creating schema-driven forms with TanStack Form and shadcn/ui components",
  "dependencies": [
    "@tanstack/react-form",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-label",
    "@radix-ui/react-select",
    "@radix-ui/react-switch",
    "date-fns",
    "react-day-picker",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "textarea",
    "select",
    "checkbox",
    "switch",
    "label",
    "calendar",
    "popover"
  ],
  "files": [
    {
      "path": "src/hooks/useFormedible.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { useForm } from \"@tanstack/react-form\";\nimport { cn } from \"@/lib/utils\";\nimport { TextField } from \"@/components/fields/TextField\";\nimport { TextareaField } from \"@/components/fields/TextareaField\";\nimport { SelectField } from \"@/components/fields/SelectField\";\nimport { CheckboxField } from \"@/components/fields/CheckboxField\";\nimport { SwitchField } from \"@/components/fields/SwitchField\";\nimport { NumberField } from \"@/components/fields/NumberField\";\nimport { DateField } from \"@/components/fields/DateField\";\n\ninterface FormProps {\n  className?: string;\n  children?: React.ReactNode;\n  onSubmit?: (e: React.FormEvent) => void;\n}\n\ninterface FieldConfig {\n  name: string;\n  type: string;\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  options?: string[];\n}\n\ninterface UseFormedibleOptions<TFormValues> {\n  fields?: FieldConfig[];\n  submitLabel?: string;\n  formClassName?: string;\n  fieldClassName?: string;\n  formOptions?: Partial<{\n    defaultValues: TFormValues;\n    onSubmit: (props: { value: TFormValues; formApi: any }) => any | Promise<any>;\n    onSubmitInvalid: (props: { value: TFormValues; formApi: any }) => void;\n    asyncDebounceMs: number;\n    canSubmitWhenInvalid: boolean;\n  }>;\n}\n\nexport function useFormedible<TFormValues extends Record<string, any>>(\n  options: UseFormedibleOptions<TFormValues>\n) {\n  const {\n    fields = [],\n    submitLabel = \"Submit\",\n    formClassName,\n    fieldClassName,\n    formOptions,\n  } = options;\n\n  // Type assertion to work with TanStack Form's complex generics\n  const form = useForm(formOptions as any);\n\n  const Form: React.FC<FormProps> = ({ className, children, onSubmit }) => {\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      if (onSubmit) {\n        onSubmit(e);\n      } else {\n        form.handleSubmit();\n      }\n    };\n\n    const formClass = cn(\"space-y-4\", formClassName, className);\n\n    const renderField = (fieldConfig: FieldConfig) => {\n      const { name, type, label, placeholder, description, options } =\n        fieldConfig;\n\n      return (\n        <form.Field key={name} name={name as keyof TFormValues & string}>\n          {(fieldApi) => {\n            const props = {\n              fieldApi,\n              label,\n              placeholder,\n              description,\n              wrapperClassName: fieldClassName,\n            };\n\n            switch (type) {\n              case \"text\":\n              case \"email\":\n              case \"password\":\n              case \"url\":\n                return <TextField {...props} type={type} />;\n              case \"textarea\":\n                return <TextareaField {...props} />;\n              case \"select\":\n                return <SelectField {...props} options={options || []} />;\n              case \"checkbox\":\n                return <CheckboxField {...props} />;\n              case \"switch\":\n                return <SwitchField {...props} />;\n              case \"number\":\n                return <NumberField {...props} />;\n              case \"date\":\n                return <DateField {...props} />;\n              default:\n                return <TextField {...props} />;\n            }\n          }}\n        </form.Field>\n      );\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className={formClass}>\n        {children || (\n          <>\n            {fields.map(renderField)}\n            <form.Subscribe\n              selector={(state) => ({\n                canSubmit: state.canSubmit,\n                isSubmitting: state.isSubmitting,\n              })}\n            >\n              {({ canSubmit, isSubmitting }) => (\n                <button\n                  type=\"submit\"\n                  disabled={!canSubmit || isSubmitting}\n                  className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\n                >\n                  {isSubmitting ? \"Submitting...\" : submitLabel}\n                </button>\n              )}\n            </form.Subscribe>\n          </>\n        )}\n      </form>\n    );\n  };\n\n  return {\n    form,\n    Form,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-formedible.tsx"
    },
    {
      "path": "src/components/fields/TextField.tsx",
      "content": "'use client';\nimport React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '../../lib/formedible/types';\n\nexport interface TextFieldSpecificProps extends BaseFieldProps {\n  type?: 'text' | 'email' | 'password' | 'url' | 'tel' | 'datetime-local';\n}\n\nexport const TextField: React.FC<TextFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  placeholder,\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n  type = 'text',\n}) => {\n  const { name, state, handleChange, handleBlur } = fieldApi;\n  const value = state.value as string | number | undefined;\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleChange(e.target.value);\n  };\n\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={name} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Input\n        id={name}\n        name={name}\n        type={type}\n        value={value === undefined || value === null ? '' : String(value)}\n        onBlur={handleBlur}\n        onChange={onChange}\n        placeholder={placeholder}\n        className={cn(inputClassName, state.meta.errors.length ? \"border-destructive\" : \"\")}\n        disabled={fieldApi.form.state.isSubmitting}\n      />\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: any, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/fields/text-field.tsx"
    },
    {
      "path": "src/components/fields/TextareaField.tsx",
      "content": "import React from 'react';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '../../lib/formedible/types';\n\nexport interface TextareaFieldSpecificProps extends BaseFieldProps {\n  rows?: number;\n}\n\nexport const TextareaField: React.FC<TextareaFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  placeholder,\n  description,\n  rows = 3,\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Textarea\n        id={fieldApi.name}\n        name={fieldApi.name}\n        value={(fieldApi.state.value as string) || ''}\n        onBlur={fieldApi.handleBlur}\n        onChange={(e) => fieldApi.handleChange(e.target.value)}\n        placeholder={placeholder}\n        rows={rows}\n        className={cn(inputClassName, fieldApi.state.meta.errors.length ? \"border-destructive\" : \"\")}\n        disabled={fieldApi.form.state.isSubmitting}\n      />\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: any, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/fields/textarea-field.tsx"
    },
    {
      "path": "src/components/fields/SelectField.tsx",
      "content": "import React from 'react';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\ninterface SelectFieldSpecificProps extends BaseFieldProps {\n  options: Array<{ value: string; label: string }> | string[];\n}\n\nexport const SelectField: React.FC<SelectFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  placeholder,\n  description,\n  options = [],\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name + \"-trigger\"} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Select\n        value={(fieldApi.state.value as string) || ''}\n        onValueChange={(value) => fieldApi.handleChange(value)}\n        disabled={fieldApi.form.state.isSubmitting}\n      >\n        <SelectTrigger\n          id={fieldApi.name + \"-trigger\"}\n          onBlur={fieldApi.handleBlur}\n          className={cn(inputClassName, fieldApi.state.meta.errors.length ? \"border-destructive\" : \"\")}\n        >\n          <SelectValue placeholder={placeholder || \"Select an option\"} />\n        </SelectTrigger>\n        <SelectContent>\n          {options.map((option, index) => {\n            const value = typeof option === 'string' ? option : option.value;\n            const label = typeof option === 'string' ? option : option.label;\n            return (\n              <SelectItem key={value + index} value={value}>\n                {label}\n              </SelectItem>\n            );\n          })}\n        </SelectContent>\n      </Select>\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: any, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/fields/select-field.tsx"
    },
    {
      "path": "src/components/fields/CheckboxField.tsx",
      "content": "import React from 'react';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport const CheckboxField: React.FC<BaseFieldProps> = ({\n  fieldApi,\n  label,\n  description,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={fieldApi.name}\n          checked={!!fieldApi.state.value}\n          onCheckedChange={(checked) => fieldApi.handleChange(Boolean(checked))}\n          onBlur={fieldApi.handleBlur}\n          disabled={fieldApi.form.state.isSubmitting}\n          aria-describedby={description ? `${fieldApi.name}-description` : undefined}\n        />\n        {label && (\n          <Label htmlFor={fieldApi.name} className={cn(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\", labelClassName)}>\n            {label}\n          </Label>\n        )}\n      </div>\n      {description && <p id={`${fieldApi.name}-description`} className=\"text-xs text-muted-foreground\">{description}</p>}\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: any, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/fields/checkbox-field.tsx"
    },
    {
      "path": "src/components/fields/SwitchField.tsx",
      "content": "import React from 'react';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport const SwitchField: React.FC<BaseFieldProps> = ({\n  fieldApi,\n  label,\n  description,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      <div className=\"flex items-center space-x-2\">\n        <Switch\n          id={fieldApi.name}\n          checked={!!fieldApi.state.value}\n          onCheckedChange={(checked) => fieldApi.handleChange(checked)}\n          onBlur={fieldApi.handleBlur}\n          disabled={fieldApi.form.state.isSubmitting}\n          aria-describedby={description ? `${fieldApi.name}-description` : undefined}\n        />\n        {label && (\n          <Label htmlFor={fieldApi.name} className={cn(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\", labelClassName)}>\n            {label}\n          </Label>\n        )}\n      </div>\n      {description && <p id={`${fieldApi.name}-description`} className=\"text-xs text-muted-foreground\">{description}</p>}\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: any, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/fields/switch-field.tsx"
    },
    {
      "path": "src/components/fields/NumberField.tsx",
      "content": "'use client';\nimport React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport type { BaseFieldProps } from '../../lib/formedible/types';\n\nexport interface NumberFieldSpecificProps extends BaseFieldProps {\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\nexport const NumberField: React.FC<NumberFieldSpecificProps> = ({\n  fieldApi,\n  label,\n  description,\n  placeholder,\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n  min,\n  max,\n  step,\n}) => {\n  const { name, state, handleChange, handleBlur } = fieldApi;\n  const value = state.value as number | string | undefined;\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const val = e.target.value;\n    if (val === '') {\n      handleChange(undefined);\n    } else {\n      const num = parseFloat(val);\n      handleChange(isNaN(num) ? val : num);\n    }\n  };\n\n  let displayValue: string | number = '';\n  if (typeof value === 'number') {\n    displayValue = value;\n  } else if (typeof value === 'string') {\n    displayValue = value;\n  }\n\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={name} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Input\n        id={name}\n        name={name}\n        type=\"number\"\n        value={displayValue}\n        onBlur={handleBlur}\n        onChange={onChange}\n        placeholder={placeholder}\n        min={min}\n        max={max}\n        step={step}\n        className={cn(inputClassName, state.meta.errors.length ? \"border-destructive\" : \"\")}\n        disabled={fieldApi.form.state.isSubmitting}\n      />\n      {state.meta.isTouched && state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {state.meta.errors.map((err: any, index: number) => (\n            <p key={index}>{typeof err === 'string' ? err : (err as Error)?.message || 'Invalid'}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/fields/number-field.tsx"
    },
    {
      "path": "src/components/fields/DateField.tsx",
      "content": "import React from 'react';\nimport { format, parseISO } from 'date-fns';\nimport { Calendar as CalendarIcon } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Label } from '@/components/ui/label';\nimport type { BaseFieldProps } from '@/lib/formedible/types';\n\nexport const DateField: React.FC<BaseFieldProps> = ({\n  fieldApi,\n  label,\n  placeholder = \"Pick a date\",\n  description,\n  inputClassName,\n  labelClassName,\n  wrapperClassName,\n}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const selectedDate = fieldApi.state.value\n    ? fieldApi.state.value instanceof Date\n      ? fieldApi.state.value\n      : typeof fieldApi.state.value === 'string'\n        ? parseISO(fieldApi.state.value)\n        : undefined\n    : undefined;\n\n  const handleDateSelect = (date: Date | undefined) => {\n    fieldApi.handleChange(date);\n    fieldApi.handleBlur();\n    setIsOpen(false);\n  };\n\n  return (\n    <div className={cn(\"space-y-1.5\", wrapperClassName)}>\n      {label && (\n        <Label htmlFor={fieldApi.name + \"-trigger\"} className={cn(\"text-sm font-medium\", labelClassName)}>\n          {label}\n        </Label>\n      )}\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            id={fieldApi.name + \"-trigger\"}\n            variant={\"outline\"}\n            className={cn(\n              \"w-full justify-start text-left font-normal\",\n              !selectedDate && \"text-muted-foreground\",\n              inputClassName,\n              fieldApi.state.meta.errors.length ? \"border-destructive\" : \"\"\n            )}\n            disabled={fieldApi.form.state.isSubmitting}\n            onBlur={fieldApi.handleBlur}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {selectedDate ? format(selectedDate, \"PPP\") : <span>{placeholder}</span>}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\">\n          <Calendar\n            mode=\"single\"\n            selected={selectedDate}\n            onSelect={handleDateSelect}\n            initialFocus\n            disabled={fieldApi.form.state.isSubmitting}\n          />\n        </PopoverContent>\n      </Popover>\n      {fieldApi.state.meta.isTouched && fieldApi.state.meta.errors.length > 0 && (\n        <div className=\"text-xs text-destructive pt-1\">\n          {fieldApi.state.meta.errors.map((err: any, index: number) => (\n            <p key={index}>{String(err)}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/fields/date-field.tsx"
    }
  ],
  "docs": "Make sure to install @tanstack/react-form and configure your shadcn/ui components before using this hook.",
  "categories": [
    "form",
    "hook"
  ]
}