"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[937],{579:(e,n,a)=>{a.d(n,{SS:()=>s,ZY:()=>c,_D:()=>m,iy:()=>t,nF:()=>l,s9:()=>o,u:()=>r,vK:()=>i});let t='const contactForm = useFormedible({\n  schema: z.object({\n    name: z.string().min(2, "Name must be at least 2 characters"),\n    email: z.string().email("Please enter a valid email"),\n    message: z.string().min(10, "Message must be at least 10 characters"),\n    newsletter: z.boolean().optional(),\n  }),\n  fields: [\n    { name: "name", type: "text", label: "Full Name", placeholder: "Enter your full name" },\n    { name: "email", type: "email", label: "Email Address", placeholder: "your@email.com" },\n    { name: "message", type: "textarea", label: "Message", placeholder: "Tell us what you think..." },\n    { name: "newsletter", type: "checkbox", label: "Subscribe to newsletter" },\n  ],\n  submitLabel: "Send Message",\n  formOptions: {\n    defaultValues: { \n      name: "",\n      email: "",\n      message: "",\n      newsletter: false \n    },\n    onSubmit: async ({ value }) => {\n      console.log("Contact form submitted:", value);\n      alert("Thank you for your message!");\n    },\n  },\n});\n\nreturn <contactForm.Form className="space-y-6" />;',l='const AnimatedFieldWrapper: React.FC<{ children: React.ReactNode; field: any }> = ({ children, field }) => (\n  <motion.div\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    exit={{ opacity: 0, y: -20 }}\n    transition={{ duration: 0.3, delay: 0.1 }}\n    className="space-y-2"\n  >\n    {children}\n  </motion.div>\n);\n\nconst profileForm = useFormedible({\n  schema: z.object({\n    firstName: z.string().min(1, "First name is required"),\n    lastName: z.string().min(1, "Last name is required"),\n    email: z.string().email("Please enter a valid email"),\n    age: z.number().min(13, "Must be at least 13 years old").max(120, "Invalid age"),\n    country: z.string().min(1, "Please select a country"),\n    bio: z.string().optional(),\n    notifications: z.boolean().default(true),\n    newsletter: z.boolean().default(false),\n    birthday: z.date().optional(),\n  }),\n  fields: [\n    { name: "firstName", type: "text", label: "First Name", placeholder: "John" },\n    { name: "lastName", type: "text", label: "Last Name", placeholder: "Doe" },\n    { name: "email", type: "email", label: "Email", placeholder: "john@example.com" },\n    { name: "age", type: "number", label: "Age", placeholder: "25", min: 13, max: 120 },\n    { \n      name: "country", \n      type: "select", \n      label: "Country", \n      options: ["United States", "Canada", "United Kingdom", "Germany", "France", "Other"] \n    },\n    { name: "bio", type: "textarea", label: "Bio", placeholder: "Tell us about yourself..." },\n    { name: "notifications", type: "switch", label: "Enable notifications" },\n    { name: "newsletter", type: "checkbox", label: "Subscribe to newsletter" },\n    { name: "birthday", type: "date", label: "Birthday" },\n  ],\n  submitLabel: "Update Profile",\n  globalWrapper: AnimatedFieldWrapper,\n  formOptions: {\n    defaultValues: {\n      firstName: "",\n      lastName: "",\n      email: "",\n      age: 25,\n      country: "",\n      bio: "",\n      notifications: true,\n      newsletter: false,\n    },\n    onSubmit: async ({ value }) => {\n      console.log("Profile updated:", value);\n      alert("Profile updated successfully!");\n    },\n  },\n});\n\nreturn <profileForm.Form className="space-y-6" />;',s='const surveyForm = useFormedible({\n  schema: z.object({\n    satisfaction: z.number().min(1).max(10),\n    recommend: z.boolean(),\n    feedback: z.string().min(5, "Please provide at least 5 characters of feedback"),\n    category: z.string().min(1, "Please select a category"),\n  }),\n  fields: [\n    { name: "satisfaction", type: "slider", label: "Satisfaction (1-10)", min: 1, max: 10 },\n    { name: "recommend", type: "switch", label: "Would you recommend us?" },\n    { name: "feedback", type: "textarea", label: "Feedback", placeholder: "Your feedback helps us improve..." },\n    { \n      name: "category", \n      type: "select", \n      label: "Category", \n      options: ["Product", "Support", "Documentation", "Other"] \n    },\n  ],\n  submitLabel: "Submit Survey",\n  formOptions: {\n    defaultValues: { \n      satisfaction: 5,\n      recommend: true,\n      feedback: "",\n      category: ""\n    },\n    onSubmit: async ({ value }) => {\n      console.log("Survey submitted:", value);\n      alert("Thank you for your feedback!");\n    },\n  },\n});\n\nreturn <surveyForm.Form className="space-y-6" />;',r='const contactSchema = z.object({\n  name: z.string().min(2, "Name must be at least 2 characters"),\n  email: z.string().email("Please enter a valid email"),\n  subject: z.enum(["general", "support", "sales"]),\n  message: z.string().min(10, "Message must be at least 10 characters"),\n  urgent: z.boolean().default(false),\n});\n\nconst contactForm = useFormedible({\n  schema: contactSchema,\n  fields: [\n    { name: "name", type: "text", label: "Full Name", placeholder: "John Doe" },\n    { name: "email", type: "email", label: "Email", placeholder: "john@example.com" },\n    { \n      name: "subject", \n      type: "select", \n      label: "Subject",\n      options: [\n        { value: "general", label: "General Inquiry" },\n        { value: "support", label: "Technical Support" },\n        { value: "sales", label: "Sales Question" }\n      ]\n    },\n    { name: "message", type: "textarea", label: "Message", placeholder: "How can we help?" },\n    { name: "urgent", type: "checkbox", label: "This is urgent" },\n  ],\n  formOptions: {\n    defaultValues: {\n      name: "",\n      email: "",\n      subject: "general" as const,\n      message: "",\n      urgent: false,\n    },\n    onSubmit: async ({ value }) => {\n      console.log("Contact form submitted:", value);\n      toast.success("Message sent successfully!");\n    },\n  },\n});',i='const registrationSchema = z.object({\n  firstName: z.string().min(1, "First name is required"),\n  lastName: z.string().min(1, "Last name is required"),\n  birthDate: z.date(),\n  email: z.string().email("Invalid email"),\n  phone: z.string().min(10, "Phone number required"),\n  address: z.string().min(5, "Address required"),\n  newsletter: z.boolean(),\n  notifications: z.boolean(),\n  plan: z.enum(["basic", "pro", "enterprise"]),\n});\n\nconst registrationForm = useFormedible({\n  schema: registrationSchema,\n  fields: [\n    // Page 1 - Personal Info\n    { name: "firstName", type: "text", label: "First Name", page: 1 },\n    { name: "lastName", type: "text", label: "Last Name", page: 1 },\n    { name: "birthDate", type: "date", label: "Birth Date", page: 1 },\n    \n    // Page 2 - Contact Details\n    { name: "email", type: "email", label: "Email", page: 2 },\n    { name: "phone", type: "phone", label: "Phone", page: 2 },\n    { name: "address", type: "textarea", label: "Address", page: 2 },\n    \n    // Page 3 - Preferences\n    { name: "newsletter", type: "switch", label: "Subscribe to newsletter", page: 3 },\n    { name: "notifications", type: "switch", label: "Enable notifications", page: 3 },\n    { \n      name: "plan", \n      type: "radio", \n      label: "Choose Plan", \n      page: 3,\n      options: [\n        { value: "basic", label: "Basic - Free" },\n        { value: "pro", label: "Pro - $9/month" },\n        { value: "enterprise", label: "Enterprise - $29/month" }\n      ]\n    },\n  ],\n  pages: [\n    { page: 1, title: "Personal Information", description: "Tell us about yourself" },\n    { page: 2, title: "Contact Details", description: "How can we reach you?" },\n    { page: 3, title: "Preferences", description: "Customize your experience" },\n  ],\n  progress: { showSteps: true, showPercentage: true },\n});',o='const surveySchema = z.object({\n  satisfaction: z.number().min(1).max(5),\n  recommend: z.enum(["yes", "maybe", "no"]),\n  improvements: z.string().optional(),\n  referralSource: z.string().optional(),\n  otherSource: z.string().optional(),\n  features: z.array(z.string()),\n});\n\nconst surveyForm = useFormedible({\n  schema: surveySchema,\n  fields: [\n    { \n      name: "satisfaction", \n      type: "rating", \n      label: "How satisfied are you with our service?",\n      ratingConfig: { max: 5, allowHalf: false, showValue: true }\n    },\n    { \n      name: "recommend", \n      type: "radio", \n      label: "Would you recommend us to others?",\n      options: [\n        { value: "yes", label: "Yes, definitely" },\n        { value: "maybe", label: "Maybe" },\n        { value: "no", label: "No" }\n      ]\n    },\n    {\n      name: "improvements",\n      type: "textarea",\n      label: "What could we improve?",\n      conditional: (values: any) => values.satisfaction < 4,\n    },\n    {\n      name: "features",\n      type: "multiSelect",\n      label: "Which features do you use most?",\n      options: [\n        { value: "forms", label: "Form Builder" },\n        { value: "validation", label: "Validation" },\n        { value: "analytics", label: "Analytics" },\n        { value: "integrations", label: "Integrations" },\n        { value: "api", label: "API Access" }\n      ],\n      multiSelectConfig: { maxSelections: 3 }\n    }\n  ],\n});',m='const checkoutSchema = z.object({\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  email: z.string().email(),\n  address: z.string().min(5),\n  city: z.string().min(1),\n  zipCode: z.string().min(5),\n  paymentMethod: z.enum(["card", "paypal", "apple_pay"]),\n  cardNumber: z.string().optional(),\n  expiryDate: z.string().optional(),\n  shippingMethod: z.enum(["standard", "express", "overnight"]),\n  giftMessage: z.string().optional(),\n});\n\nconst checkoutForm = useFormedible({\n  schema: checkoutSchema,\n  fields: [\n    // Page 1 - Shipping Address\n    { name: "firstName", type: "text", label: "First Name", page: 1 },\n    { name: "lastName", type: "text", label: "Last Name", page: 1 },\n    { name: "email", type: "email", label: "Email", page: 1 },\n    { name: "address", type: "text", label: "Address", page: 1 },\n    { name: "city", type: "text", label: "City", page: 1 },\n    { name: "zipCode", type: "text", label: "ZIP Code", page: 1 },\n    \n    // Page 2 - Payment Method\n    { \n      name: "paymentMethod", \n      type: "radio", \n      label: "Payment Method", \n      page: 2,\n      options: [\n        { value: "card", label: "Credit/Debit Card" },\n        { value: "paypal", label: "PayPal" },\n        { value: "apple_pay", label: "Apple Pay" }\n      ]\n    },\n    {\n      name: "cardNumber",\n      type: "text",\n      label: "Card Number",\n      page: 2,\n      conditional: (values: any) => values.paymentMethod === "card",\n      placeholder: "1234 5678 9012 3456"\n    },\n    \n    // Page 3 - Shipping & Review\n    { \n      name: "shippingMethod", \n      type: "radio", \n      label: "Shipping Method", \n      page: 3,\n      options: [\n        { value: "standard", label: "Standard (5-7 days) - Free" },\n        { value: "express", label: "Express (2-3 days) - $9.99" },\n        { value: "overnight", label: "Overnight - $24.99" }\n      ]\n    },\n    { name: "giftMessage", type: "textarea", label: "Gift Message (Optional)", page: 3 },\n  ],\n  pages: [\n    { page: 1, title: "Shipping Address", description: "Where should we send your order?" },\n    { page: 2, title: "Payment", description: "How would you like to pay?" },\n    { page: 3, title: "Review & Submit", description: "Review your order" },\n  ],\n  progress: { showSteps: true },\n});',c='const jobApplicationSchema = z.object({\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  email: z.string().email(),\n  phone: z.string().min(1),\n  skills: z.array(z.string()).min(1),\n  startDate: z.date(),\n  salaryExpectation: z.number().min(0),\n  whyInterested: z.string().min(10),\n  additionalInfo: z.string().optional(),\n});\n\nconst jobApplicationForm = useFormedible({\n  schema: jobApplicationSchema,\n  fields: [\n    // Page 1 - Personal Information\n    { name: "firstName", type: "text", label: "First Name", page: 1 },\n    { name: "lastName", type: "text", label: "Last Name", page: 1 },\n    { name: "email", type: "email", label: "Email", page: 1 },\n    { name: "phone", type: "phone", label: "Phone Number", page: 1 },\n    \n    // Page 2 - Skills & Experience\n    {\n      name: "skills",\n      type: "multiSelect",\n      label: "Technical Skills",\n      page: 2,\n      options: [\n        { value: "javascript", label: "JavaScript" },\n        { value: "typescript", label: "TypeScript" },\n        { value: "react", label: "React" },\n        { value: "node", label: "Node.js" },\n        { value: "python", label: "Python" },\n        { value: "java", label: "Java" },\n        { value: "sql", label: "SQL" },\n        { value: "aws", label: "AWS" },\n      ],\n      multiSelectConfig: {\n        searchable: true,\n        creatable: true,\n        maxSelections: 10\n      }\n    },\n    { name: "startDate", type: "date", label: "Available Start Date", page: 2 },\n    { \n      name: "salaryExpectation", \n      type: "number", \n      label: "Salary Expectation (USD)", \n      page: 2,\n      min: 0,\n      step: 1000\n    },\n    \n    // Page 3 - Additional Questions\n    { \n      name: "whyInterested", \n      type: "textarea", \n      label: "Why are you interested in this position?", \n      page: 3 \n    },\n    { \n      name: "additionalInfo", \n      type: "textarea", \n      label: "Additional Information", \n      page: 3 \n    },\n  ],\n  pages: [\n    { page: 1, title: "Personal Information" },\n    { page: 2, title: "Skills & Availability" },\n    { page: 3, title: "Additional Questions" },\n  ],\n  progress: { showSteps: true, showPercentage: true },\n});'},6838:(e,n,a)=>{a.d(n,{O:()=>o});var t=a(4568);a(7620);var l=a(3353),s=a(603),r=a(4148),i=a(3204);let o=e=>{let{title:n,description:a,preview:o,code:m,codeTitle:c,codeDescription:d,badges:u}=e;return(0,t.jsxs)(s.tU,{defaultValue:"preview",className:"w-full",children:[(0,t.jsxs)(s.j7,{className:"grid w-full grid-cols-2 mb-0",children:[(0,t.jsx)(s.Xi,{value:"preview",children:"Preview"}),(0,t.jsx)(s.Xi,{value:"code",children:"Code"})]}),(0,t.jsx)(s.av,{value:"preview",className:"mt-0",children:(0,t.jsxs)(l.Zp,{className:"rounded-t-none border-t-0 bg-muted/30",children:[(0,t.jsxs)(l.aR,{children:[(0,t.jsxs)(l.ZB,{className:"flex items-center gap-2",children:[n,null==u?void 0:u.map((e,n)=>(0,t.jsx)(r.E,{variant:e.variant||"secondary",children:e.text},n))]}),(0,t.jsx)(l.BT,{children:a})]}),(0,t.jsx)(l.Wu,{children:(0,t.jsx)("div",{className:"relative",children:o})})]})}),(0,t.jsx)(s.av,{value:"code",className:"mt-0",children:(0,t.jsxs)(l.Zp,{className:"rounded-t-none border-t-0",children:[(0,t.jsxs)(l.aR,{children:[(0,t.jsx)(l.ZB,{children:c||"".concat(n," Code")}),(0,t.jsx)(l.BT,{children:d||"Implementation code for ".concat(n.toLowerCase())})]}),(0,t.jsx)(l.Wu,{className:"p-0",children:(0,t.jsx)(i.CodeBlock,{code:m})})]})})]})}},7680:(e,n,a)=>{a.d(n,{l:()=>r});var t=a(4568),l=a(8309),s=a(1874);let r=e=>{let{...n}=e,{theme:a="system"}=(0,l.D)();return(0,t.jsx)(s.l$,{theme:a,className:"toaster group",style:{"--normal-bg":"var(--popover)","--normal-text":"var(--popover-foreground)","--normal-border":"var(--border)"},...n})}},8309:(e,n,a)=>{a.d(n,{D:()=>m,N:()=>c});var t=a(7620),l=(e,n,a,t,l,s,r,i)=>{let o=document.documentElement,m=["light","dark"];function c(n){var a;(Array.isArray(e)?e:[e]).forEach(e=>{let a="class"===e,t=a&&s?l.map(e=>s[e]||e):l;a?(o.classList.remove(...t),o.classList.add(s&&s[n]?s[n]:n)):o.setAttribute(e,n)}),a=n,i&&m.includes(a)&&(o.style.colorScheme=a)}if(t)c(t);else try{let e=localStorage.getItem(n)||a,t=r&&"system"===e?window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light":e;c(t)}catch(e){}},s=["light","dark"],r="(prefers-color-scheme: dark)",i=t.createContext(void 0),o={setTheme:e=>{},themes:[]},m=()=>{var e;return null!=(e=t.useContext(i))?e:o},c=e=>t.useContext(i)?t.createElement(t.Fragment,null,e.children):t.createElement(u,{...e}),d=["light","dark"],u=e=>{let{forcedTheme:n,disableTransitionOnChange:a=!1,enableSystem:l=!0,enableColorScheme:o=!0,storageKey:m="theme",themes:c=d,defaultTheme:u=l?"system":"light",attribute:g="data-theme",value:f,children:v,nonce:x,scriptProps:S}=e,[z,w]=t.useState(()=>b(m,u)),[N,P]=t.useState(()=>"system"===z?y():z),j=f?Object.values(f):c,C=t.useCallback(e=>{let n=e;if(!n)return;"system"===e&&l&&(n=y());let t=f?f[n]:n,r=a?h(x):null,i=document.documentElement,m=e=>{"class"===e?(i.classList.remove(...j),t&&i.classList.add(t)):e.startsWith("data-")&&(t?i.setAttribute(e,t):i.removeAttribute(e))};if(Array.isArray(g)?g.forEach(m):m(g),o){let e=s.includes(u)?u:null,a=s.includes(n)?n:e;i.style.colorScheme=a}null==r||r()},[x]),F=t.useCallback(e=>{let n="function"==typeof e?e(z):e;w(n);try{localStorage.setItem(m,n)}catch(e){}},[z]),k=t.useCallback(e=>{P(y(e)),"system"===z&&l&&!n&&C("system")},[z,n]);t.useEffect(()=>{let e=window.matchMedia(r);return e.addListener(k),k(e),()=>e.removeListener(k)},[k]),t.useEffect(()=>{let e=e=>{e.key===m&&(e.newValue?w(e.newValue):F(u))};return window.addEventListener("storage",e),()=>window.removeEventListener("storage",e)},[F]),t.useEffect(()=>{C(null!=n?n:z)},[n,z]);let E=t.useMemo(()=>({theme:z,setTheme:F,forcedTheme:n,resolvedTheme:"system"===z?N:z,themes:l?[...c,"system"]:c,systemTheme:l?N:void 0}),[z,F,n,N,l,c]);return t.createElement(i.Provider,{value:E},t.createElement(p,{forcedTheme:n,storageKey:m,attribute:g,enableSystem:l,enableColorScheme:o,defaultTheme:u,value:f,themes:c,nonce:x,scriptProps:S}),v)},p=t.memo(e=>{let{forcedTheme:n,storageKey:a,attribute:s,enableSystem:r,enableColorScheme:i,defaultTheme:o,value:m,themes:c,nonce:d,scriptProps:u}=e,p=JSON.stringify([s,a,o,n,c,m,r,i]).slice(1,-1);return t.createElement("script",{...u,suppressHydrationWarning:!0,nonce:"",dangerouslySetInnerHTML:{__html:"(".concat(l.toString(),")(").concat(p,")")}})}),b=(e,n)=>{let a;try{a=localStorage.getItem(e)||void 0}catch(e){}return a||n},h=e=>{let n=document.createElement("style");return e&&n.setAttribute("nonce",e),n.appendChild(document.createTextNode("*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),document.head.appendChild(n),()=>{window.getComputedStyle(document.body),setTimeout(()=>{document.head.removeChild(n)},1)}},y=e=>(e||(e=window.matchMedia(r)),e.matches?"dark":"light")}}]);