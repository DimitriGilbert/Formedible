"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[937],{579:(e,n,a)=>{a.d(n,{Bg:()=>p,Bp:()=>b,Eq:()=>d,SS:()=>i,ZY:()=>c,_D:()=>m,iy:()=>t,nF:()=>l,s9:()=>r,u:()=>o,vK:()=>s,x$:()=>u});let t='const contactForm = useFormedible({\n  schema: z.object({\n    name: z.string().min(2, "Name must be at least 2 characters"),\n    email: z.string().email("Please enter a valid email"),\n    message: z.string().min(10, "Message must be at least 10 characters"),\n    newsletter: z.boolean().optional(),\n  }),\n  fields: [\n    { name: "name", type: "text", label: "Full Name", placeholder: "Enter your full name" },\n    { name: "email", type: "email", label: "Email Address", placeholder: "your@email.com" },\n    { name: "message", type: "textarea", label: "Message", placeholder: "Tell us what you think..." },\n    { name: "newsletter", type: "checkbox", label: "Subscribe to newsletter" },\n  ],\n  submitLabel: "Send Message",\n  formOptions: {\n    defaultValues: { \n      name: "",\n      email: "",\n      message: "",\n      newsletter: false \n    },\n    onSubmit: async ({ value }) => {\n      console.log("Contact form submitted:", value);\n      alert("Thank you for your message!");\n    },\n  },\n});\n\nreturn <contactForm.Form className="space-y-6" />;',l='const AnimatedFieldWrapper: React.FC<{ children: React.ReactNode; field: any }> = ({ children, field }) => (\n  <motion.div\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    exit={{ opacity: 0, y: -20 }}\n    transition={{ duration: 0.3, delay: 0.1 }}\n    className="space-y-2"\n  >\n    {children}\n  </motion.div>\n);\n\nconst profileForm = useFormedible({\n  schema: z.object({\n    firstName: z.string().min(1, "First name is required"),\n    lastName: z.string().min(1, "Last name is required"),\n    email: z.string().email("Please enter a valid email"),\n    age: z.number().min(13, "Must be at least 13 years old").max(120, "Invalid age"),\n    country: z.string().min(1, "Please select a country"),\n    bio: z.string().optional(),\n    notifications: z.boolean().default(true),\n    newsletter: z.boolean().default(false),\n    birthday: z.date().optional(),\n  }),\n  fields: [\n    { name: "firstName", type: "text", label: "First Name", placeholder: "John" },\n    { name: "lastName", type: "text", label: "Last Name", placeholder: "Doe" },\n    { name: "email", type: "email", label: "Email", placeholder: "john@example.com" },\n    { name: "age", type: "number", label: "Age", placeholder: "25", min: 13, max: 120 },\n    { \n      name: "country", \n      type: "select", \n      label: "Country", \n      options: ["United States", "Canada", "United Kingdom", "Germany", "France", "Other"] \n    },\n    { name: "bio", type: "textarea", label: "Bio", placeholder: "Tell us about yourself..." },\n    { name: "notifications", type: "switch", label: "Enable notifications" },\n    { name: "newsletter", type: "checkbox", label: "Subscribe to newsletter" },\n    { name: "birthday", type: "date", label: "Birthday" },\n  ],\n  submitLabel: "Update Profile",\n  globalWrapper: AnimatedFieldWrapper,\n  formOptions: {\n    defaultValues: {\n      firstName: "",\n      lastName: "",\n      email: "",\n      age: 25,\n      country: "",\n      bio: "",\n      notifications: true,\n      newsletter: false,\n    },\n    onSubmit: async ({ value }) => {\n      console.log("Profile updated:", value);\n      alert("Profile updated successfully!");\n    },\n  },\n});\n\nreturn <profileForm.Form className="space-y-6" />;',i='const surveyForm = useFormedible({\n  schema: z.object({\n    satisfaction: z.number().min(1).max(10),\n    recommend: z.boolean(),\n    feedback: z.string().min(5, "Please provide at least 5 characters of feedback"),\n    category: z.string().min(1, "Please select a category"),\n  }),\n  fields: [\n    { name: "satisfaction", type: "slider", label: "Satisfaction (1-10)", min: 1, max: 10 },\n    { name: "recommend", type: "switch", label: "Would you recommend us?" },\n    { name: "feedback", type: "textarea", label: "Feedback", placeholder: "Your feedback helps us improve..." },\n    { \n      name: "category", \n      type: "select", \n      label: "Category", \n      options: ["Product", "Support", "Documentation", "Other"] \n    },\n  ],\n  submitLabel: "Submit Survey",\n  formOptions: {\n    defaultValues: { \n      satisfaction: 5,\n      recommend: true,\n      feedback: "",\n      category: ""\n    },\n    onSubmit: async ({ value }) => {\n      console.log("Survey submitted:", value);\n      alert("Thank you for your feedback!");\n    },\n  },\n});\n\nreturn <surveyForm.Form className="space-y-6" />;',o='const contactSchema = z.object({\n  name: z.string().min(2, "Name must be at least 2 characters"),\n  email: z.string().email("Please enter a valid email"),\n  subject: z.enum(["general", "support", "sales"]),\n  message: z.string().min(10, "Message must be at least 10 characters"),\n  urgent: z.boolean().default(false),\n});\n\nconst contactForm = useFormedible({\n  schema: contactSchema,\n  fields: [\n    { name: "name", type: "text", label: "Full Name", placeholder: "John Doe" },\n    { name: "email", type: "email", label: "Email", placeholder: "john@example.com" },\n    { \n      name: "subject", \n      type: "select", \n      label: "Subject",\n      options: [\n        { value: "general", label: "General Inquiry" },\n        { value: "support", label: "Technical Support" },\n        { value: "sales", label: "Sales Question" }\n      ]\n    },\n    { name: "message", type: "textarea", label: "Message", placeholder: "How can we help?" },\n    { name: "urgent", type: "checkbox", label: "This is urgent" },\n  ],\n  formOptions: {\n    defaultValues: {\n      name: "",\n      email: "",\n      subject: "general" as const,\n      message: "",\n      urgent: false,\n    },\n    onSubmit: async ({ value }) => {\n      console.log("Contact form submitted:", value);\n      toast.success("Message sent successfully!");\n    },\n  },\n});',s='const registrationSchema = z.object({\n  firstName: z.string().min(1, "First name is required"),\n  lastName: z.string().min(1, "Last name is required"),\n  birthDate: z.date(),\n  email: z.string().email("Invalid email"),\n  phone: z.string().min(10, "Phone number required"),\n  address: z.string().min(5, "Address required"),\n  newsletter: z.boolean(),\n  notifications: z.boolean(),\n  plan: z.enum(["basic", "pro", "enterprise"]),\n});\n\nconst registrationForm = useFormedible({\n  schema: registrationSchema,\n  fields: [\n    // Page 1 - Personal Info\n    { name: "firstName", type: "text", label: "First Name", page: 1 },\n    { name: "lastName", type: "text", label: "Last Name", page: 1 },\n    { name: "birthDate", type: "date", label: "Birth Date", page: 1 },\n    \n    // Page 2 - Contact Details\n    { name: "email", type: "email", label: "Email", page: 2 },\n    { name: "phone", type: "phone", label: "Phone", page: 2 },\n    { name: "address", type: "textarea", label: "Address", page: 2 },\n    \n    // Page 3 - Preferences\n    { name: "newsletter", type: "switch", label: "Subscribe to newsletter", page: 3 },\n    { name: "notifications", type: "switch", label: "Enable notifications", page: 3 },\n    { \n      name: "plan", \n      type: "radio", \n      label: "Choose Plan", \n      page: 3,\n      options: [\n        { value: "basic", label: "Basic - Free" },\n        { value: "pro", label: "Pro - $9/month" },\n        { value: "enterprise", label: "Enterprise - $29/month" }\n      ]\n    },\n  ],\n  pages: [\n    { page: 1, title: "Personal Information", description: "Tell us about yourself" },\n    { page: 2, title: "Contact Details", description: "How can we reach you?" },\n    { page: 3, title: "Preferences", description: "Customize your experience" },\n  ],\n  progress: { showSteps: true, showPercentage: true },\n});',r='const surveySchema = z.object({\n  satisfaction: z.number().min(1).max(5),\n  recommend: z.enum(["yes", "maybe", "no"]),\n  improvements: z.string().optional(),\n  referralSource: z.string().optional(),\n  otherSource: z.string().optional(),\n  features: z.array(z.string()),\n});\n\nconst surveyForm = useFormedible({\n  schema: surveySchema,\n  fields: [\n    { \n      name: "satisfaction", \n      type: "rating", \n      label: "How satisfied are you with our service?",\n      ratingConfig: { max: 5, allowHalf: false, showValue: true }\n    },\n    { \n      name: "recommend", \n      type: "radio", \n      label: "Would you recommend us to others?",\n      options: [\n        { value: "yes", label: "Yes, definitely" },\n        { value: "maybe", label: "Maybe" },\n        { value: "no", label: "No" }\n      ]\n    },\n    {\n      name: "improvements",\n      type: "textarea",\n      label: "What could we improve?",\n      conditional: (values: any) => values.satisfaction < 4,\n    },\n    {\n      name: "features",\n      type: "multiSelect",\n      label: "Which features do you use most?",\n      options: [\n        { value: "forms", label: "Form Builder" },\n        { value: "validation", label: "Validation" },\n        { value: "analytics", label: "Analytics" },\n        { value: "integrations", label: "Integrations" },\n        { value: "api", label: "API Access" }\n      ],\n      multiSelectConfig: { maxSelections: 3 }\n    }\n  ],\n});',m='const checkoutSchema = z.object({\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  email: z.string().email(),\n  address: z.string().min(5),\n  city: z.string().min(1),\n  zipCode: z.string().min(5),\n  paymentMethod: z.enum(["card", "paypal", "apple_pay"]),\n  cardNumber: z.string().optional(),\n  expiryDate: z.string().optional(),\n  shippingMethod: z.enum(["standard", "express", "overnight"]),\n  giftMessage: z.string().optional(),\n});\n\nconst checkoutForm = useFormedible({\n  schema: checkoutSchema,\n  fields: [\n    // Page 1 - Shipping Address\n    { name: "firstName", type: "text", label: "First Name", page: 1 },\n    { name: "lastName", type: "text", label: "Last Name", page: 1 },\n    { name: "email", type: "email", label: "Email", page: 1 },\n    { name: "address", type: "text", label: "Address", page: 1 },\n    { name: "city", type: "text", label: "City", page: 1 },\n    { name: "zipCode", type: "text", label: "ZIP Code", page: 1 },\n    \n    // Page 2 - Payment Method\n    { \n      name: "paymentMethod", \n      type: "radio", \n      label: "Payment Method", \n      page: 2,\n      options: [\n        { value: "card", label: "Credit/Debit Card" },\n        { value: "paypal", label: "PayPal" },\n        { value: "apple_pay", label: "Apple Pay" }\n      ]\n    },\n    {\n      name: "cardNumber",\n      type: "text",\n      label: "Card Number",\n      page: 2,\n      conditional: (values: any) => values.paymentMethod === "card",\n      placeholder: "1234 5678 9012 3456"\n    },\n    \n    // Page 3 - Shipping & Review\n    { \n      name: "shippingMethod", \n      type: "radio", \n      label: "Shipping Method", \n      page: 3,\n      options: [\n        { value: "standard", label: "Standard (5-7 days) - Free" },\n        { value: "express", label: "Express (2-3 days) - $9.99" },\n        { value: "overnight", label: "Overnight - $24.99" }\n      ]\n    },\n    { name: "giftMessage", type: "textarea", label: "Gift Message (Optional)", page: 3 },\n  ],\n  pages: [\n    { page: 1, title: "Shipping Address", description: "Where should we send your order?" },\n    { page: 2, title: "Payment", description: "How would you like to pay?" },\n    { page: 3, title: "Review & Submit", description: "Review your order" },\n  ],\n  progress: { showSteps: true },\n});',c='const jobApplicationSchema = z.object({\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  email: z.string().email(),\n  phone: z.string().min(1),\n  skills: z.array(z.string()).min(1),\n  startDate: z.date(),\n  salaryExpectation: z.number().min(0),\n  whyInterested: z.string().min(10),\n  additionalInfo: z.string().optional(),\n});\n\nconst jobApplicationForm = useFormedible({\n  schema: jobApplicationSchema,\n  fields: [\n    // Page 1 - Personal Information\n    { name: "firstName", type: "text", label: "First Name", page: 1 },\n    { name: "lastName", type: "text", label: "Last Name", page: 1 },\n    { name: "email", type: "email", label: "Email", page: 1 },\n    { name: "phone", type: "phone", label: "Phone Number", page: 1 },\n    \n    // Page 2 - Skills & Experience\n    {\n      name: "skills",\n      type: "multiSelect",\n      label: "Technical Skills",\n      page: 2,\n      options: [\n        { value: "javascript", label: "JavaScript" },\n        { value: "typescript", label: "TypeScript" },\n        { value: "react", label: "React" },\n        { value: "node", label: "Node.js" },\n        { value: "python", label: "Python" },\n        { value: "java", label: "Java" },\n        { value: "sql", label: "SQL" },\n        { value: "aws", label: "AWS" },\n      ],\n      multiSelectConfig: {\n        searchable: true,\n        creatable: true,\n        maxSelections: 10\n      }\n    },\n    { name: "startDate", type: "date", label: "Available Start Date", page: 2 },\n    { \n      name: "salaryExpectation", \n      type: "number", \n      label: "Salary Expectation (USD)", \n      page: 2,\n      min: 0,\n      step: 1000\n    },\n    \n    // Page 3 - Additional Questions\n    { \n      name: "whyInterested", \n      type: "textarea", \n      label: "Why are you interested in this position?", \n      page: 3 \n    },\n    { \n      name: "additionalInfo", \n      type: "textarea", \n      label: "Additional Information", \n      page: 3 \n    },\n  ],\n  pages: [\n    { page: 1, title: "Personal Information" },\n    { page: 2, title: "Skills & Availability" },\n    { page: 3, title: "Additional Questions" },\n  ],\n  progress: { showSteps: true, showPercentage: true },\n});',p='const analyticsSchema = z.object({\n  email: z.string().email("Valid email required"),\n  companySize: z.enum(["1-10", "11-50", "51-200", "200+"]),\n  interests: z.array(z.string()).min(1, "Select at least one interest"),\n  budget: z.enum(["<10k", "10k-50k", "50k-100k", "100k+"]),\n  timeline: z.string().min(1, "Timeline is required"),\n  description: z.string().min(20, "Please provide more details"),\n});\n\nconst analyticsForm = useFormedible({\n  schema: analyticsSchema,\n  fields: [\n    { name: "email", type: "email", label: "Business Email", page: 1 },\n    { \n      name: "companySize", \n      type: "select", \n      label: "Company Size", \n      page: 1,\n      options: [\n        { value: "1-10", label: "1-10 employees" },\n        { value: "11-50", label: "11-50 employees" },\n        { value: "51-200", label: "51-200 employees" },\n        { value: "200+", label: "200+ employees" }\n      ]\n    },\n    {\n      name: "interests",\n      type: "multiSelect",\n      label: "Areas of Interest",\n      page: 2,\n      options: [\n        { value: "web-dev", label: "Web Development" },\n        { value: "mobile", label: "Mobile Apps" },\n        { value: "ecommerce", label: "E-commerce" },\n        { value: "analytics", label: "Analytics" },\n        { value: "automation", label: "Automation" }\n      ]\n    },\n    { \n      name: "budget", \n      type: "radio", \n      label: "Project Budget", \n      page: 2,\n      options: [\n        { value: "<10k", label: "Less than $10,000" },\n        { value: "10k-50k", label: "$10,000 - $50,000" },\n        { value: "50k-100k", label: "$50,000 - $100,000" },\n        { value: "100k+", label: "$100,000+" }\n      ]\n    },\n    { \n      name: "timeline", \n      type: "select", \n      label: "Timeline", \n      page: 3,\n      options: ["ASAP", "1-3 months", "3-6 months", "6+ months"]\n    },\n    { \n      name: "description", \n      type: "textarea", \n      label: "Project Description", \n      page: 3,\n      textareaConfig: { rows: 4, showWordCount: true, maxLength: 500 }\n    },\n  ],\n  pages: [\n    { page: 1, title: "Company Info", description: "Tell us about your company" },\n    { page: 2, title: "Project Details", description: "What are you looking for?" },\n    { page: 3, title: "Timeline & Details", description: "When do you need this?" },\n  ],\n  progress: { showSteps: true, showPercentage: true },\n  analytics: {\n    onFormStart: (timestamp) => {\n      console.log(\'Form started at:\', new Date(timestamp).toISOString());\n      gtag(\'event\', \'form_start\', { timestamp });\n    },\n    onFieldFocus: (fieldName, timestamp) => {\n      console.log(`Field ${fieldName} focused at:`, new Date(timestamp).toISOString());\n    },\n    onFieldBlur: (fieldName, timeSpent) => {\n      console.log(`Field ${fieldName} completed in ${timeSpent}ms`);\n    },\n    onPageChange: (fromPage, toPage, timeSpent) => {\n      console.log(`Page ${fromPage} → ${toPage} (spent ${timeSpent}ms)`);\n      gtag(\'event\', \'form_page_change\', { from_page: fromPage, to_page: toPage });\n    },\n    onFormComplete: (timeSpent, formData) => {\n      console.log(`Form completed in ${timeSpent}ms with data:`, formData);\n      gtag(\'event\', \'form_complete\', { \n        time_spent: timeSpent,\n        company_size: formData.companySize,\n        budget: formData.budget \n      });\n    },\n    onFormAbandon: (completionPercentage) => {\n      console.log(`Form abandoned at ${completionPercentage}% completion`);\n      gtag(\'event\', \'form_abandon\', { completion_percentage: completionPercentage });\n    }\n  },\n});',u='const persistenceSchema = z.object({\n  name: z.string().min(1, "Name is required"),\n  email: z.string().email("Valid email required"),\n  phone: z.string().min(1, "Phone is required"),\n  company: z.string().min(1, "Company is required"),\n  jobTitle: z.string().min(1, "Job title is required"),\n  projectType: z.array(z.string()).min(1, "Select at least one project type"),\n  timeline: z.string().min(1, "Timeline is required"),\n  budget: z.string().min(1, "Budget is required"),\n  description: z.string().min(50, "Please provide at least 50 characters"),\n  agreeToTerms: z.boolean().refine(val => val === true, "You must agree to terms"),\n});\n\nconst persistenceForm = useFormedible({\n  schema: persistenceSchema,\n  fields: [\n    // Page 1: Contact Information\n    { \n      name: "name", \n      type: "text", \n      label: "Full Name", \n      page: 1,\n      section: { title: "Contact Information", description: "Your basic details" }\n    },\n    { name: "email", type: "email", label: "Email Address", page: 1 },\n    { name: "phone", type: "phone", label: "Phone Number", page: 1 },\n    { name: "company", type: "text", label: "Company Name", page: 1 },\n    { name: "jobTitle", type: "text", label: "Job Title", page: 1 },\n    \n    // Page 2: Project Details\n    {\n      name: "projectType",\n      type: "multiSelect",\n      label: "Project Type",\n      page: 2,\n      section: { title: "Project Requirements", description: "What do you need help with?" },\n      options: [\n        { value: "web-dev", label: "Web Development" },\n        { value: "mobile-app", label: "Mobile App" },\n        { value: "ecommerce", label: "E-commerce Platform" },\n        { value: "api", label: "API Development" },\n        { value: "consulting", label: "Technical Consulting" }\n      ],\n      multiSelectConfig: { searchable: true, maxSelections: 3 }\n    },\n    { \n      name: "timeline", \n      type: "select", \n      label: "Timeline", \n      page: 2,\n      options: ["ASAP", "1-3 months", "3-6 months", "6+ months", "Flexible"]\n    },\n    { \n      name: "budget", \n      type: "radio", \n      label: "Budget Range", \n      page: 2,\n      options: [\n        { value: "<25k", label: "Less than $25,000" },\n        { value: "25k-75k", label: "$25,000 - $75,000" },\n        { value: "75k-150k", label: "$75,000 - $150,000" },\n        { value: "150k+", label: "$150,000+" }\n      ]\n    },\n    \n    // Page 3: Final Details\n    { \n      name: "description", \n      type: "textarea", \n      label: "Project Description", \n      page: 3,\n      section: { title: "Project Details", description: "Tell us more about your project" },\n      textareaConfig: { rows: 6, showWordCount: true, maxLength: 1000 }\n    },\n    { \n      name: "agreeToTerms", \n      type: "checkbox", \n      label: "I agree to the terms of service and privacy policy", \n      page: 3 \n    },\n  ],\n  pages: [\n    { page: 1, title: "Contact Information", description: "Let\'s start with your details" },\n    { page: 2, title: "Project Requirements", description: "Tell us about your project" },\n    { page: 3, title: "Final Details", description: "Complete your inquiry" },\n  ],\n  progress: { showSteps: true, showPercentage: true },\n  persistence: {\n    key: "project-inquiry-form",\n    storage: "localStorage",\n    debounceMs: 1500,\n    exclude: ["agreeToTerms"], // Don\'t persist checkbox agreement\n    restoreOnMount: true\n  },\n  formOptions: {\n    onSubmit: async ({ value }) => {\n      console.log("Form submitted:", value);\n      toast.success("Inquiry submitted! We\'ll be in touch within 24 hours.");\n    }\n  }\n});',d='const arrayFieldsSchema = z.object({\n  teamMembers: z.array(z.object({\n    name: z.string().min(1, "Name is required"),\n    email: z.string().email("Valid email required"),\n    role: z.enum(["developer", "designer", "manager", "qa"]),\n    skills: z.array(z.string()),\n    startDate: z.date(),\n  })).min(1, "At least one team member is required"),\n  \n  contactMethods: z.array(z.string().email("Must be valid email")).min(1, "At least one contact method required"),\n  \n  emergencyContacts: z.array(z.object({\n    name: z.string().min(1),\n    relationship: z.string().min(1),\n    phone: z.string().min(1),\n    isPrimary: z.boolean()\n  })).max(3, "Maximum 3 emergency contacts"),\n});\n\nconst arrayFieldsForm = useFormedible({\n  schema: arrayFieldsSchema,\n  fields: [\n    {\n      name: "teamMembers",\n      type: "array",\n      label: "Team Members",\n      arrayConfig: {\n        itemType: "object",\n        itemLabel: "Team Member",\n        minItems: 1,\n        maxItems: 10,\n        sortable: true,\n        addButtonLabel: "Add Team Member",\n        removeButtonLabel: "Remove Member",\n        defaultValue: {\n          name: "",\n          email: "",\n          role: "developer",\n          skills: [],\n          startDate: new Date(),\n        },\n      },\n    },\n    {\n      name: "contactMethods",\n      type: "array",\n      label: "Contact Email Addresses",\n      arrayConfig: {\n        itemType: "email",\n        itemLabel: "Email Address",\n        itemPlaceholder: "contact@company.com",\n        minItems: 1,\n        maxItems: 5,\n        addButtonLabel: "Add Email",\n        removeButtonLabel: "Remove",\n        defaultValue: "",\n      },\n    },\n  ],\n});',b='const advancedFieldsSchema = z.object({\n  satisfaction: z.number().min(1).max(5),\n  phoneNumber: z.string().min(1, "Phone number is required"),\n  favoriteColor: z.string().min(1, "Please select a color"),\n  workDuration: z.object({\n    hours: z.number().min(0),\n    minutes: z.number().min(0),\n  }).optional(),\n  skills: z.array(z.string()).min(1, "Select at least one skill"),\n  experienceLevel: z.number().min(1).max(10),\n  birthDate: z.date(),\n  resume: z.any().optional(),\n});\n\nconst advancedFieldsForm = useFormedible({\n  schema: advancedFieldsSchema,\n  fields: [\n    {\n      name: "satisfaction",\n      type: "rating",\n      label: "How satisfied are you with our service?",\n      ratingConfig: {\n        max: 5,\n        allowHalf: true,\n        icon: "star",\n        size: "lg",\n        showValue: true\n      }\n    },\n    {\n      name: "phoneNumber",\n      type: "phone",\n      label: "Phone Number",\n      phoneConfig: {\n        defaultCountry: "US",\n        format: "international"\n      }\n    },\n    {\n      name: "favoriteColor",\n      type: "colorPicker",\n      label: "Brand Color",\n      colorConfig: {\n        format: "hex",\n        showPreview: true,\n        presetColors: ["#ff0000", "#00ff00", "#0000ff", "#ffff00"],\n        allowCustom: true\n      }\n    },\n    {\n      name: "workDuration",\n      type: "duration",\n      label: "Daily Work Hours",\n      durationConfig: {\n        format: "hm",\n        maxHours: 24,\n        showLabels: true\n      }\n    },\n    {\n      name: "skills",\n      type: "multiSelect",\n      label: "Technical Skills",\n      options: [\n        { value: "javascript", label: "JavaScript" },\n        { value: "typescript", label: "TypeScript" },\n        { value: "react", label: "React" },\n        { value: "python", label: "Python" }\n      ],\n      multiSelectConfig: {\n        searchable: true,\n        creatable: true,\n        maxSelections: 8\n      }\n    },\n    {\n      name: "experienceLevel",\n      type: "slider",\n      label: "Experience Level (1-10)",\n      sliderConfig: {\n        min: 1,\n        max: 10,\n        step: 1,\n        showTooltip: true,\n        showValue: true\n      }\n    },\n    {\n      name: "birthDate",\n      type: "date",\n      label: "Date of Birth",\n      dateConfig: {\n        maxDate: new Date(),\n        minDate: new Date(1900, 0, 1)\n      }\n    },\n    {\n      name: "resume",\n      type: "file",\n      label: "Upload Resume",\n      fileConfig: {\n        accept: ".pdf,.doc,.docx",\n        multiple: false,\n        maxSize: 5 * 1024 * 1024\n      }\n    }\n  ],\n});'},6838:(e,n,a)=>{a.d(n,{O:()=>r});var t=a(4568);a(7620);var l=a(3353),i=a(603),o=a(4148),s=a(3204);let r=e=>{let{title:n,description:a,preview:r,code:m,codeTitle:c,codeDescription:p,badges:u}=e;return(0,t.jsxs)(i.tU,{defaultValue:"preview",className:"w-full",children:[(0,t.jsxs)(i.j7,{className:"grid w-full grid-cols-2 mb-0",children:[(0,t.jsx)(i.Xi,{value:"preview",children:"Preview"}),(0,t.jsx)(i.Xi,{value:"code",children:"Code"})]}),(0,t.jsx)(i.av,{value:"preview",className:"mt-0",children:(0,t.jsxs)(l.Zp,{className:"rounded-t-none border-t-0 bg-muted/30",children:[(0,t.jsxs)(l.aR,{children:[(0,t.jsxs)(l.ZB,{className:"flex items-center gap-2",children:[n,null==u?void 0:u.map((e,n)=>(0,t.jsx)(o.E,{variant:e.variant||"secondary",children:e.text},n))]}),(0,t.jsx)(l.BT,{children:a})]}),(0,t.jsx)(l.Wu,{children:(0,t.jsx)("div",{className:"relative",children:r})})]})}),(0,t.jsx)(i.av,{value:"code",className:"mt-0",children:(0,t.jsxs)(l.Zp,{className:"rounded-t-none border-t-0",children:[(0,t.jsxs)(l.aR,{children:[(0,t.jsx)(l.ZB,{children:c||"".concat(n," Code")}),(0,t.jsx)(l.BT,{children:p||"Implementation code for ".concat(n.toLowerCase())})]}),(0,t.jsx)(l.Wu,{className:"p-0",children:(0,t.jsx)(s.CodeBlock,{code:m})})]})})]})}},7680:(e,n,a)=>{a.d(n,{l:()=>o});var t=a(4568),l=a(8309),i=a(1874);let o=e=>{let{...n}=e,{theme:a="system"}=(0,l.D)();return(0,t.jsx)(i.l$,{theme:a,className:"toaster group",style:{"--normal-bg":"var(--popover)","--normal-text":"var(--popover-foreground)","--normal-border":"var(--border)"},...n})}}}]);